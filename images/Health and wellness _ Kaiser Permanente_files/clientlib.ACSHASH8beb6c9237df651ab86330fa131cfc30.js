/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/audio-player/audio-player-schema.js":
/*!************************************************************!*\
  !*** ./app/components/audio-player/audio-player-schema.js ***!
  \************************************************************/
/*! exports provided: createAudioSchema, appendJsonLd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createAudioSchema\", function() { return createAudioSchema; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"appendJsonLd\", function() { return appendJsonLd; });\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ \"moment\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar baseSchema = {\n  \"@context\": \"schema.org\",\n  \"@type\": \"AudioObject\",\n  \"contentUrl\": window.location.href\n};\nvar appendJsonLd = function appendJsonLd(kulu, transcript) {\n  // kulu is Qumu presentation object\n  try {\n    var ldData = _objectSpread(_objectSpread({}, baseSchema), {}, {\n      \"name\": kulu.title,\n      \"uploadDate\": new Date(kulu.created).toISOString(),\n      \"duration\": moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(kulu.duration),\n      \"embedUrl\": kulu.player\n    });\n    if (kulu.thumbnail) {\n      ldData['thumbnailUrl'] = kulu.thumbnail.url;\n    }\n    if (transcript) {\n      ldData['transcript'] = transcript;\n    }\n    var stringifiedData = JSON.stringify(ldData);\n    $('<script>').attr('type', 'application/ld+json').text(stringifiedData).appendTo('head');\n  } catch (e) {\n    throw new Error('Error appending JSON LD for Audio Schema');\n  }\n};\nvar createAudioSchema = function createAudioSchema() {\n  try {\n    $kp.GS.AudioWidgets.forEach(function (widgetData) {\n      var api = widgetData.widget.api;\n      api.init(function () {\n        api.get('kulus', function (kulus) {\n          kulus.forEach(function (kulu) {\n            return widgetData.transcript ? appendJsonLd(kulu, widgetData.transcript) : appendJsonLd(kulu);\n          });\n        });\n      });\n    });\n  } catch (e) {\n    throw new Error('Error initializing widget / widget api for Audio Schema');\n  }\n};\n\n\n//# sourceURL=webpack:///./app/components/audio-player/audio-player-schema.js?");

/***/ }),

/***/ "./app/components/audio-player/audio-player.js":
/*!*****************************************************!*\
  !*** ./app/components/audio-player/audio-player.js ***!
  \*****************************************************/
/*! exports provided: onLoadAudioPlayer, loadAudioPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onLoadAudioPlayer\", function() { return onLoadAudioPlayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadAudioPlayer\", function() { return loadAudioPlayer; });\nwindow.$kp = window.$kp || {};\nvar $kp = window.$kp;\n$kp.GS = $kp.GS || {};\n$kp.GS.AudioWidgets = [];\nfunction loadAudioPlayer(id, enableShare) {\n  var divId = '#' + id;\n  var playerID = $(divId).attr('data-playerid');\n  var playerIDSelector = '#' + $(divId).attr('data-playeridselector');\n  var disableDownload = $(divId).attr('data-disabledownload') === \"true\";\n  var width = \"auto\";\n  var customWidth = $(divId).attr('data-width');\n  if (customWidth !== '' && customWidth !== undefined && $(window).width() > customWidth) {\n    width = customWidth;\n    $(playerIDSelector).parent().width(width);\n  }\n  var height = $(divId).attr('data-height');\n  if (height === '' || height === undefined) {\n    height = \"auto\";\n  }\n  var thumbnailWidth = $(divId).attr('data-thumbnailwidth');\n  if (thumbnailWidth === '' || thumbnailWidth === undefined) {\n    thumbnailWidth = \"1\";\n  }\n  var thumbnailHeight = $(divId).attr('data-thumbnailheight');\n  if (thumbnailHeight === '' || thumbnailHeight === undefined) {\n    thumbnailHeight = \"1\";\n  }\n  var sortType = $(divId).attr('data-sorttype');\n  var widget = KV.widget({\n    \"hideShareButton\": !enableShare,\n    \"shareButtons\": ['email', 'facebook', 'twitter', 'linkedin'],\n    \"selector\": playerIDSelector,\n    \"guid\": playerID,\n    \"type\": \"playlist\",\n    \"playerType\": \"full\",\n    \"hideDownloadButton\": disableDownload,\n    \"sort\": [{\n      field: '454',\n      direction: sortType\n    }],\n    \"player\": {\n      \"maxWidth\": thumbnailWidth,\n      \"maxHeight\": thumbnailHeight\n    },\n    \"width\": width,\n    \"height\": height,\n    \"hideEmbedButton\": !enableShare\n  });\n  var transcript = $(\"#\".concat(id)).next('div.audio-footer').children('a');\n  var widgetData = transcript.length ? {\n    widget: widget,\n    transcript: \"https://\".concat(window.location.hostname).concat(transcript.attr('href'))\n  } : {\n    widget: widget\n  };\n  $kp.GS.AudioWidgets.push(widgetData);\n}\nfunction onLoadAudioPlayer() {\n  $('.audioPlayerData').each(function () {\n    loadAudioPlayer($(this).attr(\"id\"), $(this).data('enableShare'));\n  });\n}\n\n\n//# sourceURL=webpack:///./app/components/audio-player/audio-player.js?");

/***/ }),

/***/ "./app/components/audio-player/audio-player.scss":
/*!*******************************************************!*\
  !*** ./app/components/audio-player/audio-player.scss ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/audio-player/audio-player.scss?");

/***/ }),

/***/ "./app/components/audio-player/index.js":
/*!**********************************************!*\
  !*** ./app/components/audio-player/index.js ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio-player */ \"./app/components/audio-player/audio-player.js\");\n/* harmony import */ var _audio_player_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio-player-schema */ \"./app/components/audio-player/audio-player-schema.js\");\n\n\n$(function () {\n  Object(_audio_player__WEBPACK_IMPORTED_MODULE_0__[\"onLoadAudioPlayer\"])();\n  Object(_audio_player_schema__WEBPACK_IMPORTED_MODULE_1__[\"createAudioSchema\"])();\n  $('a.skipAudioPlayer').on('click keypress', function (e) {\n    if (e.type === 'click' || e.which === 13) {\n      var playerId = $(this).data('playerid');\n      $(\"span.skipped-\".concat(playerId)).focus();\n    }\n  });\n});\n\n//# sourceURL=webpack:///./app/components/audio-player/index.js?");

/***/ }),

/***/ 41:
/*!****************************************************************************************************!*\
  !*** multi ./app/components/audio-player/index.js ./app/components/audio-player/audio-player.scss ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/audio-player/index.js */\"./app/components/audio-player/index.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/audio-player/audio-player.scss */\"./app/components/audio-player/audio-player.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/audio-player/index.js_./app/components/audio-player/audio-player.scss?");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = moment;\n\n//# sourceURL=webpack:///external_%22moment%22?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 42);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/back-link/back-link.js":
/*!***********************************************!*\
  !*** ./app/components/back-link/back-link.js ***!
  \***********************************************/
/*! exports provided: initBackLinkProp, removeBackLinkProp, initBackLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initBackLinkProp\", function() { return initBackLinkProp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeBackLinkProp\", function() { return removeBackLinkProp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initBackLink\", function() { return initBackLink; });\nvar LINK_ID = 'previousPageVALUE';\n// updating the url for the back-link if the authored link and previous page link is not same\n// updating back-link text to the title of the page it will be redirecting to if link text is not authored\n// if the previous page is sign on then we are using the authored link and we are not updating the authored link\n\n//GSC-18373,19050\nvar getPrevPageUrl = function getPrevPageUrl() {\n  try {\n    var prevUrl = null;\n    var myChartDOM = document.querySelector('#header #graphicHeader #header_logo_by_epic');\n    if (document.referrer.indexOf('mychartma') > -1 && myChartDOM) {\n      var myChart = jsonConfigs.global.myChartBackLink.filter(function (chart) {\n        return document.referrer.toLowerCase().indexOf(chart.key.toLowerCase()) > -1;\n      });\n      prevUrl = {\n        title: myChart.length > 0 ? myChart[0].value : 'back',\n        url: document.referrer\n      };\n    } else {\n      prevUrl = document.querySelector('header.kp-header') ? $kp.GS.PageHistory.previous : {\n        title: 'Back',\n        url: document.referrer\n      };\n    }\n    return prevUrl;\n  } catch (_unused) {\n    console.log('Issue with getPrevPageUrl');\n  }\n};\nvar updateDynamicLink = function updateDynamicLink(link) {\n  var previousPage = getPrevPageUrl();\n  if (previousPage && previousPage.url.indexOf('sign-on') === -1) {\n    link.classList.add('demo-icon', 'icon-chevron-back');\n    var backLinkParams = JSON.parse(sessionStorage.getItem(\"backLinkProps\"));\n    if (backLinkParams) {\n      link.href = backLinkParams.url;\n      link.innerText = backLinkParams.title;\n    } else {\n      link.href = previousPage.url;\n      link.innerText = previousPage.title;\n    }\n    link.dataset.analyticsClick = \"back:\".concat(link.innerText);\n    var label = /.*?\\:/.exec(link.getAttribute('aria-label'));\n    link.setAttribute('aria-label', label ? \"\".concat(label[0]).concat(link.innerText) : link.innerText);\n  }\n};\nvar updateStaticLink = function updateStaticLink(link) {\n  link.dataset.analyticsClick = \"back:\".concat(link.innerText);\n  if (link.href === '#' || link.href.indexOf(location.pathname) > -1) {\n    var backLinkObj = getPrevPageUrl();\n    link.href = backLinkObj.url || '#';\n  }\n  if (link.innerText.toLowerCase() === 'back') {\n    link.removeAttribute('aria-label');\n  }\n};\nvar initBackLinkProp = function initBackLinkProp() {\n  var backLinkParams = JSON.parse(sessionStorage.getItem(\"backLinkProps\"));\n  if (backLinkParams) {\n    var previousPage = getPrevPageUrl();\n    if (previousPage && previousPage.url && previousPage.url.indexOf(location.pathname) == -1) {\n      setBackLinkParams();\n    }\n  } else {\n    setBackLinkParams();\n  }\n};\nvar setBackLinkParams = function setBackLinkParams() {\n  var previousPage = getPrevPageUrl();\n  if (previousPage) {\n    var backLinkVal = {\n      title: previousPage.title,\n      url: previousPage.url\n    };\n    sessionStorage.setItem(\"backLinkProps\", JSON.stringify(backLinkVal));\n  }\n};\nvar removeBackLinkProp = function removeBackLinkProp() {\n  sessionStorage.removeItem(\"backLinkProps\");\n};\nvar initBackLink = function initBackLink() {\n  var link = document.getElementById(LINK_ID);\n  if (!link) {\n    return;\n  }\n  var linkType = link.dataset.dynamicToggle;\n  if (linkType === 'dynamic') {\n    updateDynamicLink(link);\n  } else if (linkType === 'static') {\n    updateStaticLink(link);\n  }\n  link.addEventListener('click', function (e) {\n    sessionStorage.removeItem(\"backLinkProps\");\n  });\n};\n\n\n//# sourceURL=webpack:///./app/components/back-link/back-link.js?");

/***/ }),

/***/ "./app/components/back-link/back-link.scss":
/*!*************************************************!*\
  !*** ./app/components/back-link/back-link.scss ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/back-link/back-link.scss?");

/***/ }),

/***/ "./app/components/back-link/index.js":
/*!*******************************************!*\
  !*** ./app/components/back-link/index.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _back_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./back-link */ \"./app/components/back-link/back-link.js\");\n\nAPF.on('pageready', _back_link__WEBPACK_IMPORTED_MODULE_0__[\"initBackLink\"]);\n\n//# sourceURL=webpack:///./app/components/back-link/index.js?");

/***/ }),

/***/ 42:
/*!*******************************************************************************************!*\
  !*** multi ./app/components/back-link/index.js ./app/components/back-link/back-link.scss ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/back-link/index.js */\"./app/components/back-link/index.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/back-link/back-link.scss */\"./app/components/back-link/back-link.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/back-link/index.js_./app/components/back-link/back-link.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 43);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/button/button.js":
/*!*****************************************!*\
  !*** ./app/components/button/button.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("$(function () {\n  $(document).on('click', '.button.js', function () {\n    var $buttonURL = $(this).attr(\"data-url\"); //---------------------- Getting URL from button.\n\n    var $buttonTarget = $(this).attr(\"data-target\"); //----------- New window or same window\n\n    window.open($buttonURL, $buttonTarget, \"toolbar=0,location=0,menubar=0\");\n  });\n});\n\n//# sourceURL=webpack:///./app/components/button/button.js?");

/***/ }),

/***/ "./app/components/button/button.scss":
/*!*******************************************!*\
  !*** ./app/components/button/button.scss ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/button/button.scss?");

/***/ }),

/***/ 43:
/*!***********************************************************************************!*\
  !*** multi ./app/components/button/button.js ./app/components/button/button.scss ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/button/button.js */\"./app/components/button/button.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/button/button.scss */\"./app/components/button/button.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/button/button.js_./app/components/button/button.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 46);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/geolocation-search/cities.js":
/*!*****************************************************!*\
  !*** ./app/components/geolocation-search/cities.js ***!
  \*****************************************************/
/*! exports provided: USCITIES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"USCITIES\", function() { return USCITIES; });\nvar USCITIES = [{\n  \"CABOROJO\": \"Cabo Rojo\"\n}, {\n  \"SABANAGRANDE\": \"Sabana Grande\"\n}, {\n  \"LASMARIAS\": \"Las Marias\"\n}, {\n  \"SANGERMAN\": \"San German\"\n}, {\n  \"SANSEBASTIAN\": \"San Sebastian\"\n}, {\n  \"SABANAHOYOS\": \"Sabana Hoyos\"\n}, {\n  \"SANANTONIO\": \"San Antonio\"\n}, {\n  \"VEGAALTA\": \"Vega Alta\"\n}, {\n  \"VEGABAJA\": \"Vega Baja\"\n}, {\n  \"AGUASBUENAS\": \"Aguas Buenas\"\n}, {\n  \"PUERTOREAL\": \"Puerto Real\"\n}, {\n  \"PUNTASANTIAGO\": \"Punta Santiago\"\n}, {\n  \"ROOSEVELTROADS\": \"Roosevelt Roads\"\n}, {\n  \"RIOBLANCO\": \"Rio Blanco\"\n}, {\n  \"RIOGRANDE\": \"Rio Grande\"\n}, {\n  \"SANLORENZO\": \"San Lorenzo\"\n}, {\n  \"SANTAISABEL\": \"Santa Isabel\"\n}, {\n  \"LASPIEDRAS\": \"Las Piedras\"\n}, {\n  \"COTOLAUREL\": \"Coto Laurel\"\n}, {\n  \"LAPLATA\": \"La Plata\"\n}, {\n  \"JUANADIAZ\": \"Juana Diaz\"\n}, {\n  \"STTHOMAS\": \"St Thomas\"\n}, {\n  \"STJOHN\": \"St John\"\n}, {\n  \"SANJUAN\": \"San Juan\"\n}, {\n  \"FORTBUCHANAN\": \"Fort Buchanan\"\n}, {\n  \"TOABAJA\": \"Toa Baja\"\n}, {\n  \"SABANASECA\": \"Sabana Seca\"\n}, {\n  \"TOAALTA\": \"Toa Alta\"\n}, {\n  \"TRUJILLOALTO\": \"Trujillo Alto\"\n}, {\n  \"SAINTJUSTCONTRACT\": \"Saint Just Contract\"\n}, {\n  \"EASTLONGMEADOW\": \"East Longmeadow\"\n}, {\n  \"EASTOTIS\": \"East Otis\"\n}, {\n  \"FEEDINGHILLS\": \"Feeding Hills\"\n}, {\n  \"NORTHAMHERST\": \"North Amherst\"\n}, {\n  \"NORTHHATFIELD\": \"North Hatfield\"\n}, {\n  \"SOUTHBARRE\": \"South Barre\"\n}, {\n  \"SOUTHHADLEY\": \"South Hadley\"\n}, {\n  \"THREERIVERS\": \"Three Rivers\"\n}, {\n  \"WESTCHESTERFIELD\": \"West Chesterfield\"\n}, {\n  \"WESTHATFIELD\": \"West Hatfield\"\n}, {\n  \"WESTSPRINGFIELD\": \"West Springfield\"\n}, {\n  \"WESTWARREN\": \"West Warren\"\n}, {\n  \"INDIANORCHARD\": \"Indian Orchard\"\n}, {\n  \"ASHLEYFALLS\": \"Ashley Falls\"\n}, {\n  \"GREATBARRINGTON\": \"Great Barrington\"\n}, {\n  \"LENOXDALE\": \"Lenox Dale\"\n}, {\n  \"MILLRIVER\": \"Mill River\"\n}, {\n  \"NORTHADAMS\": \"North Adams\"\n}, {\n  \"NORTHEGREMONT\": \"North Egremont\"\n}, {\n  \"SOUTHEGREMONT\": \"South Egremont\"\n}, {\n  \"SOUTHLEE\": \"South Lee\"\n}, {\n  \"WESTSTOCKBRIDGE\": \"West Stockbridge\"\n}, {\n  \"LAKEPLEASANT\": \"Lake Pleasant\"\n}, {\n  \"TURNERSFALLS\": \"Turners Falls\"\n}, {\n  \"MONROEBRIDGE\": \"Monroe Bridge\"\n}, {\n  \"NEWSALEM\": \"New Salem\"\n}, {\n  \"SHELBURNEFALLS\": \"Shelburne Falls\"\n}, {\n  \"SOUTHDEERFIELD\": \"South Deerfield\"\n}, {\n  \"WENDELLDEPOT\": \"Wendell Depot\"\n}, {\n  \"EASTTEMPLETON\": \"East Templeton\"\n}, {\n  \"STILLRIVER\": \"Still River\"\n}, {\n  \"WESTGROTON\": \"West Groton\"\n}, {\n  \"WESTTOWNSEND\": \"West Townsend\"\n}, {\n  \"WINCHENDONSPRINGS\": \"Winchendon Springs\"\n}, {\n  \"CHARLTONCITY\": \"Charlton City\"\n}, {\n  \"CHARLTONDEPOT\": \"Charlton Depot\"\n}, {\n  \"EASTBROOKFIELD\": \"East Brookfield\"\n}, {\n  \"EASTPRINCETON\": \"East Princeton\"\n}, {\n  \"NEWBRAINTREE\": \"New Braintree\"\n}, {\n  \"NORTHBROOKFIELD\": \"North Brookfield\"\n}, {\n  \"NORTHGRAFTON\": \"North Grafton\"\n}, {\n  \"NORTHOXFORD\": \"North Oxford\"\n}, {\n  \"NORTHUXBRIDGE\": \"North Uxbridge\"\n}, {\n  \"SOUTHGRAFTON\": \"South Grafton\"\n}, {\n  \"SOUTHLANCASTER\": \"South Lancaster\"\n}, {\n  \"WESTBOYLSTON\": \"West Boylston\"\n}, {\n  \"WESTBROOKFIELD\": \"West Brookfield\"\n}, {\n  \"WESTMILLBURY\": \"West Millbury\"\n}, {\n  \"CHERRYVALLEY\": \"Cherry Valley\"\n}, {\n  \"VILLAGEOFNAGOGWOODS\": \"Village Of Nagog Woods\"\n}, {\n  \"HANSCOMAFB\": \"Hanscom Afb\"\n}, {\n  \"NORTHANDOVER\": \"North Andover\"\n}, {\n  \"NORTHBILLERICA\": \"North Billerica\"\n}, {\n  \"NORTHCHELMSFORD\": \"North Chelmsford\"\n}, {\n  \"NORTHREADING\": \"North Reading\"\n}, {\n  \"NUTTINGLAKE\": \"Nutting Lake\"\n}, {\n  \"WESTBOXFORD\": \"West Boxford\"\n}, {\n  \"PRIDESCROSSING\": \"Prides Crossing\"\n}, {\n  \"SOUTHHAMILTON\": \"South Hamilton\"\n}, {\n  \"WESTNEWBURY\": \"West Newbury\"\n}, {\n  \"BRANTROCK\": \"Brant Rock\"\n}, {\n  \"EASTMANSFIELD\": \"East Mansfield\"\n}, {\n  \"EASTWALPOLE\": \"East Walpole\"\n}, {\n  \"GREENHARBOR\": \"Green Harbor\"\n}, {\n  \"MARSHFIELDHILLS\": \"Marshfield Hills\"\n}, {\n  \"NORTHMARSHFIELD\": \"North Marshfield\"\n}, {\n  \"NORTHSCITUATE\": \"North Scituate\"\n}, {\n  \"OCEANBLUFF\": \"Ocean Bluff\"\n}, {\n  \"SOUTHWALPOLE\": \"South Walpole\"\n}, {\n  \"JAMAICAPLAIN\": \"Jamaica Plain\"\n}, {\n  \"WESTROXBURY\": \"West Roxbury\"\n}, {\n  \"HYDEPARK\": \"Hyde Park\"\n}, {\n  \"WESTMEDFORD\": \"West Medford\"\n}, {\n  \"MILTONVILLAGE\": \"Milton Village\"\n}, {\n  \"EASTBOSTON\": \"East Boston\"\n}, {\n  \"EASTBRIDGEWATER\": \"East Bridgewater\"\n}, {\n  \"NORTHCARVER\": \"North Carver\"\n}, {\n  \"NORTHEASTON\": \"North Easton\"\n}, {\n  \"NORTHPEMBROKE\": \"North Pembroke\"\n}, {\n  \"SOUTHCARVER\": \"South Carver\"\n}, {\n  \"SOUTHEASTON\": \"South Easton\"\n}, {\n  \"WESTBRIDGEWATER\": \"West Bridgewater\"\n}, {\n  \"WHITEHORSEBEACH\": \"White Horse Beach\"\n}, {\n  \"BROOKLINEVILLAGE\": \"Brookline Village\"\n}, {\n  \"NORTHWALTHAM\": \"North Waltham\"\n}, {\n  \"NEWTOWN\": \"New Town\"\n}, {\n  \"BABSONPARK\": \"Babson Park\"\n}, {\n  \"NEWTONCENTER\": \"Newton Center\"\n}, {\n  \"NEWTONHIGHLANDS\": \"Newton Highlands\"\n}, {\n  \"NEWTONLOWERFALLS\": \"Newton Lower Falls\"\n}, {\n  \"NEWTONUPPERFALLS\": \"Newton Upper Falls\"\n}, {\n  \"WESTNEWTON\": \"West Newton\"\n}, {\n  \"CHESTNUTHILL\": \"Chestnut Hill\"\n}, {\n  \"ARLINGTONHEIGHTS\": \"Arlington Heights\"\n}, {\n  \"WELLESLEYHILLS\": \"Wellesley Hills\"\n}, {\n  \"NEEDHAMHEIGHTS\": \"Needham Heights\"\n}, {\n  \"BUZZARDSBAY\": \"Buzzards Bay\"\n}, {\n  \"EASTFALMOUTH\": \"East Falmouth\"\n}, {\n  \"EASTSANDWICH\": \"East Sandwich\"\n}, {\n  \"EASTWAREHAM\": \"East Wareham\"\n}, {\n  \"WOODSHOLE\": \"Woods Hole\"\n}, {\n  \"MONUMENTBEACH\": \"Monument Beach\"\n}, {\n  \"NORTHFALMOUTH\": \"North Falmouth\"\n}, {\n  \"OAKBLUFFS\": \"Oak Bluffs\"\n}, {\n  \"SAGAMOREBEACH\": \"Sagamore Beach\"\n}, {\n  \"SILVERBEACH\": \"Silver Beach\"\n}, {\n  \"VINEYARDHAVEN\": \"Vineyard Haven\"\n}, {\n  \"WESTCHOP\": \"West Chop\"\n}, {\n  \"WESTFALMOUTH\": \"West Falmouth\"\n}, {\n  \"WESTTISBURY\": \"West Tisbury\"\n}, {\n  \"WESTWAREHAM\": \"West Wareham\"\n}, {\n  \"DENNISPORT\": \"Dennis Port\"\n}, {\n  \"EASTDENNIS\": \"East Dennis\"\n}, {\n  \"EASTORLEANS\": \"East Orleans\"\n}, {\n  \"HARWICHPORT\": \"Harwich Port\"\n}, {\n  \"HYANNISPORT\": \"Hyannis Port\"\n}, {\n  \"MARSTONSMILLS\": \"Marstons Mills\"\n}, {\n  \"NORTHCHATHAM\": \"North Chatham\"\n}, {\n  \"NORTHEASTHAM\": \"North Eastham\"\n}, {\n  \"NORTHTRURO\": \"North Truro\"\n}, {\n  \"SOUTHCHATHAM\": \"South Chatham\"\n}, {\n  \"SOUTHDENNIS\": \"South Dennis\"\n}, {\n  \"SOUTHHARWICH\": \"South Harwich\"\n}, {\n  \"SOUTHORLEANS\": \"South Orleans\"\n}, {\n  \"SOUTHWELLFLEET\": \"South Wellfleet\"\n}, {\n  \"SOUTHYARMOUTH\": \"South Yarmouth\"\n}, {\n  \"WESTBARNSTABLE\": \"West Barnstable\"\n}, {\n  \"WESTCHATHAM\": \"West Chatham\"\n}, {\n  \"WESTDENNIS\": \"West Dennis\"\n}, {\n  \"WESTHARWICH\": \"West Harwich\"\n}, {\n  \"WESTHYANNISPORT\": \"West Hyannisport\"\n}, {\n  \"WESTYARMOUTH\": \"West Yarmouth\"\n}, {\n  \"YARMOUTHPORT\": \"Yarmouth Port\"\n}, {\n  \"EASTFREETOWN\": \"East Freetown\"\n}, {\n  \"EASTTAUNTON\": \"East Taunton\"\n}, {\n  \"FALLRIVER\": \"Fall River\"\n}, {\n  \"NEWBEDFORD\": \"New Bedford\"\n}, {\n  \"NORTHDARTMOUTH\": \"North Dartmouth\"\n}, {\n  \"SOUTHDARTMOUTH\": \"South Dartmouth\"\n}, {\n  \"NORTHATTLEBORO\": \"North Attleboro\"\n}, {\n  \"ATTLEBOROFALLS\": \"Attleboro Falls\"\n}, {\n  \"NORTHDIGHTON\": \"North Dighton\"\n}, {\n  \"RAYNHAMCENTER\": \"Raynham Center\"\n}, {\n  \"WESTPORTPOINT\": \"Westport Point\"\n}, {\n  \"BLOCKISLAND\": \"Block Island\"\n}, {\n  \"WESTGREENWICH\": \"West Greenwich\"\n}, {\n  \"EASTGREENWICH\": \"East Greenwich\"\n}, {\n  \"HOPEVALLEY\": \"Hope Valley\"\n}, {\n  \"LITTLECOMPTON\": \"Little Compton\"\n}, {\n  \"NORTHKINGSTOWN\": \"North Kingstown\"\n}, {\n  \"CENTRALFALLS\": \"Central Falls\"\n}, {\n  \"PRUDENCEISLAND\": \"Prudence Island\"\n}, {\n  \"PEACEDALE\": \"Peace Dale\"\n}, {\n  \"WESTKINGSTON\": \"West Kingston\"\n}, {\n  \"WESTWARWICK\": \"West Warwick\"\n}, {\n  \"WOODRIVERJUNCTION\": \"Wood River Junction\"\n}, {\n  \"NORTHSMITHFIELD\": \"North Smithfield\"\n}, {\n  \"NORTHPROVIDENCE\": \"North Providence\"\n}, {\n  \"EASTPROVIDENCE\": \"East Providence\"\n}, {\n  \"EASTCANDIA\": \"East Candia\"\n}, {\n  \"EASTDERRY\": \"East Derry\"\n}, {\n  \"MONTVERNON\": \"Mont Vernon\"\n}, {\n  \"NEWBOSTON\": \"New Boston\"\n}, {\n  \"NEWIPSWICH\": \"New Ipswich\"\n}, {\n  \"NORTHSALEM\": \"North Salem\"\n}, {\n  \"WATERVILLEVALLEY\": \"Waterville Valley\"\n}, {\n  \"CENTERBARNSTEAD\": \"Center Barnstead\"\n}, {\n  \"CENTERHARBOR\": \"Center Harbor\"\n}, {\n  \"CENTERSANDWICH\": \"Center Sandwich\"\n}, {\n  \"EASTANDOVER\": \"East Andover\"\n}, {\n  \"EASTHEBRON\": \"East Hebron\"\n}, {\n  \"NEWHAMPTON\": \"New Hampton\"\n}, {\n  \"NEWLONDON\": \"New London\"\n}, {\n  \"NORTHSANDWICH\": \"North Sandwich\"\n}, {\n  \"NORTHSUTTON\": \"North Sutton\"\n}, {\n  \"NORTHWOODSTOCK\": \"North Woodstock\"\n}, {\n  \"SOUTHNEWBURY\": \"South Newbury\"\n}, {\n  \"SOUTHSUTTON\": \"South Sutton\"\n}, {\n  \"STINSONLAKE\": \"Stinson Lake\"\n}, {\n  \"WESTNOTTINGHAM\": \"West Nottingham\"\n}, {\n  \"WESTPETERBOROUGH\": \"West Peterborough\"\n}, {\n  \"WESTSWANZEY\": \"West Swanzey\"\n}, {\n  \"BRETTONWOODS\": \"Bretton Woods\"\n}, {\n  \"MOUNTWASHINGTON\": \"Mount Washington\"\n}, {\n  \"NORTHSTRATFORD\": \"North Stratford\"\n}, {\n  \"TWINMOUNTAIN\": \"Twin Mountain\"\n}, {\n  \"WESTSTEWARTSTOWN\": \"West Stewartstown\"\n}, {\n  \"SOUTHACWORTH\": \"South Acworth\"\n}, {\n  \"NORTHWALPOLE\": \"North Walpole\"\n}, {\n  \"CORNISHFLAT\": \"Cornish Flat\"\n}, {\n  \"ENFIELDCENTER\": \"Enfield Center\"\n}, {\n  \"GEORGESMILLS\": \"Georges Mills\"\n}, {\n  \"LYMECENTER\": \"Lyme Center\"\n}, {\n  \"NORTHHAVERHILL\": \"North Haverhill\"\n}, {\n  \"WESTLEBANON\": \"West Lebanon\"\n}, {\n  \"ALTONBAY\": \"Alton Bay\"\n}, {\n  \"CENTERCONWAY\": \"Center Conway\"\n}, {\n  \"CENTEROSSIPEE\": \"Center Ossipee\"\n}, {\n  \"CENTERSTRAFFORD\": \"Center Strafford\"\n}, {\n  \"CENTERTUFTONBORO\": \"Center Tuftonboro\"\n}, {\n  \"EASTHAMPSTEAD\": \"East Hampstead\"\n}, {\n  \"EASTKINGSTON\": \"East Kingston\"\n}, {\n  \"EASTWAKEFIELD\": \"East Wakefield\"\n}, {\n  \"EATONCENTER\": \"Eaton Center\"\n}, {\n  \"GILMANTONIRONWORKS\": \"Gilmanton Iron Works\"\n}, {\n  \"HAMPTONFALLS\": \"Hampton Falls\"\n}, {\n  \"MELVINVILLAGE\": \"Melvin Village\"\n}, {\n  \"MILTONMILLS\": \"Milton Mills\"\n}, {\n  \"MIRRORLAKE\": \"Mirror Lake\"\n}, {\n  \"NEWCASTLE\": \"New Castle\"\n}, {\n  \"NEWDURHAM\": \"New Durham\"\n}, {\n  \"NEWTONJUNCTION\": \"Newton Junction\"\n}, {\n  \"NORTHCONWAY\": \"North Conway\"\n}, {\n  \"NORTHHAMPTON\": \"North Hampton\"\n}, {\n  \"RYEBEACH\": \"Rye Beach\"\n}, {\n  \"SILVERLAKE\": \"Silver Lake\"\n}, {\n  \"SOUTHTAMWORTH\": \"South Tamworth\"\n}, {\n  \"WESTOSSIPEE\": \"West Ossipee\"\n}, {\n  \"WOLFEBOROFALLS\": \"Wolfeboro Falls\"\n}, {\n  \"CAPENEDDICK\": \"Cape Neddick\"\n}, {\n  \"KITTERYPOINT\": \"Kittery Point\"\n}, {\n  \"NORTHBERWICK\": \"North Berwick\"\n}, {\n  \"SOUTHBERWICK\": \"South Berwick\"\n}, {\n  \"YORKBEACH\": \"York Beach\"\n}, {\n  \"YORKHARBOR\": \"York Harbor\"\n}, {\n  \"BAILEYISLAND\": \"Bailey Island\"\n}, {\n  \"BARMILLS\": \"Bar Mills\"\n}, {\n  \"BIDDEFORDPOOL\": \"Biddeford Pool\"\n}, {\n  \"BUSTINSISLAND\": \"Bustins Island\"\n}, {\n  \"CAPEPORPOISE\": \"Cape Porpoise\"\n}, {\n  \"CENTERLOVELL\": \"Center Lovell\"\n}, {\n  \"CHEBEAGUEISLAND\": \"Chebeague Island\"\n}, {\n  \"CLIFFISLAND\": \"Cliff Island\"\n}, {\n  \"CUMBERLANDCENTER\": \"Cumberland Center\"\n}, {\n  \"EASTBALDWIN\": \"East Baldwin\"\n}, {\n  \"EASTPARSONFIELD\": \"East Parsonfield\"\n}, {\n  \"EASTWATERBORO\": \"East Waterboro\"\n}, {\n  \"HOLLISCENTER\": \"Hollis Center\"\n}, {\n  \"LONGISLAND\": \"Long Island\"\n}, {\n  \"NORTHBRIDGTON\": \"North Bridgton\"\n}, {\n  \"NORTHWATERBORO\": \"North Waterboro\"\n}, {\n  \"OCEANPARK\": \"Ocean Park\"\n}, {\n  \"OLDORCHARDBEACH\": \"Old Orchard Beach\"\n}, {\n  \"ORRSISLAND\": \"Orrs Island\"\n}, {\n  \"SEBAGOLAKE\": \"Sebago Lake\"\n}, {\n  \"SOUTHCASCO\": \"South Casco\"\n}, {\n  \"SOUTHFREEPORT\": \"South Freeport\"\n}, {\n  \"SOUTHWATERFORD\": \"South Waterford\"\n}, {\n  \"SOUTHWINDHAM\": \"South Windham\"\n}, {\n  \"STEEPFALLS\": \"Steep Falls\"\n}, {\n  \"WESTBALDWIN\": \"West Baldwin\"\n}, {\n  \"WESTKENNEBUNK\": \"West Kennebunk\"\n}, {\n  \"WESTNEWFIELD\": \"West Newfield\"\n}, {\n  \"NORTHYARMOUTH\": \"North Yarmouth\"\n}, {\n  \"SOUTHPORTLAND\": \"South Portland\"\n}, {\n  \"CAPEELIZABETH\": \"Cape Elizabeth\"\n}, {\n  \"PEAKSISLAND\": \"Peaks Island\"\n}, {\n  \"CUMBERLANDFORESIDE\": \"Cumberland Foreside\"\n}, {\n  \"BRYANTPOND\": \"Bryant Pond\"\n}, {\n  \"EASTDIXFIELD\": \"East Dixfield\"\n}, {\n  \"EASTLIVERMORE\": \"East Livermore\"\n}, {\n  \"EASTPOLAND\": \"East Poland\"\n}, {\n  \"EASTWILTON\": \"East Wilton\"\n}, {\n  \"LISBONFALLS\": \"Lisbon Falls\"\n}, {\n  \"LIVERMOREFALLS\": \"Livermore Falls\"\n}, {\n  \"MECHANICFALLS\": \"Mechanic Falls\"\n}, {\n  \"NEWGLOUCESTER\": \"New Gloucester\"\n}, {\n  \"NORTHJAY\": \"North Jay\"\n}, {\n  \"NORTHMONMOUTH\": \"North Monmouth\"\n}, {\n  \"NORTHTURNER\": \"North Turner\"\n}, {\n  \"NORTHWATERFORD\": \"North Waterford\"\n}, {\n  \"RUMFORDCENTER\": \"Rumford Center\"\n}, {\n  \"SOUTHPARIS\": \"South Paris\"\n}, {\n  \"TURNERCENTER\": \"Turner Center\"\n}, {\n  \"WESTBETHEL\": \"West Bethel\"\n}, {\n  \"WESTMINOT\": \"West Minot\"\n}, {\n  \"WESTPARIS\": \"West Paris\"\n}, {\n  \"WESTPOLAND\": \"West Poland\"\n}, {\n  \"COOPERSMILLS\": \"Coopers Mills\"\n}, {\n  \"EASTWINTHROP\": \"East Winthrop\"\n}, {\n  \"KENTSHILL\": \"Kents Hill\"\n}, {\n  \"MOUNTVERNON\": \"Mount Vernon\"\n}, {\n  \"SOUTHCHINA\": \"South China\"\n}, {\n  \"SOUTHGARDINER\": \"South Gardiner\"\n}, {\n  \"BROWNVILLEJUNCTION\": \"Brownville Junction\"\n}, {\n  \"DOVERFOXCROFT\": \"Dover Foxcroft\"\n}, {\n  \"EASTMILLINOCKET\": \"East Millinocket\"\n}, {\n  \"EASTORLAND\": \"East Orland\"\n}, {\n  \"GREENVILLEJUNCTION\": \"Greenville Junction\"\n}, {\n  \"LAMBERTLAKE\": \"Lambert Lake\"\n}, {\n  \"OLDTOWN\": \"Old Town\"\n}, {\n  \"SHIRLEYMILLS\": \"Shirley Mills\"\n}, {\n  \"WESTENFIELD\": \"West Enfield\"\n}, {\n  \"BOOTHBAYHARBOR\": \"Boothbay Harbor\"\n}, {\n  \"EASTBOOTHBAY\": \"East Boothbay\"\n}, {\n  \"ISLEOFSPRINGS\": \"Isle Of Springs\"\n}, {\n  \"NEWHARBOR\": \"New Harbor\"\n}, {\n  \"ROUNDPOND\": \"Round Pond\"\n}, {\n  \"SEBASCOESTATES\": \"Sebasco Estates\"\n}, {\n  \"SMALLPOINT\": \"Small Point\"\n}, {\n  \"SOUTHBRISTOL\": \"South Bristol\"\n}, {\n  \"SQUIRRELISLAND\": \"Squirrel Island\"\n}, {\n  \"WESTBOOTHBAYHARBOR\": \"West Boothbay Harbor\"\n}, {\n  \"BARHARBOR\": \"Bar Harbor\"\n}, {\n  \"BIRCHHARBOR\": \"Birch Harbor\"\n}, {\n  \"BLUEHILL\": \"Blue Hill\"\n}, {\n  \"BLUEHILLFALLS\": \"Blue Hill Falls\"\n}, {\n  \"COLUMBIAFALLS\": \"Columbia Falls\"\n}, {\n  \"CRANBERRYISLES\": \"Cranberry Isles\"\n}, {\n  \"DEERISLE\": \"Deer Isle\"\n}, {\n  \"EASTBLUEHILL\": \"East Blue Hill\"\n}, {\n  \"EASTMACHIAS\": \"East Machias\"\n}, {\n  \"GRANDLAKESTREAM\": \"Grand Lake Stream\"\n}, {\n  \"HULLSCOVE\": \"Hulls Cove\"\n}, {\n  \"ISLEAUHAUT\": \"Isle Au Haut\"\n}, {\n  \"LITTLEDEERISLE\": \"Little Deer Isle\"\n}, {\n  \"BASSHARBOR\": \"Bass Harbor\"\n}, {\n  \"MOUNTDESERT\": \"Mount Desert\"\n}, {\n  \"NORTHEASTHARBOR\": \"Northeast Harbor\"\n}, {\n  \"OTTERCREEK\": \"Otter Creek\"\n}, {\n  \"PROSPECTHARBOR\": \"Prospect Harbor\"\n}, {\n  \"SALSBURYCOVE\": \"Salsbury Cove\"\n}, {\n  \"SEALCOVE\": \"Seal Cove\"\n}, {\n  \"SEALHARBOR\": \"Seal Harbor\"\n}, {\n  \"SOUTHWESTHARBOR\": \"Southwest Harbor\"\n}, {\n  \"SWANSISLAND\": \"Swans Island\"\n}, {\n  \"WESTTREMONT\": \"West Tremont\"\n}, {\n  \"WINTERHARBOR\": \"Winter Harbor\"\n}, {\n  \"CLAYTONLAKE\": \"Clayton Lake\"\n}, {\n  \"EAGLELAKE\": \"Eagle Lake\"\n}, {\n  \"ESTCOURTSTATION\": \"Estcourt Station\"\n}, {\n  \"FORTFAIRFIELD\": \"Fort Fairfield\"\n}, {\n  \"FORTKENT\": \"Fort Kent\"\n}, {\n  \"FORTKENTMILLS\": \"Fort Kent Mills\"\n}, {\n  \"GRANDISLE\": \"Grand Isle\"\n}, {\n  \"ISLANDFALLS\": \"Island Falls\"\n}, {\n  \"MARSHILL\": \"Mars Hill\"\n}, {\n  \"NEWLIMERICK\": \"New Limerick\"\n}, {\n  \"NEWSWEDEN\": \"New Sweden\"\n}, {\n  \"PRESQUEISLE\": \"Presque Isle\"\n}, {\n  \"SAINTAGATHA\": \"Saint Agatha\"\n}, {\n  \"SAINTDAVID\": \"Saint David\"\n}, {\n  \"SAINTFRANCIS\": \"Saint Francis\"\n}, {\n  \"SHERMANMILLS\": \"Sherman Mills\"\n}, {\n  \"SHERMANSTATION\": \"Sherman Station\"\n}, {\n  \"SMYRNAMILLS\": \"Smyrna Mills\"\n}, {\n  \"VANBUREN\": \"Van Buren\"\n}, {\n  \"GLENCOVE\": \"Glen Cove\"\n}, {\n  \"LINCOLNVILLECENTER\": \"Lincolnville Center\"\n}, {\n  \"NORTHHAVEN\": \"North Haven\"\n}, {\n  \"OWLSHEAD\": \"Owls Head\"\n}, {\n  \"PORTCLYDE\": \"Port Clyde\"\n}, {\n  \"SAINTGEORGE\": \"Saint George\"\n}, {\n  \"SOUTHTHOMASTON\": \"South Thomaston\"\n}, {\n  \"SPRUCEHEAD\": \"Spruce Head\"\n}, {\n  \"TENANTSHARBOR\": \"Tenants Harbor\"\n}, {\n  \"WESTROCKPORT\": \"West Rockport\"\n}, {\n  \"BELGRADELAKES\": \"Belgrade Lakes\"\n}, {\n  \"CHINAVILLAGE\": \"China Village\"\n}, {\n  \"EASTNEWPORT\": \"East Newport\"\n}, {\n  \"EASTVASSALBORO\": \"East Vassalboro\"\n}, {\n  \"FARMINGTONFALLS\": \"Farmington Falls\"\n}, {\n  \"NEWPORTLAND\": \"New Portland\"\n}, {\n  \"NEWSHARON\": \"New Sharon\"\n}, {\n  \"NEWVINEYARD\": \"New Vineyard\"\n}, {\n  \"NORTHANSON\": \"North Anson\"\n}, {\n  \"NORTHNEWPORTLAND\": \"North New Portland\"\n}, {\n  \"NORTHVASSALBORO\": \"North Vassalboro\"\n}, {\n  \"SAINTALBANS\": \"Saint Albans\"\n}, {\n  \"SANDYPOINT\": \"Sandy Point\"\n}, {\n  \"STOCKTONSPRINGS\": \"Stockton Springs\"\n}, {\n  \"WESTFORKS\": \"West Forks\"\n}, {\n  \"WESTFARMINGTON\": \"West Farmington\"\n}, {\n  \"WHITERIVERJUNCTION\": \"White River Junction\"\n}, {\n  \"BRIDGEWATERCORNERS\": \"Bridgewater Corners\"\n}, {\n  \"EASTCORINTH\": \"East Corinth\"\n}, {\n  \"EASTRANDOLPH\": \"East Randolph\"\n}, {\n  \"EASTRYEGATE\": \"East Ryegate\"\n}, {\n  \"EASTTHETFORD\": \"East Thetford\"\n}, {\n  \"HARTLANDFOURCORNERS\": \"Hartland Four Corners\"\n}, {\n  \"MCINDOEFALLS\": \"Mc Indoe Falls\"\n}, {\n  \"NORTHHARTLAND\": \"North Hartland\"\n}, {\n  \"NORTHPOMFRET\": \"North Pomfret\"\n}, {\n  \"NORTHTHETFORD\": \"North Thetford\"\n}, {\n  \"POSTMILLS\": \"Post Mills\"\n}, {\n  \"RANDOLPHCENTER\": \"Randolph Center\"\n}, {\n  \"SOUTHPOMFRET\": \"South Pomfret\"\n}, {\n  \"SOUTHROYALTON\": \"South Royalton\"\n}, {\n  \"SOUTHRYEGATE\": \"South Ryegate\"\n}, {\n  \"SOUTHSTRAFFORD\": \"South Strafford\"\n}, {\n  \"SOUTHWOODSTOCK\": \"South Woodstock\"\n}, {\n  \"THETFORDCENTER\": \"Thetford Center\"\n}, {\n  \"WELLSRIVER\": \"Wells River\"\n}, {\n  \"WESTFAIRLEE\": \"West Fairlee\"\n}, {\n  \"WESTHARTFORD\": \"West Hartford\"\n}, {\n  \"WESTTOPSHAM\": \"West Topsham\"\n}, {\n  \"BELLOWSFALLS\": \"Bellows Falls\"\n}, {\n  \"CHESTERDEPOT\": \"Chester Depot\"\n}, {\n  \"NORTHSPRINGFIELD\": \"North Springfield\"\n}, {\n  \"SAXTONSRIVER\": \"Saxtons River\"\n}, {\n  \"SOUTHLONDONDERRY\": \"South Londonderry\"\n}, {\n  \"WESTMINSTERSTATION\": \"Westminster Station\"\n}, {\n  \"EASTARLINGTON\": \"East Arlington\"\n}, {\n  \"EASTDORSET\": \"East Dorset\"\n}, {\n  \"MANCHESTERCENTER\": \"Manchester Center\"\n}, {\n  \"NORTHBENNINGTON\": \"North Bennington\"\n}, {\n  \"NORTHPOWNAL\": \"North Pownal\"\n}, {\n  \"EASTDOVER\": \"East Dover\"\n}, {\n  \"SOUTHNEWFANE\": \"South Newfane\"\n}, {\n  \"WESTDOVER\": \"West Dover\"\n}, {\n  \"WESTDUMMERSTON\": \"West Dummerston\"\n}, {\n  \"WESTHALIFAX\": \"West Halifax\"\n}, {\n  \"WESTTOWNSHEND\": \"West Townshend\"\n}, {\n  \"WESTWARDSBORO\": \"West Wardsboro\"\n}, {\n  \"SOUTHBURLINGTON\": \"South Burlington\"\n}, {\n  \"BELVIDERECENTER\": \"Belvidere Center\"\n}, {\n  \"EASTBERKSHIRE\": \"East Berkshire\"\n}, {\n  \"EASTFAIRFIELD\": \"East Fairfield\"\n}, {\n  \"ENOSBURGFALLS\": \"Enosburg Falls\"\n}, {\n  \"ESSEXJUNCTION\": \"Essex Junction\"\n}, {\n  \"HIGHGATECENTER\": \"Highgate Center\"\n}, {\n  \"HIGHGATESPRINGS\": \"Highgate Springs\"\n}, {\n  \"ISLELAMOTTE\": \"Isle La Motte\"\n}, {\n  \"MONTGOMERYCENTER\": \"Montgomery Center\"\n}, {\n  \"NEWHAVEN\": \"New Haven\"\n}, {\n  \"NORTHFERRISBURG\": \"North Ferrisburg\"\n}, {\n  \"NORTHHERO\": \"North Hero\"\n}, {\n  \"SAINTALBANSBAY\": \"Saint Albans Bay\"\n}, {\n  \"SHELDONSPRINGS\": \"Sheldon Springs\"\n}, {\n  \"SOUTHHERO\": \"South Hero\"\n}, {\n  \"UNDERHILLCENTER\": \"Underhill Center\"\n}, {\n  \"EASTBARRE\": \"East Barre\"\n}, {\n  \"EASTCALAIS\": \"East Calais\"\n}, {\n  \"EASTMONTPELIER\": \"East Montpelier\"\n}, {\n  \"EDENMILLS\": \"Eden Mills\"\n}, {\n  \"LAKEELMORE\": \"Lake Elmore\"\n}, {\n  \"NORTHFIELDFALLS\": \"Northfield Falls\"\n}, {\n  \"NORTHHYDEPARK\": \"North Hyde Park\"\n}, {\n  \"NORTHMONTPELIER\": \"North Montpelier\"\n}, {\n  \"WATERBURYCENTER\": \"Waterbury Center\"\n}, {\n  \"CENTERRUTLAND\": \"Center Rutland\"\n}, {\n  \"EASTMIDDLEBURY\": \"East Middlebury\"\n}, {\n  \"EASTPOULTNEY\": \"East Poultney\"\n}, {\n  \"EASTWALLINGFORD\": \"East Wallingford\"\n}, {\n  \"FAIRHAVEN\": \"Fair Haven\"\n}, {\n  \"FORESTDALE\": \"Forest Dale\"\n}, {\n  \"MIDDLETOWNSPRINGS\": \"Middletown Springs\"\n}, {\n  \"MOUNTHOLLY\": \"Mount Holly\"\n}, {\n  \"NORTHCLARENDON\": \"North Clarendon\"\n}, {\n  \"WESTPAWLET\": \"West Pawlet\"\n}, {\n  \"WESTRUPERT\": \"West Rupert\"\n}, {\n  \"WESTRUTLAND\": \"West Rutland\"\n}, {\n  \"SAINTJOHNSBURY\": \"Saint Johnsbury\"\n}, {\n  \"BEEBEPLAIN\": \"Beebe Plain\"\n}, {\n  \"CRAFTSBURYCOMMON\": \"Craftsbury Common\"\n}, {\n  \"DERBYLINE\": \"Derby Line\"\n}, {\n  \"EASTBURKE\": \"East Burke\"\n}, {\n  \"EASTCHARLESTON\": \"East Charleston\"\n}, {\n  \"EASTHARDWICK\": \"East Hardwick\"\n}, {\n  \"EASTHAVEN\": \"East Haven\"\n}, {\n  \"EASTSAINTJOHNSBURY\": \"East Saint Johnsbury\"\n}, {\n  \"GREENSBOROBEND\": \"Greensboro Bend\"\n}, {\n  \"ISLANDPOND\": \"Island Pond\"\n}, {\n  \"LOWERWATERFORD\": \"Lower Waterford\"\n}, {\n  \"LYNDONCENTER\": \"Lyndon Center\"\n}, {\n  \"NEWPORTCENTER\": \"Newport Center\"\n}, {\n  \"NORTHCONCORD\": \"North Concord\"\n}, {\n  \"NORTHTROY\": \"North Troy\"\n}, {\n  \"SAINTJOHNSBURYCENTER\": \"Saint Johnsbury Center\"\n}, {\n  \"WESTBURKE\": \"West Burke\"\n}, {\n  \"WESTCHARLESTON\": \"West Charleston\"\n}, {\n  \"WESTDANVILLE\": \"West Danville\"\n}, {\n  \"WESTGLOVER\": \"West Glover\"\n}, {\n  \"BEECHERFALLS\": \"Beecher Falls\"\n}, {\n  \"BROADBROOK\": \"Broad Brook\"\n}, {\n  \"CANTONCENTER\": \"Canton Center\"\n}, {\n  \"EASTBERLIN\": \"East Berlin\"\n}, {\n  \"EASTCANAAN\": \"East Canaan\"\n}, {\n  \"EASTGLASTONBURY\": \"East Glastonbury\"\n}, {\n  \"EASTGRANBY\": \"East Granby\"\n}, {\n  \"EASTHARTLAND\": \"East Hartland\"\n}, {\n  \"EASTWINDSORHILL\": \"East Windsor Hill\"\n}, {\n  \"FALLSVILLAGE\": \"Falls Village\"\n}, {\n  \"NEWBRITAIN\": \"New Britain\"\n}, {\n  \"NEWHARTFORD\": \"New Hartford\"\n}, {\n  \"NORTHCANTON\": \"North Canton\"\n}, {\n  \"NORTHGRANBY\": \"North Granby\"\n}, {\n  \"PINEMEADOW\": \"Pine Meadow\"\n}, {\n  \"VERNONROCKVILLE\": \"Vernon Rockville\"\n}, {\n  \"ROCKYHILL\": \"Rocky Hill\"\n}, {\n  \"SOUTHGLASTONBURY\": \"South Glastonbury\"\n}, {\n  \"SOUTHWINDSOR\": \"South Windsor\"\n}, {\n  \"STAFFORDSPRINGS\": \"Stafford Springs\"\n}, {\n  \"EASTWINDSOR\": \"East Windsor\"\n}, {\n  \"WESTGRANBY\": \"West Granby\"\n}, {\n  \"WESTHARTLAND\": \"West Hartland\"\n}, {\n  \"WESTSIMSBURY\": \"West Simsbury\"\n}, {\n  \"WESTSUFFIELD\": \"West Suffield\"\n}, {\n  \"WINCHESTERCENTER\": \"Winchester Center\"\n}, {\n  \"WINDSORLOCKS\": \"Windsor Locks\"\n}, {\n  \"WHARTFORD\": \"W Hartford\"\n}, {\n  \"EASTHARTFORD\": \"East Hartford\"\n}, {\n  \"EASTKILLINGLY\": \"East Killingly\"\n}, {\n  \"EASTWOODSTOCK\": \"East Woodstock\"\n}, {\n  \"GROSVENORDALE\": \"Grosvenor Dale\"\n}, {\n  \"MANSFIELDCENTER\": \"Mansfield Center\"\n}, {\n  \"MANSFIELDDEPOT\": \"Mansfield Depot\"\n}, {\n  \"NORTHFRANKLIN\": \"North Franklin\"\n}, {\n  \"NORTHGROSVENORDALE\": \"North Grosvenordale\"\n}, {\n  \"NORTHWINDHAM\": \"North Windham\"\n}, {\n  \"POMFRETCENTER\": \"Pomfret Center\"\n}, {\n  \"SOUTHWILLINGTON\": \"South Willington\"\n}, {\n  \"STORRSMANSFIELD\": \"Storrs Mansfield\"\n}, {\n  \"WOODSTOCKVALLEY\": \"Woodstock Valley\"\n}, {\n  \"CENTRALVILLAGE\": \"Central Village\"\n}, {\n  \"EASTLYME\": \"East Lyme\"\n}, {\n  \"GALESFERRY\": \"Gales Ferry\"\n}, {\n  \"JEWETTCITY\": \"Jewett City\"\n}, {\n  \"NORTHSTONINGTON\": \"North Stonington\"\n}, {\n  \"OLDLYME\": \"Old Lyme\"\n}, {\n  \"OLDMYSTIC\": \"Old Mystic\"\n}, {\n  \"QUAKERHILL\": \"Quaker Hill\"\n}, {\n  \"SOUTHLYME\": \"South Lyme\"\n}, {\n  \"WESTMYSTIC\": \"West Mystic\"\n}, {\n  \"FISHERSISLAND\": \"Fishers Island\"\n}, {\n  \"BEACONFALLS\": \"Beacon Falls\"\n}, {\n  \"DEEPRIVER\": \"Deep River\"\n}, {\n  \"EASTHADDAM\": \"East Haddam\"\n}, {\n  \"EASTHAMPTON\": \"East Hampton\"\n}, {\n  \"GREENSFARMS\": \"Greens Farms\"\n}, {\n  \"MIDDLEHADDAM\": \"Middle Haddam\"\n}, {\n  \"NORTHBRANFORD\": \"North Branford\"\n}, {\n  \"NORTHWESTCHESTER\": \"North Westchester\"\n}, {\n  \"OLDSAYBROOK\": \"Old Saybrook\"\n}, {\n  \"SANDYHOOK\": \"Sandy Hook\"\n}, {\n  \"SOUTHBRITAIN\": \"South Britain\"\n}, {\n  \"WESTHAVEN\": \"West Haven\"\n}, {\n  \"CORNWALLBRIDGE\": \"Cornwall Bridge\"\n}, {\n  \"NEWMILFORD\": \"New Milford\"\n}, {\n  \"NEWPRESTONMARBLEDALE\": \"New Preston Marble Dale\"\n}, {\n  \"SOUTHKENT\": \"South Kent\"\n}, {\n  \"WASHINGTONDEPOT\": \"Washington Depot\"\n}, {\n  \"WESTCORNWALL\": \"West Cornwall\"\n}, {\n  \"COSCOB\": \"Cos Cob\"\n}, {\n  \"NEWFAIRFIELD\": \"New Fairfield\"\n}, {\n  \"NEWCANAAN\": \"New Canaan\"\n}, {\n  \"OLDGREENWICH\": \"Old Greenwich\"\n}, {\n  \"REDDINGCENTER\": \"Redding Center\"\n}, {\n  \"REDDINGRIDGE\": \"Redding Ridge\"\n}, {\n  \"CEDARGROVE\": \"Cedar Grove\"\n}, {\n  \"CLIFFSIDEPARK\": \"Cliffside Park\"\n}, {\n  \"EASTORANGE\": \"East Orange\"\n}, {\n  \"ESSEXFELLS\": \"Essex Fells\"\n}, {\n  \"FORTLEE\": \"Fort Lee\"\n}, {\n  \"GLENRIDGE\": \"Glen Ridge\"\n}, {\n  \"NORTHARLINGTON\": \"North Arlington\"\n}, {\n  \"LAKEHIAWATHA\": \"Lake Hiawatha\"\n}, {\n  \"LINCOLNPARK\": \"Lincoln Park\"\n}, {\n  \"MOUNTAINLAKES\": \"Mountain Lakes\"\n}, {\n  \"NORTHBERGEN\": \"North Bergen\"\n}, {\n  \"WESTORANGE\": \"West Orange\"\n}, {\n  \"PINEBROOK\": \"Pine Brook\"\n}, {\n  \"PORTREADING\": \"Port Reading\"\n}, {\n  \"EASTRUTHERFORD\": \"East Rutherford\"\n}, {\n  \"WOODRIDGE\": \"Wood Ridge\"\n}, {\n  \"SCOTCHPLAINS\": \"Scotch Plains\"\n}, {\n  \"SHORTHILLS\": \"Short Hills\"\n}, {\n  \"SOUTHORANGE\": \"South Orange\"\n}, {\n  \"SOUTHPLAINFIELD\": \"South Plainfield\"\n}, {\n  \"UNIONCITY\": \"Union City\"\n}, {\n  \"WESTNEWYORK\": \"West New York\"\n}, {\n  \"JERSEYCITY\": \"Jersey City\"\n}, {\n  \"ROSELLEPARK\": \"Roselle Park\"\n}, {\n  \"ELMWOODPARK\": \"Elmwood Park\"\n}, {\n  \"FAIRLAWN\": \"Fair Lawn\"\n}, {\n  \"FRANKLINLAKES\": \"Franklin Lakes\"\n}, {\n  \"HIGHLANDLAKES\": \"Highland Lakes\"\n}, {\n  \"HOHOKUS\": \"Ho Ho Kus\"\n}, {\n  \"LITTLEFALLS\": \"Little Falls\"\n}, {\n  \"MCAFEE\": \"Mc Afee\"\n}, {\n  \"MIDLANDPARK\": \"Midland Park\"\n}, {\n  \"OAKRIDGE\": \"Oak Ridge\"\n}, {\n  \"POMPTONLAKES\": \"Pompton Lakes\"\n}, {\n  \"POMPTONPLAINS\": \"Pompton Plains\"\n}, {\n  \"GLENROCK\": \"Glen Rock\"\n}, {\n  \"SADDLERIVER\": \"Saddle River\"\n}, {\n  \"WESTMILFORD\": \"West Milford\"\n}, {\n  \"HASBROUCKHEIGHTS\": \"Hasbrouck Heights\"\n}, {\n  \"SOUTHHACKENSACK\": \"South Hackensack\"\n}, {\n  \"ENGLEWOODCLIFFS\": \"Englewood Cliffs\"\n}, {\n  \"HARRINGTONPARK\": \"Harrington Park\"\n}, {\n  \"LITTLEFERRY\": \"Little Ferry\"\n}, {\n  \"PALISADESPARK\": \"Palisades Park\"\n}, {\n  \"PARKRIDGE\": \"Park Ridge\"\n}, {\n  \"RIDGEFIELDPARK\": \"Ridgefield Park\"\n}, {\n  \"RIVEREDGE\": \"River Edge\"\n}, {\n  \"ROCHELLEPARK\": \"Rochelle Park\"\n}, {\n  \"SADDLEBROOK\": \"Saddle Brook\"\n}, {\n  \"TOWNSHIPOFWASHINGTON\": \"Township Of Washington\"\n}, {\n  \"WOODCLIFFLAKE\": \"Woodcliff Lake\"\n}, {\n  \"REDBANK\": \"Red Bank\"\n}, {\n  \"FORTMONMOUTH\": \"Fort Monmouth\"\n}, {\n  \"ASBURYPARK\": \"Asbury Park\"\n}, {\n  \"ATLANTICHIGHLANDS\": \"Atlantic Highlands\"\n}, {\n  \"AVONBYTHESEA\": \"Avon By The Sea\"\n}, {\n  \"BRADLEYBEACH\": \"Bradley Beach\"\n}, {\n  \"COLTSNECK\": \"Colts Neck\"\n}, {\n  \"LITTLESILVER\": \"Little Silver\"\n}, {\n  \"LONGBRANCH\": \"Long Branch\"\n}, {\n  \"MONMOUTHBEACH\": \"Monmouth Beach\"\n}, {\n  \"OCEANGROVE\": \"Ocean Grove\"\n}, {\n  \"PORTMONMOUTH\": \"Port Monmouth\"\n}, {\n  \"SPRINGLAKE\": \"Spring Lake\"\n}, {\n  \"WESTLONGBRANCH\": \"West Long Branch\"\n}, {\n  \"MINEHILL\": \"Mine Hill\"\n}, {\n  \"PICATINNYARSENAL\": \"Picatinny Arsenal\"\n}, {\n  \"BUDDLAKE\": \"Budd Lake\"\n}, {\n  \"GREATMEADOWS\": \"Great Meadows\"\n}, {\n  \"LAKEHOPATCONG\": \"Lake Hopatcong\"\n}, {\n  \"LONGVALLEY\": \"Long Valley\"\n}, {\n  \"MOUNTARLINGTON\": \"Mount Arlington\"\n}, {\n  \"PORTMURRAY\": \"Port Murray\"\n}, {\n  \"SCHOOLEYSMOUNTAIN\": \"Schooleys Mountain\"\n}, {\n  \"MOUNTTABOR\": \"Mount Tabor\"\n}, {\n  \"WALLPACKCENTER\": \"Wallpack Center\"\n}, {\n  \"BASKINGRIDGE\": \"Basking Ridge\"\n}, {\n  \"BERKELEYHEIGHTS\": \"Berkeley Heights\"\n}, {\n  \"CEDARKNOLLS\": \"Cedar Knolls\"\n}, {\n  \"FARHILLS\": \"Far Hills\"\n}, {\n  \"FLORHAMPARK\": \"Florham Park\"\n}, {\n  \"GREENVILLAGE\": \"Green Village\"\n}, {\n  \"EASTHANOVER\": \"East Hanover\"\n}, {\n  \"LIBERTYCORNER\": \"Liberty Corner\"\n}, {\n  \"MORRISPLAINS\": \"Morris Plains\"\n}, {\n  \"MOUNTFREEDOM\": \"Mount Freedom\"\n}, {\n  \"NEWPROVIDENCE\": \"New Providence\"\n}, {\n  \"NEWVERNON\": \"New Vernon\"\n}, {\n  \"CHERRYHILL\": \"Cherry Hill\"\n}, {\n  \"BARNEGATLIGHT\": \"Barnegat Light\"\n}, {\n  \"BEACHHAVEN\": \"Beach Haven\"\n}, {\n  \"BROWNSMILLS\": \"Browns Mills\"\n}, {\n  \"CEDARBROOK\": \"Cedar Brook\"\n}, {\n  \"GLOUCESTERCITY\": \"Gloucester City\"\n}, {\n  \"HADDONHEIGHTS\": \"Haddon Heights\"\n}, {\n  \"HANCOCKSBRIDGE\": \"Hancocks Bridge\"\n}, {\n  \"MAPLESHADE\": \"Maple Shade\"\n}, {\n  \"MOUNTLAUREL\": \"Mount Laurel\"\n}, {\n  \"MOUNTEPHRAIM\": \"Mount Ephraim\"\n}, {\n  \"MOUNTROYAL\": \"Mount Royal\"\n}, {\n  \"MULLICAHILL\": \"Mullica Hill\"\n}, {\n  \"NATIONALPARK\": \"National Park\"\n}, {\n  \"NEWLISBON\": \"New Lisbon\"\n}, {\n  \"PENNSGROVE\": \"Penns Grove\"\n}, {\n  \"WATERFORDWORKS\": \"Waterford Works\"\n}, {\n  \"WESTBERLIN\": \"West Berlin\"\n}, {\n  \"WESTCREEK\": \"West Creek\"\n}, {\n  \"WOODBURYHEIGHTS\": \"Woodbury Heights\"\n}, {\n  \"CAPEMAY\": \"Cape May\"\n}, {\n  \"CAPEMAYCOURTHOUSE\": \"Cape May Court House\"\n}, {\n  \"CAPEMAYPOINT\": \"Cape May Point\"\n}, {\n  \"EGGHARBORCITY\": \"Egg Harbor City\"\n}, {\n  \"GREENCREEK\": \"Green Creek\"\n}, {\n  \"LEEDSPOINT\": \"Leeds Point\"\n}, {\n  \"NEWGRETNA\": \"New Gretna\"\n}, {\n  \"OCEANCITY\": \"Ocean City\"\n}, {\n  \"OCEANVIEW\": \"Ocean View\"\n}, {\n  \"EGGHARBORTOWNSHIP\": \"Egg Harbor Township\"\n}, {\n  \"PORTREPUBLIC\": \"Port Republic\"\n}, {\n  \"SEAISLECITY\": \"Sea Isle City\"\n}, {\n  \"SOMERSPOINT\": \"Somers Point\"\n}, {\n  \"SOUTHSEAVILLE\": \"South Seaville\"\n}, {\n  \"STONEHARBOR\": \"Stone Harbor\"\n}, {\n  \"DEERFIELDSTREET\": \"Deerfield Street\"\n}, {\n  \"DIVIDINGCREEK\": \"Dividing Creek\"\n}, {\n  \"ESTELLMANOR\": \"Estell Manor\"\n}, {\n  \"MAYSLANDING\": \"Mays Landing\"\n}, {\n  \"PORTELIZABETH\": \"Port Elizabeth\"\n}, {\n  \"PORTNORRIS\": \"Port Norris\"\n}, {\n  \"ATLANTICCITY\": \"Atlantic City\"\n}, {\n  \"MARGATECITY\": \"Margate City\"\n}, {\n  \"VENTNORCITY\": \"Ventnor City\"\n}, {\n  \"BELLEMEAD\": \"Belle Mead\"\n}, {\n  \"CREAMRIDGE\": \"Cream Ridge\"\n}, {\n  \"NEWEGYPT\": \"New Egypt\"\n}, {\n  \"PRINCETONJUNCTION\": \"Princeton Junction\"\n}, {\n  \"FORKEDRIVER\": \"Forked River\"\n}, {\n  \"ISLANDHEIGHTS\": \"Island Heights\"\n}, {\n  \"LANOKAHARBOR\": \"Lanoka Harbor\"\n}, {\n  \"NORMANDYBEACH\": \"Normandy Beach\"\n}, {\n  \"OCEANGATE\": \"Ocean Gate\"\n}, {\n  \"PINEBEACH\": \"Pine Beach\"\n}, {\n  \"POINTPLEASANTBEACH\": \"Point Pleasant Beach\"\n}, {\n  \"SEAGIRT\": \"Sea Girt\"\n}, {\n  \"SEASIDEHEIGHTS\": \"Seaside Heights\"\n}, {\n  \"SEASIDEPARK\": \"Seaside Park\"\n}, {\n  \"TOMSRIVER\": \"Toms River\"\n}, {\n  \"MANCHESTERTOWNSHIP\": \"Manchester Township\"\n}, {\n  \"BOUNDBROOK\": \"Bound Brook\"\n}, {\n  \"EASTBRUNSWICK\": \"East Brunswick\"\n}, {\n  \"FRANKLINPARK\": \"Franklin Park\"\n}, {\n  \"KENDALLPARK\": \"Kendall Park\"\n}, {\n  \"GLENGARDNER\": \"Glen Gardner\"\n}, {\n  \"HIGHBRIDGE\": \"High Bridge\"\n}, {\n  \"MONROETOWNSHIP\": \"Monroe Township\"\n}, {\n  \"LITTLEYORK\": \"Little York\"\n}, {\n  \"MONMOUTHJUNCTION\": \"Monmouth Junction\"\n}, {\n  \"NESHANICSTATION\": \"Neshanic Station\"\n}, {\n  \"OLDBRIDGE\": \"Old Bridge\"\n}, {\n  \"PERTHAMBOY\": \"Perth Amboy\"\n}, {\n  \"SOUTHRIVER\": \"South River\"\n}, {\n  \"SOUTHAMBOY\": \"South Amboy\"\n}, {\n  \"SOUTHBOUNDBROOK\": \"South Bound Brook\"\n}, {\n  \"THREEBRIDGES\": \"Three Bridges\"\n}, {\n  \"WHITEHOUSESTATION\": \"Whitehouse Station\"\n}, {\n  \"NEWBRUNSWICK\": \"New Brunswick\"\n}, {\n  \"NORTHBRUNSWICK\": \"North Brunswick\"\n}, {\n  \"HIGHLANDPARK\": \"Highland Park\"\n}, {\n  \"NEWYORK\": \"New York\"\n}, {\n  \"STATENISLAND\": \"Staten Island\"\n}, {\n  \"ARDSLEYONHUDSON\": \"Ardsley On Hudson\"\n}, {\n  \"BALDWINPLACE\": \"Baldwin Place\"\n}, {\n  \"BEDFORDHILLS\": \"Bedford Hills\"\n}, {\n  \"BRIARCLIFFMANOR\": \"Briarcliff Manor\"\n}, {\n  \"COLDSPRING\": \"Cold Spring\"\n}, {\n  \"CROSSRIVER\": \"Cross River\"\n}, {\n  \"CROTONFALLS\": \"Croton Falls\"\n}, {\n  \"CROTONONHUDSON\": \"Croton On Hudson\"\n}, {\n  \"DOBBSFERRY\": \"Dobbs Ferry\"\n}, {\n  \"GOLDENSBRIDGE\": \"Goldens Bridge\"\n}, {\n  \"GRANITESPRINGS\": \"Granite Springs\"\n}, {\n  \"JEFFERSONVALLEY\": \"Jefferson Valley\"\n}, {\n  \"LAKEPEEKSKILL\": \"Lake Peekskill\"\n}, {\n  \"MAHOPACFALLS\": \"Mahopac Falls\"\n}, {\n  \"MOHEGANLAKE\": \"Mohegan Lake\"\n}, {\n  \"MOUNTKISCO\": \"Mount Kisco\"\n}, {\n  \"CORTLANDTMANOR\": \"Cortlandt Manor\"\n}, {\n  \"PORTCHESTER\": \"Port Chester\"\n}, {\n  \"POUNDRIDGE\": \"Pound Ridge\"\n}, {\n  \"PUTNAMVALLEY\": \"Putnam Valley\"\n}, {\n  \"SHRUBOAK\": \"Shrub Oak\"\n}, {\n  \"SOUTHSALEM\": \"South Salem\"\n}, {\n  \"YORKTOWNHEIGHTS\": \"Yorktown Heights\"\n}, {\n  \"WHITEPLAINS\": \"White Plains\"\n}, {\n  \"WESTHARRISON\": \"West Harrison\"\n}, {\n  \"HASTINGSONHUDSON\": \"Hastings On Hudson\"\n}, {\n  \"NEWROCHELLE\": \"New Rochelle\"\n}, {\n  \"BEARMOUNTAIN\": \"Bear Mountain\"\n}, {\n  \"BLOOMINGGROVE\": \"Blooming Grove\"\n}, {\n  \"CAMPBELLHALL\": \"Campbell Hall\"\n}, {\n  \"CENTRALVALLEY\": \"Central Valley\"\n}, {\n  \"FORTMONTGOMERY\": \"Fort Montgomery\"\n}, {\n  \"GREENWOODLAKE\": \"Greenwood Lake\"\n}, {\n  \"HIGHLANDFALLS\": \"Highland Falls\"\n}, {\n  \"HIGHLANDMILLS\": \"Highland Mills\"\n}, {\n  \"NEWCITY\": \"New City\"\n}, {\n  \"PEARLRIVER\": \"Pearl River\"\n}, {\n  \"PINEISLAND\": \"Pine Island\"\n}, {\n  \"SLATEHILL\": \"Slate Hill\"\n}, {\n  \"SPRINGVALLEY\": \"Spring Valley\"\n}, {\n  \"STERLINGFOREST\": \"Sterling Forest\"\n}, {\n  \"STONYPOINT\": \"Stony Point\"\n}, {\n  \"SUGARLOAF\": \"Sugar Loaf\"\n}, {\n  \"THOMPSONRIDGE\": \"Thompson Ridge\"\n}, {\n  \"TOMKINSCOVE\": \"Tomkins Cove\"\n}, {\n  \"TUXEDOPARK\": \"Tuxedo Park\"\n}, {\n  \"VALLEYCOTTAGE\": \"Valley Cottage\"\n}, {\n  \"WESTHAVERSTRAW\": \"West Haverstraw\"\n}, {\n  \"WESTNYACK\": \"West Nyack\"\n}, {\n  \"WESTPOINT\": \"West Point\"\n}, {\n  \"FLORALPARK\": \"Floral Park\"\n}, {\n  \"GLENOAKS\": \"Glen Oaks\"\n}, {\n  \"FRANKLINSQUARE\": \"Franklin Square\"\n}, {\n  \"GREATNECK\": \"Great Neck\"\n}, {\n  \"NEWHYDEPARK\": \"New Hyde Park\"\n}, {\n  \"PORTWASHINGTON\": \"Port Washington\"\n}, {\n  \"LONGISLANDCITY\": \"Long Island City\"\n}, {\n  \"COLLEGEPOINT\": \"College Point\"\n}, {\n  \"LITTLENECK\": \"Little Neck\"\n}, {\n  \"OAKLANDGARDENS\": \"Oakland Gardens\"\n}, {\n  \"FRESHMEADOWS\": \"Fresh Meadows\"\n}, {\n  \"EASTELMHURST\": \"East Elmhurst\"\n}, {\n  \"JACKSONHEIGHTS\": \"Jackson Heights\"\n}, {\n  \"REGOPARK\": \"Rego Park\"\n}, {\n  \"FORESTHILLS\": \"Forest Hills\"\n}, {\n  \"MIDDLEVILLAGE\": \"Middle Village\"\n}, {\n  \"CAMBRIAHEIGHTS\": \"Cambria Heights\"\n}, {\n  \"SPRINGFIELDGARDENS\": \"Springfield Gardens\"\n}, {\n  \"HOWARDBEACH\": \"Howard Beach\"\n}, {\n  \"KEWGARDENS\": \"Kew Gardens\"\n}, {\n  \"OZONEPARK\": \"Ozone Park\"\n}, {\n  \"RICHMONDHILL\": \"Richmond Hill\"\n}, {\n  \"SOUTHRICHMONDHILL\": \"South Richmond Hill\"\n}, {\n  \"SOUTHOZONEPARK\": \"South Ozone Park\"\n}, {\n  \"QUEENSVILLAGE\": \"Queens Village\"\n}, {\n  \"ATLANTICBEACH\": \"Atlantic Beach\"\n}, {\n  \"CARLEPLACE\": \"Carle Place\"\n}, {\n  \"EASTROCKAWAY\": \"East Rockaway\"\n}, {\n  \"GARDENCITY\": \"Garden City\"\n}, {\n  \"GLENHEAD\": \"Glen Head\"\n}, {\n  \"GLENWOODLANDING\": \"Glenwood Landing\"\n}, {\n  \"WESTHEMPSTEAD\": \"West Hempstead\"\n}, {\n  \"EASTMEADOW\": \"East Meadow\"\n}, {\n  \"ISLANDPARK\": \"Island Park\"\n}, {\n  \"LOCUSTVALLEY\": \"Locust Valley\"\n}, {\n  \"LONGBEACH\": \"Long Beach\"\n}, {\n  \"OLDWESTBURY\": \"Old Westbury\"\n}, {\n  \"POINTLOOKOUT\": \"Point Lookout\"\n}, {\n  \"ROCKVILLECENTRE\": \"Rockville Centre\"\n}, {\n  \"ROSLYNHEIGHTS\": \"Roslyn Heights\"\n}, {\n  \"SEACLIFF\": \"Sea Cliff\"\n}, {\n  \"VALLEYSTREAM\": \"Valley Stream\"\n}, {\n  \"WILLISTONPARK\": \"Williston Park\"\n}, {\n  \"FARROCKAWAY\": \"Far Rockaway\"\n}, {\n  \"ROCKAWAYPARK\": \"Rockaway Park\"\n}, {\n  \"BREEZYPOINT\": \"Breezy Point\"\n}, {\n  \"NORTHBABYLON\": \"North Babylon\"\n}, {\n  \"WESTBABYLON\": \"West Babylon\"\n}, {\n  \"BAYSHORE\": \"Bay Shore\"\n}, {\n  \"BLUEPOINT\": \"Blue Point\"\n}, {\n  \"CENTRALISLIP\": \"Central Islip\"\n}, {\n  \"COLDSPRINGHARBOR\": \"Cold Spring Harbor\"\n}, {\n  \"DEERPARK\": \"Deer Park\"\n}, {\n  \"EASTISLIP\": \"East Islip\"\n}, {\n  \"EASTNORTHPORT\": \"East Northport\"\n}, {\n  \"EASTNORWICH\": \"East Norwich\"\n}, {\n  \"EASTSETAUKET\": \"East Setauket\"\n}, {\n  \"GREATRIVER\": \"Great River\"\n}, {\n  \"HUNTINGTONSTATION\": \"Huntington Station\"\n}, {\n  \"ISLIPTERRACE\": \"Islip Terrace\"\n}, {\n  \"KINGSPARK\": \"Kings Park\"\n}, {\n  \"LAKEGROVE\": \"Lake Grove\"\n}, {\n  \"MASSAPEQUAPARK\": \"Massapequa Park\"\n}, {\n  \"MILLERPLACE\": \"Miller Place\"\n}, {\n  \"MILLNECK\": \"Mill Neck\"\n}, {\n  \"MOUNTSINAI\": \"Mount Sinai\"\n}, {\n  \"OCEANBEACH\": \"Ocean Beach\"\n}, {\n  \"OYSTERBAY\": \"Oyster Bay\"\n}, {\n  \"PORTJEFFERSONSTATION\": \"Port Jefferson Station\"\n}, {\n  \"PORTJEFFERSON\": \"Port Jefferson\"\n}, {\n  \"ROCKYPOINT\": \"Rocky Point\"\n}, {\n  \"SAINTJAMES\": \"Saint James\"\n}, {\n  \"SOUNDBEACH\": \"Sound Beach\"\n}, {\n  \"STONYBROOK\": \"Stony Brook\"\n}, {\n  \"WADINGRIVER\": \"Wading River\"\n}, {\n  \"WESTISLIP\": \"West Islip\"\n}, {\n  \"WESTSAYVILLE\": \"West Sayville\"\n}, {\n  \"OLDBETHPAGE\": \"Old Bethpage\"\n}, {\n  \"MIDISLAND\": \"Mid Island\"\n}, {\n  \"CENTERMORICHES\": \"Center Moriches\"\n}, {\n  \"EASTMARION\": \"East Marion\"\n}, {\n  \"EASTMORICHES\": \"East Moriches\"\n}, {\n  \"EASTQUOGUE\": \"East Quogue\"\n}, {\n  \"HAMPTONBAYS\": \"Hampton Bays\"\n}, {\n  \"MASTICBEACH\": \"Mastic Beach\"\n}, {\n  \"MIDDLEISLAND\": \"Middle Island\"\n}, {\n  \"NEWSUFFOLK\": \"New Suffolk\"\n}, {\n  \"SAGHARBOR\": \"Sag Harbor\"\n}, {\n  \"SHELTERISLAND\": \"Shelter Island\"\n}, {\n  \"SHELTERISLANDHEIGHTS\": \"Shelter Island Heights\"\n}, {\n  \"SOUTHJAMESPORT\": \"South Jamesport\"\n}, {\n  \"WATERMILL\": \"Water Mill\"\n}, {\n  \"WESTHAMPTONBEACH\": \"Westhampton Beach\"\n}, {\n  \"AVERILLPARK\": \"Averill Park\"\n}, {\n  \"BALLSTONLAKE\": \"Ballston Lake\"\n}, {\n  \"BALLSTONSPA\": \"Ballston Spa\"\n}, {\n  \"BURNTHILLS\": \"Burnt Hills\"\n}, {\n  \"CAROGALAKE\": \"Caroga Lake\"\n}, {\n  \"CASTLETONONHUDSON\": \"Castleton On Hudson\"\n}, {\n  \"CENTRALBRIDGE\": \"Central Bridge\"\n}, {\n  \"CHERRYPLAIN\": \"Cherry Plain\"\n}, {\n  \"COEYMANSHOLLOW\": \"Coeymans Hollow\"\n}, {\n  \"EAGLEBRIDGE\": \"Eagle Bridge\"\n}, {\n  \"EASTBERNE\": \"East Berne\"\n}, {\n  \"EASTCHATHAM\": \"East Chatham\"\n}, {\n  \"EASTGREENBUSH\": \"East Greenbush\"\n}, {\n  \"EASTNASSAU\": \"East Nassau\"\n}, {\n  \"EASTSCHODACK\": \"East Schodack\"\n}, {\n  \"EASTWORCESTER\": \"East Worcester\"\n}, {\n  \"CLIFTONPARK\": \"Clifton Park\"\n}, {\n  \"FEURABUSH\": \"Feura Bush\"\n}, {\n  \"FORTHUNTER\": \"Fort Hunter\"\n}, {\n  \"FORTJOHNSON\": \"Fort Johnson\"\n}, {\n  \"GUILDERLANDCENTER\": \"Guilderland Center\"\n}, {\n  \"HOOSICKFALLS\": \"Hoosick Falls\"\n}, {\n  \"HOWESCAVE\": \"Howes Cave\"\n}, {\n  \"MALDENBRIDGE\": \"Malden Bridge\"\n}, {\n  \"NEWBALTIMORE\": \"New Baltimore\"\n}, {\n  \"NEWLEBANON\": \"New Lebanon\"\n}, {\n  \"NORTHBLENHEIM\": \"North Blenheim\"\n}, {\n  \"NORTHHOOSICK\": \"North Hoosick\"\n}, {\n  \"OLDCHATHAM\": \"Old Chatham\"\n}, {\n  \"QUAKERSTREET\": \"Quaker Street\"\n}, {\n  \"ROTTERDAMJUNCTION\": \"Rotterdam Junction\"\n}, {\n  \"ROUNDLAKE\": \"Round Lake\"\n}, {\n  \"SANDLAKE\": \"Sand Lake\"\n}, {\n  \"SCHODACKLANDING\": \"Schodack Landing\"\n}, {\n  \"SOUTHBETHLEHEM\": \"South Bethlehem\"\n}, {\n  \"STUYVESANTFALLS\": \"Stuyvesant Falls\"\n}, {\n  \"TRIBESHILL\": \"Tribes Hill\"\n}, {\n  \"VALLEYFALLS\": \"Valley Falls\"\n}, {\n  \"WESTCOXSACKIE\": \"West Coxsackie\"\n}, {\n  \"WESTFULTON\": \"West Fulton\"\n}, {\n  \"WESTSANDLAKE\": \"West Sand Lake\"\n}, {\n  \"BIGINDIAN\": \"Big Indian\"\n}, {\n  \"EASTDURHAM\": \"East Durham\"\n}, {\n  \"EASTJEWETT\": \"East Jewett\"\n}, {\n  \"ELKAPARK\": \"Elka Park\"\n}, {\n  \"GRANDGORGE\": \"Grand Gorge\"\n}, {\n  \"GREENFIELDPARK\": \"Greenfield Park\"\n}, {\n  \"HAINESFALLS\": \"Haines Falls\"\n}, {\n  \"HIGHFALLS\": \"High Falls\"\n}, {\n  \"LAKEHILL\": \"Lake Hill\"\n}, {\n  \"LAKEKATRINE\": \"Lake Katrine\"\n}, {\n  \"MALDENONHUDSON\": \"Malden On Hudson\"\n}, {\n  \"MOUNTMARION\": \"Mount Marion\"\n}, {\n  \"MOUNTTREMPER\": \"Mount Tremper\"\n}, {\n  \"NEWKINGSTON\": \"New Kingston\"\n}, {\n  \"OAKHILL\": \"Oak Hill\"\n}, {\n  \"PINEHILL\": \"Pine Hill\"\n}, {\n  \"PORTEWEN\": \"Port Ewen\"\n}, {\n  \"PRESTONHOLLOW\": \"Preston Hollow\"\n}, {\n  \"ROUNDTOP\": \"Round Top\"\n}, {\n  \"SOUTHCAIRO\": \"South Cairo\"\n}, {\n  \"SPRINGGLEN\": \"Spring Glen\"\n}, {\n  \"STONERIDGE\": \"Stone Ridge\"\n}, {\n  \"ULSTERPARK\": \"Ulster Park\"\n}, {\n  \"WESTCAMP\": \"West Camp\"\n}, {\n  \"WESTHURLEY\": \"West Hurley\"\n}, {\n  \"WESTKILL\": \"West Kill\"\n}, {\n  \"WESTPARK\": \"West Park\"\n}, {\n  \"WESTSHOKAN\": \"West Shokan\"\n}, {\n  \"ANNANDALEONHUDSON\": \"Annandale On Hudson\"\n}, {\n  \"CASTLEPOINT\": \"Castle Point\"\n}, {\n  \"CLINTONCORNERS\": \"Clinton Corners\"\n}, {\n  \"COPAKEFALLS\": \"Copake Falls\"\n}, {\n  \"CORNWALLONHUDSON\": \"Cornwall On Hudson\"\n}, {\n  \"DOVERPLAINS\": \"Dover Plains\"\n}, {\n  \"HOPEWELLJUNCTION\": \"Hopewell Junction\"\n}, {\n  \"NEWWINDSOR\": \"New Windsor\"\n}, {\n  \"MIDHUDSON\": \"Mid Hudson\"\n}, {\n  \"NEWPALTZ\": \"New Paltz\"\n}, {\n  \"PINEBUSH\": \"Pine Bush\"\n}, {\n  \"PINEPLAINS\": \"Pine Plains\"\n}, {\n  \"PLEASANTVALLEY\": \"Pleasant Valley\"\n}, {\n  \"REDHOOK\": \"Red Hook\"\n}, {\n  \"ROCKTAVERN\": \"Rock Tavern\"\n}, {\n  \"SALISBURYMILLS\": \"Salisbury Mills\"\n}, {\n  \"SALTPOINT\": \"Salt Point\"\n}, {\n  \"VAILSGATE\": \"Vails Gate\"\n}, {\n  \"WALKERVALLEY\": \"Walker Valley\"\n}, {\n  \"WAPPINGERSFALLS\": \"Wappingers Falls\"\n}, {\n  \"WESTCOPAKE\": \"West Copake\"\n}, {\n  \"CALLICOONCENTER\": \"Callicoon Center\"\n}, {\n  \"COCHECTONCENTER\": \"Cochecton Center\"\n}, {\n  \"FREMONTCENTER\": \"Fremont Center\"\n}, {\n  \"GLENSPEY\": \"Glen Spey\"\n}, {\n  \"GLENWILD\": \"Glen Wild\"\n}, {\n  \"HIGHLANDLAKE\": \"Highland Lake\"\n}, {\n  \"KAUNEONGALAKE\": \"Kauneonga Lake\"\n}, {\n  \"KENOZALAKE\": \"Kenoza Lake\"\n}, {\n  \"KIAMESHALAKE\": \"Kiamesha Lake\"\n}, {\n  \"LAKEHUNTINGTON\": \"Lake Huntington\"\n}, {\n  \"LIVINGSTONMANOR\": \"Livingston Manor\"\n}, {\n  \"LOCHSHELDRAKE\": \"Loch Sheldrake\"\n}, {\n  \"LONGEDDY\": \"Long Eddy\"\n}, {\n  \"MONGAUPVALLEY\": \"Mongaup Valley\"\n}, {\n  \"MOUNTAINDALE\": \"Mountain Dale\"\n}, {\n  \"NORTHBRANCH\": \"North Branch\"\n}, {\n  \"PONDEDDY\": \"Pond Eddy\"\n}, {\n  \"PORTJERVIS\": \"Port Jervis\"\n}, {\n  \"ROCKHILL\": \"Rock Hill\"\n}, {\n  \"SOUTHFALLSBURG\": \"South Fallsburg\"\n}, {\n  \"SPARROWBUSH\": \"Sparrow Bush\"\n}, {\n  \"SWANLAKE\": \"Swan Lake\"\n}, {\n  \"WHITELAKE\": \"White Lake\"\n}, {\n  \"WHITESULPHURSPRINGS\": \"White Sulphur Springs\"\n}, {\n  \"GLENSFALLS\": \"Glens Falls\"\n}, {\n  \"SOUTHGLENSFALLS\": \"South Glens Falls\"\n}, {\n  \"BAKERSMILLS\": \"Bakers Mills\"\n}, {\n  \"BLUEMOUNTAINLAKE\": \"Blue Mountain Lake\"\n}, {\n  \"BOLTONLANDING\": \"Bolton Landing\"\n}, {\n  \"BRANTLAKE\": \"Brant Lake\"\n}, {\n  \"DIAMONDPOINT\": \"Diamond Point\"\n}, {\n  \"FORTANN\": \"Fort Ann\"\n}, {\n  \"FORTEDWARD\": \"Fort Edward\"\n}, {\n  \"GREENFIELDCENTER\": \"Greenfield Center\"\n}, {\n  \"HUDSONFALLS\": \"Hudson Falls\"\n}, {\n  \"HULETTSLANDING\": \"Huletts Landing\"\n}, {\n  \"INDIANLAKE\": \"Indian Lake\"\n}, {\n  \"KATTSKILLBAY\": \"Kattskill Bay\"\n}, {\n  \"LAKEGEORGE\": \"Lake George\"\n}, {\n  \"LAKELUZERNE\": \"Lake Luzerne\"\n}, {\n  \"LONGLAKE\": \"Long Lake\"\n}, {\n  \"MIDDLEFALLS\": \"Middle Falls\"\n}, {\n  \"MIDDLEGRANVILLE\": \"Middle Granville\"\n}, {\n  \"MIDDLEGROVE\": \"Middle Grove\"\n}, {\n  \"NORTHCREEK\": \"North Creek\"\n}, {\n  \"NORTHGRANVILLE\": \"North Granville\"\n}, {\n  \"NORTHHUDSON\": \"North Hudson\"\n}, {\n  \"NORTHRIVER\": \"North River\"\n}, {\n  \"PORTERCORNERS\": \"Porter Corners\"\n}, {\n  \"PUTNAMSTATION\": \"Putnam Station\"\n}, {\n  \"ROCKCITYFALLS\": \"Rock City Falls\"\n}, {\n  \"SARATOGASPRINGS\": \"Saratoga Springs\"\n}, {\n  \"SCHROONLAKE\": \"Schroon Lake\"\n}, {\n  \"SILVERBAY\": \"Silver Bay\"\n}, {\n  \"STONYCREEK\": \"Stony Creek\"\n}, {\n  \"VICTORYMILLS\": \"Victory Mills\"\n}, {\n  \"AUSABLEFORKS\": \"Au Sable Forks\"\n}, {\n  \"CRANBERRYLAKE\": \"Cranberry Lake\"\n}, {\n  \"CROWNPOINT\": \"Crown Point\"\n}, {\n  \"DICKINSONCENTER\": \"Dickinson Center\"\n}, {\n  \"ELLENBURGCENTER\": \"Ellenburg Center\"\n}, {\n  \"ELLENBURGDEPOT\": \"Ellenburg Depot\"\n}, {\n  \"FORTCOVINGTON\": \"Fort Covington\"\n}, {\n  \"KEENEVALLEY\": \"Keene Valley\"\n}, {\n  \"LAKECLEAR\": \"Lake Clear\"\n}, {\n  \"LAKEPLACID\": \"Lake Placid\"\n}, {\n  \"LYONMOUNTAIN\": \"Lyon Mountain\"\n}, {\n  \"MOOERSFORKS\": \"Mooers Forks\"\n}, {\n  \"MORIAHCENTER\": \"Moriah Center\"\n}, {\n  \"NEWRUSSIA\": \"New Russia\"\n}, {\n  \"NORTHBANGOR\": \"North Bangor\"\n}, {\n  \"NORTHLAWRENCE\": \"North Lawrence\"\n}, {\n  \"PAULSMITHS\": \"Paul Smiths\"\n}, {\n  \"PORTHENRY\": \"Port Henry\"\n}, {\n  \"PORTKENT\": \"Port Kent\"\n}, {\n  \"RAINBOWLAKE\": \"Rainbow Lake\"\n}, {\n  \"RAYBROOK\": \"Ray Brook\"\n}, {\n  \"ROUSESPOINT\": \"Rouses Point\"\n}, {\n  \"SAINTREGISFALLS\": \"Saint Regis Falls\"\n}, {\n  \"SARANACLAKE\": \"Saranac Lake\"\n}, {\n  \"SCHUYLERFALLS\": \"Schuyler Falls\"\n}, {\n  \"TUPPERLAKE\": \"Tupper Lake\"\n}, {\n  \"UPPERJAY\": \"Upper Jay\"\n}, {\n  \"WESTCHAZY\": \"West Chazy\"\n}, {\n  \"APULIASTATION\": \"Apulia Station\"\n}, {\n  \"BERNHARDSBAY\": \"Bernhards Bay\"\n}, {\n  \"CENTRALSQUARE\": \"Central Square\"\n}, {\n  \"DELPHIFALLS\": \"Delphi Falls\"\n}, {\n  \"DERUYTER\": \"De Ruyter\"\n}, {\n  \"EASTHOMER\": \"East Homer\"\n}, {\n  \"EASTSYRACUSE\": \"East Syracuse\"\n}, {\n  \"KINGFERRY\": \"King Ferry\"\n}, {\n  \"LAFAYETTE\": \"La Fayette\"\n}, {\n  \"MCGRAW\": \"Mc Graw\"\n}, {\n  \"MCLEAN\": \"Mc Lean\"\n}, {\n  \"MAPLEVIEW\": \"Maple View\"\n}, {\n  \"NEWWOODSTOCK\": \"New Woodstock\"\n}, {\n  \"NORTHBAY\": \"North Bay\"\n}, {\n  \"NORTHPITCHER\": \"North Pitcher\"\n}, {\n  \"POPLARRIDGE\": \"Poplar Ridge\"\n}, {\n  \"PORTBYRON\": \"Port Byron\"\n}, {\n  \"REDCREEK\": \"Red Creek\"\n}, {\n  \"SANDYCREEK\": \"Sandy Creek\"\n}, {\n  \"SCIPIOCENTER\": \"Scipio Center\"\n}, {\n  \"SENECAFALLS\": \"Seneca Falls\"\n}, {\n  \"SKANEATELESFALLS\": \"Skaneateles Falls\"\n}, {\n  \"SOUTHBUTLER\": \"South Butler\"\n}, {\n  \"SOUTHOTSELIC\": \"South Otselic\"\n}, {\n  \"SYLVANBEACH\": \"Sylvan Beach\"\n}, {\n  \"UNIONSPRINGS\": \"Union Springs\"\n}, {\n  \"VERONABEACH\": \"Verona Beach\"\n}, {\n  \"WESTMONROE\": \"West Monroe\"\n}, {\n  \"ALDERCREEK\": \"Alder Creek\"\n}, {\n  \"BEAVERFALLS\": \"Beaver Falls\"\n}, {\n  \"BURLINGTONFLATS\": \"Burlington Flats\"\n}, {\n  \"CLARKMILLS\": \"Clark Mills\"\n}, {\n  \"COLDBROOK\": \"Cold Brook\"\n}, {\n  \"EAGLEBAY\": \"Eagle Bay\"\n}, {\n  \"EASTSPRINGFIELD\": \"East Springfield\"\n}, {\n  \"FLYCREEK\": \"Fly Creek\"\n}, {\n  \"FORTPLAIN\": \"Fort Plain\"\n}, {\n  \"FRANKLINSPRINGS\": \"Franklin Springs\"\n}, {\n  \"HOLLANDPATENT\": \"Holland Patent\"\n}, {\n  \"LEECENTER\": \"Lee Center\"\n}, {\n  \"LYONSFALLS\": \"Lyons Falls\"\n}, {\n  \"MCCONNELLSVILLE\": \"Mc Connellsville\"\n}, {\n  \"NEWBERLIN\": \"New Berlin\"\n}, {\n  \"NEWYORKMILLS\": \"New York Mills\"\n}, {\n  \"OLDFORGE\": \"Old Forge\"\n}, {\n  \"ORISKANYFALLS\": \"Oriskany Falls\"\n}, {\n  \"PALATINEBRIDGE\": \"Palatine Bridge\"\n}, {\n  \"PORTLEYDEN\": \"Port Leyden\"\n}, {\n  \"RAQUETTELAKE\": \"Raquette Lake\"\n}, {\n  \"RICHFIELDSPRINGS\": \"Richfield Springs\"\n}, {\n  \"SAINTJOHNSVILLE\": \"Saint Johnsville\"\n}, {\n  \"SALISBURYCENTER\": \"Salisbury Center\"\n}, {\n  \"SCHUYLERLAKE\": \"Schuyler Lake\"\n}, {\n  \"SHARONSPRINGS\": \"Sharon Springs\"\n}, {\n  \"SPRINGFIELDCENTER\": \"Springfield Center\"\n}, {\n  \"VANHORNESVILLE\": \"Van Hornesville\"\n}, {\n  \"VERNONCENTER\": \"Vernon Center\"\n}, {\n  \"WASHINGTONMILLS\": \"Washington Mills\"\n}, {\n  \"WESTBURLINGTON\": \"West Burlington\"\n}, {\n  \"WESTEATON\": \"West Eaton\"\n}, {\n  \"WESTEDMESTON\": \"West Edmeston\"\n}, {\n  \"WESTLEYDEN\": \"West Leyden\"\n}, {\n  \"WESTWINFIELD\": \"West Winfield\"\n}, {\n  \"FORTDRUM\": \"Fort Drum\"\n}, {\n  \"ADAMSCENTER\": \"Adams Center\"\n}, {\n  \"ALEXANDRIABAY\": \"Alexandria Bay\"\n}, {\n  \"BLACKRIVER\": \"Black River\"\n}, {\n  \"BRASHERFALLS\": \"Brasher Falls\"\n}, {\n  \"BRIERHILL\": \"Brier Hill\"\n}, {\n  \"CAPEVINCENT\": \"Cape Vincent\"\n}, {\n  \"CHASEMILLS\": \"Chase Mills\"\n}, {\n  \"CHIPPEWABAY\": \"Chippewa Bay\"\n}, {\n  \"DEERRIVER\": \"Deer River\"\n}, {\n  \"DEKALBJUNCTION\": \"De Kalb Junction\"\n}, {\n  \"DEPEYSTER\": \"De Peyster\"\n}, {\n  \"EVANSMILLS\": \"Evans Mills\"\n}, {\n  \"FELTSMILLS\": \"Felts Mills\"\n}, {\n  \"WELLESLEYISLAND\": \"Wellesley Island\"\n}, {\n  \"FISHERSLANDING\": \"Fishers Landing\"\n}, {\n  \"GREATBEND\": \"Great Bend\"\n}, {\n  \"HANNAWAFALLS\": \"Hannawa Falls\"\n}, {\n  \"HENDERSONHARBOR\": \"Henderson Harbor\"\n}, {\n  \"LAFARGEVILLE\": \"La Fargeville\"\n}, {\n  \"NATURALBRIDGE\": \"Natural Bridge\"\n}, {\n  \"NEWTONFALLS\": \"Newton Falls\"\n}, {\n  \"PIERREPONTMANOR\": \"Pierrepont Manor\"\n}, {\n  \"RENSSELAERFALLS\": \"Rensselaer Falls\"\n}, {\n  \"SACKETSHARBOR\": \"Sackets Harbor\"\n}, {\n  \"SOUTHCOLTON\": \"South Colton\"\n}, {\n  \"SOUTHRUTLAND\": \"South Rutland\"\n}, {\n  \"STARLAKE\": \"Star Lake\"\n}, {\n  \"THOUSANDISLANDPARK\": \"Thousand Island Park\"\n}, {\n  \"THREEMILEBAY\": \"Three Mile Bay\"\n}, {\n  \"WESTSTOCKHOLM\": \"West Stockholm\"\n}, {\n  \"BIBLESCHOOLPARK\": \"Bible School Park\"\n}, {\n  \"BLODGETTMILLS\": \"Blodgett Mills\"\n}, {\n  \"BOVINACENTER\": \"Bovina Center\"\n}, {\n  \"CASTLECREEK\": \"Castle Creek\"\n}, {\n  \"CHENANGOBRIDGE\": \"Chenango Bridge\"\n}, {\n  \"CHENANGOFORKS\": \"Chenango Forks\"\n}, {\n  \"DAVENPORTCENTER\": \"Davenport Center\"\n}, {\n  \"DELANCEY\": \"De Lancey\"\n}, {\n  \"EASTBRANCH\": \"East Branch\"\n}, {\n  \"EASTMEREDITH\": \"East Meredith\"\n}, {\n  \"EASTPHARSALIA\": \"East Pharsalia\"\n}, {\n  \"FISHSEDDY\": \"Fishs Eddy\"\n}, {\n  \"GLENAUBREY\": \"Glen Aubrey\"\n}, {\n  \"JOHNSONCITY\": \"Johnson City\"\n}, {\n  \"MCDONOUGH\": \"Mc Donough\"\n}, {\n  \"MOUNTUPTON\": \"Mount Upton\"\n}, {\n  \"MOUNTVISION\": \"Mount Vision\"\n}, {\n  \"NEWARKVALLEY\": \"Newark Valley\"\n}, {\n  \"NORTHNORWICH\": \"North Norwich\"\n}, {\n  \"PORTCRANE\": \"Port Crane\"\n}, {\n  \"SIDNEYCENTER\": \"Sidney Center\"\n}, {\n  \"SMITHVILLEFLATS\": \"Smithville Flats\"\n}, {\n  \"SOUTHKORTRIGHT\": \"South Kortright\"\n}, {\n  \"SOUTHNEWBERLIN\": \"South New Berlin\"\n}, {\n  \"SOUTHPLYMOUTH\": \"South Plymouth\"\n}, {\n  \"TIOGACENTER\": \"Tioga Center\"\n}, {\n  \"TROUTCREEK\": \"Trout Creek\"\n}, {\n  \"WELLSBRIDGE\": \"Wells Bridge\"\n}, {\n  \"WESTDAVENPORT\": \"West Davenport\"\n}, {\n  \"WESTONEONTA\": \"West Oneonta\"\n}, {\n  \"WHITNEYPOINT\": \"Whitney Point\"\n}, {\n  \"ATHOLSPRINGS\": \"Athol Springs\"\n}, {\n  \"CLARENCECENTER\": \"Clarence Center\"\n}, {\n  \"COLLINSCENTER\": \"Collins Center\"\n}, {\n  \"DARIENCENTER\": \"Darien Center\"\n}, {\n  \"EASTAMHERST\": \"East Amherst\"\n}, {\n  \"EASTAURORA\": \"East Aurora\"\n}, {\n  \"EASTBETHANY\": \"East Bethany\"\n}, {\n  \"EASTCONCORD\": \"East Concord\"\n}, {\n  \"EASTPEMBROKE\": \"East Pembroke\"\n}, {\n  \"FARMERSVILLESTATION\": \"Farmersville Station\"\n}, {\n  \"GRANDISLAND\": \"Grand Island\"\n}, {\n  \"JAVACENTER\": \"Java Center\"\n}, {\n  \"JAVAVILLAGE\": \"Java Village\"\n}, {\n  \"LAKEVIEW\": \"Lake View\"\n}, {\n  \"MODELCITY\": \"Model City\"\n}, {\n  \"NIAGARAUNIVERSITY\": \"Niagara University\"\n}, {\n  \"NORTHBOSTON\": \"North Boston\"\n}, {\n  \"NORTHCOLLINS\": \"North Collins\"\n}, {\n  \"NORTHEVANS\": \"North Evans\"\n}, {\n  \"NORTHJAVA\": \"North Java\"\n}, {\n  \"NORTHTONAWANDA\": \"North Tonawanda\"\n}, {\n  \"ORCHARDPARK\": \"Orchard Park\"\n}, {\n  \"SILVERCREEK\": \"Silver Creek\"\n}, {\n  \"SOUTHDAYTON\": \"South Dayton\"\n}, {\n  \"SOUTHWALES\": \"South Wales\"\n}, {\n  \"SPRINGBROOK\": \"Spring Brook\"\n}, {\n  \"STELLANIAGARA\": \"Stella Niagara\"\n}, {\n  \"VANBURENPOINT\": \"Van Buren Point\"\n}, {\n  \"WALESCENTER\": \"Wales Center\"\n}, {\n  \"WESTFALLS\": \"West Falls\"\n}, {\n  \"WESTVALLEY\": \"West Valley\"\n}, {\n  \"NIAGARAFALLS\": \"Niagara Falls\"\n}, {\n  \"ADAMSBASIN\": \"Adams Basin\"\n}, {\n  \"CLIFTONSPRINGS\": \"Clifton Springs\"\n}, {\n  \"EASTBLOOMFIELD\": \"East Bloomfield\"\n}, {\n  \"EASTROCHESTER\": \"East Rochester\"\n}, {\n  \"EASTWILLIAMSON\": \"East Williamson\"\n}, {\n  \"HONEOYEFALLS\": \"Honeoye Falls\"\n}, {\n  \"KEUKAPARK\": \"Keuka Park\"\n}, {\n  \"LEROY\": \"Le Roy\"\n}, {\n  \"LIVONIACENTER\": \"Livonia Center\"\n}, {\n  \"MOUNTMORRIS\": \"Mount Morris\"\n}, {\n  \"NORTHCHILI\": \"North Chili\"\n}, {\n  \"NORTHGREECE\": \"North Greece\"\n}, {\n  \"NORTHROSE\": \"North Rose\"\n}, {\n  \"OAKSCORNERS\": \"Oaks Corners\"\n}, {\n  \"ONTARIOCENTER\": \"Ontario Center\"\n}, {\n  \"PENNYAN\": \"Penn Yan\"\n}, {\n  \"PORTGIBSON\": \"Port Gibson\"\n}, {\n  \"SENECACASTLE\": \"Seneca Castle\"\n}, {\n  \"SILVERSPRINGS\": \"Silver Springs\"\n}, {\n  \"SODUSPOINT\": \"Sodus Point\"\n}, {\n  \"SOUTHBYRON\": \"South Byron\"\n}, {\n  \"SOUTHLIMA\": \"South Lima\"\n}, {\n  \"UNIONHILL\": \"Union Hill\"\n}, {\n  \"WESTBLOOMFIELD\": \"West Bloomfield\"\n}, {\n  \"WESTHENRIETTA\": \"West Henrietta\"\n}, {\n  \"BEMUSPOINT\": \"Bemus Point\"\n}, {\n  \"BLACKCREEK\": \"Black Creek\"\n}, {\n  \"CHERRYCREEK\": \"Cherry Creek\"\n}, {\n  \"CONEWANGOVALLEY\": \"Conewango Valley\"\n}, {\n  \"EASTOTTO\": \"East Otto\"\n}, {\n  \"FINDLEYLAKE\": \"Findley Lake\"\n}, {\n  \"GREATVALLEY\": \"Great Valley\"\n}, {\n  \"KILLBUCK\": \"Kill Buck\"\n}, {\n  \"LILYDALE\": \"Lily Dale\"\n}, {\n  \"LITTLEGENESEE\": \"Little Genesee\"\n}, {\n  \"LITTLEVALLEY\": \"Little Valley\"\n}, {\n  \"MAPLESPRINGS\": \"Maple Springs\"\n}, {\n  \"SAINTBONAVENTURE\": \"Saint Bonaventure\"\n}, {\n  \"WESTCLARKSVILLE\": \"West Clarksville\"\n}, {\n  \"WESTONSMILLS\": \"Westons Mills\"\n}, {\n  \"ALFREDSTATION\": \"Alfred Station\"\n}, {\n  \"BEAVERDAMS\": \"Beaver Dams\"\n}, {\n  \"BIGFLATS\": \"Big Flats\"\n}, {\n  \"CAMERONMILLS\": \"Cameron Mills\"\n}, {\n  \"COOPERSPLAINS\": \"Coopers Plains\"\n}, {\n  \"MONTOURFALLS\": \"Montour Falls\"\n}, {\n  \"PAINTEDPOST\": \"Painted Post\"\n}, {\n  \"PINECITY\": \"Pine City\"\n}, {\n  \"PINEVALLEY\": \"Pine Valley\"\n}, {\n  \"READINGCENTER\": \"Reading Center\"\n}, {\n  \"ROCKSTREAM\": \"Rock Stream\"\n}, {\n  \"SLATERVILLESPRINGS\": \"Slaterville Springs\"\n}, {\n  \"VANETTEN\": \"Van Etten\"\n}, {\n  \"WATKINSGLEN\": \"Watkins Glen\"\n}, {\n  \"BELLEVERNON\": \"Belle Vernon\"\n}, {\n  \"BUENAVISTA\": \"Buena Vista\"\n}, {\n  \"EASTMCKEESPORT\": \"East Mc Keesport\"\n}, {\n  \"MCDONALD\": \"Mc Donald\"\n}, {\n  \"NATRONAHEIGHTS\": \"Natrona Heights\"\n}, {\n  \"NEWBRIGHTON\": \"New Brighton\"\n}, {\n  \"NEWEAGLE\": \"New Eagle\"\n}, {\n  \"NEWKENSINGTON\": \"New Kensington\"\n}, {\n  \"RURALRIDGE\": \"Rural Ridge\"\n}, {\n  \"SOUTHHEIGHTS\": \"South Heights\"\n}, {\n  \"WESTELIZABETH\": \"West Elizabeth\"\n}, {\n  \"ALLISONPARK\": \"Allison Park\"\n}, {\n  \"BETHELPARK\": \"Bethel Park\"\n}, {\n  \"EASTPITTSBURGH\": \"East Pittsburgh\"\n}, {\n  \"WESTMIFFLIN\": \"West Mifflin\"\n}, {\n  \"SOUTHPARK\": \"South Park\"\n}, {\n  \"MCKEESPORT\": \"Mc Keesport\"\n}, {\n  \"MCKEESROCKS\": \"Mc Kees Rocks\"\n}, {\n  \"NORTHVERSAILLES\": \"North Versailles\"\n}, {\n  \"TURTLECREEK\": \"Turtle Creek\"\n}, {\n  \"EIGHTYFOUR\": \"Eighty Four\"\n}, {\n  \"GARARDSFORT\": \"Garards Fort\"\n}, {\n  \"MEADOWLANDS\": \"Meadow Lands\"\n}, {\n  \"NEWFREEPORT\": \"New Freeport\"\n}, {\n  \"PINEBANK\": \"Pine Bank\"\n}, {\n  \"RICESLANDING\": \"Rices Landing\"\n}, {\n  \"SCENERYHILL\": \"Scenery Hill\"\n}, {\n  \"VANVOORHIS\": \"Van Voorhis\"\n}, {\n  \"WESTALEXANDER\": \"West Alexander\"\n}, {\n  \"WESTFINLEY\": \"West Finley\"\n}, {\n  \"WESTMIDDLETOWN\": \"West Middletown\"\n}, {\n  \"WINDRIDGE\": \"Wind Ridge\"\n}, {\n  \"CHALKHILL\": \"Chalk Hill\"\n}, {\n  \"CHESTNUTRIDGE\": \"Chestnut Ridge\"\n}, {\n  \"COALCENTER\": \"Coal Center\"\n}, {\n  \"DICKERSONRUN\": \"Dickerson Run\"\n}, {\n  \"EASTMILLSBORO\": \"East Millsboro\"\n}, {\n  \"FAYETTECITY\": \"Fayette City\"\n}, {\n  \"GIBBONGLADE\": \"Gibbon Glade\"\n}, {\n  \"INDIANHEAD\": \"Indian Head\"\n}, {\n  \"JACOBSCREEK\": \"Jacobs Creek\"\n}, {\n  \"LABELLE\": \"La Belle\"\n}, {\n  \"LAKELYNN\": \"Lake Lynn\"\n}, {\n  \"LEMONTFURNACE\": \"Lemont Furnace\"\n}, {\n  \"MCCLELLANDTOWN\": \"Mc Clellandtown\"\n}, {\n  \"MILLRUN\": \"Mill Run\"\n}, {\n  \"MOUNTBRADDOCK\": \"Mount Braddock\"\n}, {\n  \"NEWGENEVA\": \"New Geneva\"\n}, {\n  \"POINTMARION\": \"Point Marion\"\n}, {\n  \"STARJUNCTION\": \"Star Junction\"\n}, {\n  \"WESTLEISENRING\": \"West Leisenring\"\n}, {\n  \"HIDDENVALLEY\": \"Hidden Valley\"\n}, {\n  \"ALUMBANK\": \"Alum Bank\"\n}, {\n  \"BUFFALOMILLS\": \"Buffalo Mills\"\n}, {\n  \"CRYSTALSPRING\": \"Crystal Spring\"\n}, {\n  \"FORTHILL\": \"Fort Hill\"\n}, {\n  \"MANNSCHOICE\": \"Manns Choice\"\n}, {\n  \"NEWPARIS\": \"New Paris\"\n}, {\n  \"WESTSALISBURY\": \"West Salisbury\"\n}, {\n  \"EASTVANDERGRIFT\": \"East Vandergrift\"\n}, {\n  \"FORBESROAD\": \"Forbes Road\"\n}, {\n  \"HARRISONCITY\": \"Harrison City\"\n}, {\n  \"JONESMILLS\": \"Jones Mills\"\n}, {\n  \"MOUNTPLEASANT\": \"Mount Pleasant\"\n}, {\n  \"NEWALEXANDRIA\": \"New Alexandria\"\n}, {\n  \"NEWDERRY\": \"New Derry\"\n}, {\n  \"NEWSTANTON\": \"New Stanton\"\n}, {\n  \"NORTHAPOLLO\": \"North Apollo\"\n}, {\n  \"PLEASANTUNITY\": \"Pleasant Unity\"\n}, {\n  \"RUFFSDALE\": \"Ruffs Dale\"\n}, {\n  \"SPRINGCHURCH\": \"Spring Church\"\n}, {\n  \"WESTMORELANDCITY\": \"Westmoreland City\"\n}, {\n  \"NORTHERNCAMBRIA\": \"Northern Cambria\"\n}, {\n  \"BIGRUN\": \"Big Run\"\n}, {\n  \"BLACKLICK\": \"Black Lick\"\n}, {\n  \"BRUSHVALLEY\": \"Brush Valley\"\n}, {\n  \"CHERRYTREE\": \"Cherry Tree\"\n}, {\n  \"GLENCAMPBELL\": \"Glen Campbell\"\n}, {\n  \"HOMERCITY\": \"Homer City\"\n}, {\n  \"LAJOSE\": \"La Jose\"\n}, {\n  \"MCINTYRE\": \"Mc Intyre\"\n}, {\n  \"MARIONCENTER\": \"Marion Center\"\n}, {\n  \"PENNRUN\": \"Penn Run\"\n}, {\n  \"ROCHESTERMILLS\": \"Rochester Mills\"\n}, {\n  \"SAINTBENEDICT\": \"Saint Benedict\"\n}, {\n  \"SPRANKLEMILLS\": \"Sprankle Mills\"\n}, {\n  \"DUBOIS\": \"Du Bois\"\n}, {\n  \"BRANDYCAMP\": \"Brandy Camp\"\n}, {\n  \"DAGUSMINES\": \"Dagus Mines\"\n}, {\n  \"FALLSCREEK\": \"Falls Creek\"\n}, {\n  \"KNOXDALE\": \"Knox Dale\"\n}, {\n  \"SAINTMARYS\": \"Saint Marys\"\n}, {\n  \"STUMPCREEK\": \"Stump Creek\"\n}, {\n  \"CENTRALCITY\": \"Central City\"\n}, {\n  \"MINERALPOINT\": \"Mineral Point\"\n}, {\n  \"NANTYGLO\": \"Nanty Glo\"\n}, {\n  \"NEWFLORENCE\": \"New Florence\"\n}, {\n  \"SAINTMICHAEL\": \"Saint Michael\"\n}, {\n  \"SOUTHFORK\": \"South Fork\"\n}, {\n  \"TIREHILL\": \"Tire Hill\"\n}, {\n  \"TWINROCKS\": \"Twin Rocks\"\n}, {\n  \"EASTBRADY\": \"East Brady\"\n}, {\n  \"EASTBUTLER\": \"East Butler\"\n}, {\n  \"EAUCLAIRE\": \"Eau Claire\"\n}, {\n  \"EVANSCITY\": \"Evans City\"\n}, {\n  \"KARNSCITY\": \"Karns City\"\n}, {\n  \"NORTHWASHINGTON\": \"North Washington\"\n}, {\n  \"SAINTPETERSBURG\": \"Saint Petersburg\"\n}, {\n  \"SLIPPERYROCK\": \"Slippery Rock\"\n}, {\n  \"TURKEYCITY\": \"Turkey City\"\n}, {\n  \"WESTSUNBURY\": \"West Sunbury\"\n}, {\n  \"CRANBERRYTWP\": \"Cranberry Twp\"\n}, {\n  \"CLARKSMILLS\": \"Clarks Mills\"\n}, {\n  \"ELLWOODCITY\": \"Ellwood City\"\n}, {\n  \"ENONVALLEY\": \"Enon Valley\"\n}, {\n  \"GROVECITY\": \"Grove City\"\n}, {\n  \"JACKSONCENTER\": \"Jackson Center\"\n}, {\n  \"NEWGALILEE\": \"New Galilee\"\n}, {\n  \"NEWWILMINGTON\": \"New Wilmington\"\n}, {\n  \"SANDYLAKE\": \"Sandy Lake\"\n}, {\n  \"VILLAMARIA\": \"Villa Maria\"\n}, {\n  \"WESTMIDDLESEX\": \"West Middlesex\"\n}, {\n  \"WESTPITTSBURG\": \"West Pittsburg\"\n}, {\n  \"FAIRMOUNTCITY\": \"Fairmount City\"\n}, {\n  \"FORDCITY\": \"Ford City\"\n}, {\n  \"FORDCLIFF\": \"Ford Cliff\"\n}, {\n  \"MCGRANN\": \"Mc Grann\"\n}, {\n  \"NEWBETHLEHEM\": \"New Bethlehem\"\n}, {\n  \"NUMINE\": \"Nu Mine\"\n}, {\n  \"RURALVALLEY\": \"Rural Valley\"\n}, {\n  \"OILCITY\": \"Oil City\"\n}, {\n  \"CHANDLERSVALLEY\": \"Chandlers Valley\"\n}, {\n  \"CONNEAUTLAKE\": \"Conneaut Lake\"\n}, {\n  \"EASTHICKORY\": \"East Hickory\"\n}, {\n  \"GUYSMILLS\": \"Guys Mills\"\n}, {\n  \"SUGARGROVE\": \"Sugar Grove\"\n}, {\n  \"WESTHICKORY\": \"West Hickory\"\n}, {\n  \"BEARLAKE\": \"Bear Lake\"\n}, {\n  \"CAMBRIDGESPRINGS\": \"Cambridge Springs\"\n}, {\n  \"GRANDVALLEY\": \"Grand Valley\"\n}, {\n  \"LAKECITY\": \"Lake City\"\n}, {\n  \"MCKEAN\": \"Mc Kean\"\n}, {\n  \"MILLVILLAGE\": \"Mill Village\"\n}, {\n  \"NORTHEAST\": \"North East\"\n}, {\n  \"SPRINGCREEK\": \"Spring Creek\"\n}, {\n  \"BAKERSSUMMIT\": \"Bakers Summit\"\n}, {\n  \"BROADTOP\": \"Broad Top\"\n}, {\n  \"CHESTSPRINGS\": \"Chest Springs\"\n}, {\n  \"EASTFREEDOM\": \"East Freedom\"\n}, {\n  \"GLENHOPE\": \"Glen Hope\"\n}, {\n  \"JAMESCREEK\": \"James Creek\"\n}, {\n  \"MCCONNELLSTOWN\": \"Mc Connellstown\"\n}, {\n  \"NEWENTERPRISE\": \"New Enterprise\"\n}, {\n  \"OSCEOLAMILLS\": \"Osceola Mills\"\n}, {\n  \"ROARINGSPRING\": \"Roaring Spring\"\n}, {\n  \"SAINTBONIFACE\": \"Saint Boniface\"\n}, {\n  \"SANDYRIDGE\": \"Sandy Ridge\"\n}, {\n  \"SIXMILERUN\": \"Six Mile Run\"\n}, {\n  \"SPRUCECREEK\": \"Spruce Creek\"\n}, {\n  \"WELLSTANNERY\": \"Wells Tannery\"\n}, {\n  \"CUSTERCITY\": \"Custer City\"\n}, {\n  \"DERRICKCITY\": \"Derrick City\"\n}, {\n  \"DEYOUNG\": \"De Young\"\n}, {\n  \"DUKECENTER\": \"Duke Center\"\n}, {\n  \"EASTSMETHPORT\": \"East Smethport\"\n}, {\n  \"HAZELHURST\": \"Hazel Hurst\"\n}, {\n  \"JAMESCITY\": \"James City\"\n}, {\n  \"LEWISRUN\": \"Lewis Run\"\n}, {\n  \"MOUNTJEWETT\": \"Mount Jewett\"\n}, {\n  \"PORTALLEGANY\": \"Port Allegany\"\n}, {\n  \"STATECOLLEGE\": \"State College\"\n}, {\n  \"UNIVERSITYPARK\": \"University Park\"\n}, {\n  \"BEECHCREEK\": \"Beech Creek\"\n}, {\n  \"CENTREHALL\": \"Centre Hall\"\n}, {\n  \"GLENRICHEY\": \"Glen Richey\"\n}, {\n  \"HAWKRUN\": \"Hawk Run\"\n}, {\n  \"LECONTESMILLS\": \"Lecontes Mills\"\n}, {\n  \"MINERALSPRINGS\": \"Mineral Springs\"\n}, {\n  \"NEWMILLPORT\": \"New Millport\"\n}, {\n  \"PENNSYLVANIAFURNACE\": \"Pennsylvania Furnace\"\n}, {\n  \"PINEGROVEMILLS\": \"Pine Grove Mills\"\n}, {\n  \"PORTMATILDA\": \"Port Matilda\"\n}, {\n  \"SNOWSHOE\": \"Snow Shoe\"\n}, {\n  \"SPRINGMILLS\": \"Spring Mills\"\n}, {\n  \"WARRIORSMARK\": \"Warriors Mark\"\n}, {\n  \"WESTDECATUR\": \"West Decatur\"\n}, {\n  \"COLUMBIACROSSROADS\": \"Columbia Cross Roads\"\n}, {\n  \"GRANVILLESUMMIT\": \"Granville Summit\"\n}, {\n  \"HARRISONVALLEY\": \"Harrison Valley\"\n}, {\n  \"MIDDLEBURYCENTER\": \"Middlebury Center\"\n}, {\n  \"MORRISRUN\": \"Morris Run\"\n}, {\n  \"CAMPHILL\": \"Camp Hill\"\n}, {\n  \"BOILINGSPRINGS\": \"Boiling Springs\"\n}, {\n  \"EASTWATERFORD\": \"East Waterford\"\n}, {\n  \"GREENPARK\": \"Green Park\"\n}, {\n  \"HONEYGROVE\": \"Honey Grove\"\n}, {\n  \"MCALISTERVILLE\": \"Mc Alisterville\"\n}, {\n  \"MCVEYTOWN\": \"Mc Veytown\"\n}, {\n  \"MAPLETONDEPOT\": \"Mapleton Depot\"\n}, {\n  \"MILLCREEK\": \"Mill Creek\"\n}, {\n  \"MOUNTGRETNA\": \"Mount Gretna\"\n}, {\n  \"MOUNTHOLLYSPRINGS\": \"Mount Holly Springs\"\n}, {\n  \"MOUNTUNION\": \"Mount Union\"\n}, {\n  \"NEWBLOOMFIELD\": \"New Bloomfield\"\n}, {\n  \"NEWBUFFALO\": \"New Buffalo\"\n}, {\n  \"NEWCUMBERLAND\": \"New Cumberland\"\n}, {\n  \"NEWGERMANTOWN\": \"New Germantown\"\n}, {\n  \"NEWKINGSTOWN\": \"New Kingstown\"\n}, {\n  \"NEWTONHAMILTON\": \"Newton Hamilton\"\n}, {\n  \"OAKLANDMILLS\": \"Oakland Mills\"\n}, {\n  \"PORTROYAL\": \"Port Royal\"\n}, {\n  \"SHERMANSDALE\": \"Shermans Dale\"\n}, {\n  \"BIGCOVETANNERY\": \"Big Cove Tannery\"\n}, {\n  \"BLAIRSMILLS\": \"Blairs Mills\"\n}, {\n  \"BLUERIDGESUMMIT\": \"Blue Ridge Summit\"\n}, {\n  \"BURNTCABINS\": \"Burnt Cabins\"\n}, {\n  \"DRYRUN\": \"Dry Run\"\n}, {\n  \"FORTLITTLETON\": \"Fort Littleton\"\n}, {\n  \"FORTLOUDON\": \"Fort Loudon\"\n}, {\n  \"MCCONNELLSBURG\": \"Mc Connellsburg\"\n}, {\n  \"MONTALTO\": \"Mont Alto\"\n}, {\n  \"PLEASANTHALL\": \"Pleasant Hall\"\n}, {\n  \"ROCKHILLFURNACE\": \"Rockhill Furnace\"\n}, {\n  \"SAINTTHOMAS\": \"Saint Thomas\"\n}, {\n  \"SHADEGAP\": \"Shade Gap\"\n}, {\n  \"SHADYGROVE\": \"Shady Grove\"\n}, {\n  \"SOUTHMOUNTAIN\": \"South Mountain\"\n}, {\n  \"SPRINGRUN\": \"Spring Run\"\n}, {\n  \"STATELINE\": \"State Line\"\n}, {\n  \"THREESPRINGS\": \"Three Springs\"\n}, {\n  \"WALNUTBOTTOM\": \"Walnut Bottom\"\n}, {\n  \"WILLOWHILL\": \"Willow Hill\"\n}, {\n  \"EASTPROSPECT\": \"East Prospect\"\n}, {\n  \"FAWNGROVE\": \"Fawn Grove\"\n}, {\n  \"MCKNIGHTSTOWN\": \"Mc Knightstown\"\n}, {\n  \"MCSHERRYSTOWN\": \"Mc Sherrystown\"\n}, {\n  \"MOUNTWOLF\": \"Mount Wolf\"\n}, {\n  \"NEWFREEDOM\": \"New Freedom\"\n}, {\n  \"NEWOXFORD\": \"New Oxford\"\n}, {\n  \"NEWPARK\": \"New Park\"\n}, {\n  \"PORTERSSIDELING\": \"Porters Sideling\"\n}, {\n  \"REDLION\": \"Red Lion\"\n}, {\n  \"SEVENVALLEYS\": \"Seven Valleys\"\n}, {\n  \"SPRINGGROVE\": \"Spring Grove\"\n}, {\n  \"YORKHAVEN\": \"York Haven\"\n}, {\n  \"YORKNEWSALEM\": \"York New Salem\"\n}, {\n  \"YORKSPRINGS\": \"York Springs\"\n}, {\n  \"PEACHGLEN\": \"Peach Glen\"\n}, {\n  \"BIRDINHAND\": \"Bird In Hand\"\n}, {\n  \"BLUEBALL\": \"Blue Ball\"\n}, {\n  \"EASTEARL\": \"East Earl\"\n}, {\n  \"EASTPETERSBURG\": \"East Petersburg\"\n}, {\n  \"MOUNTJOY\": \"Mount Joy\"\n}, {\n  \"NEWHOLLAND\": \"New Holland\"\n}, {\n  \"PEACHBOTTOM\": \"Peach Bottom\"\n}, {\n  \"SILVERSPRING\": \"Silver Spring\"\n}, {\n  \"TERREHILL\": \"Terre Hill\"\n}, {\n  \"WASHINGTONBORO\": \"Washington Boro\"\n}, {\n  \"WESTWILLOW\": \"West Willow\"\n}, {\n  \"WILLOWSTREET\": \"Willow Street\"\n}, {\n  \"ANTESFORT\": \"Antes Fort\"\n}, {\n  \"JERSEYSHORE\": \"Jersey Shore\"\n}, {\n  \"CEDARRUN\": \"Cedar Run\"\n}, {\n  \"COGANSTATION\": \"Cogan Station\"\n}, {\n  \"CROSSFORK\": \"Cross Fork\"\n}, {\n  \"EAGLESMERE\": \"Eagles Mere\"\n}, {\n  \"JERSEYMILLS\": \"Jersey Mills\"\n}, {\n  \"LOCKHAVEN\": \"Lock Haven\"\n}, {\n  \"MCELHATTAN\": \"Mc Elhattan\"\n}, {\n  \"MCEWENSVILLE\": \"Mc Ewensville\"\n}, {\n  \"MILLHALL\": \"Mill Hall\"\n}, {\n  \"MUNCYVALLEY\": \"Muncy Valley\"\n}, {\n  \"NORTHBEND\": \"North Bend\"\n}, {\n  \"PICTUREROCKS\": \"Picture Rocks\"\n}, {\n  \"ROARINGBRANCH\": \"Roaring Branch\"\n}, {\n  \"SLATERUN\": \"Slate Run\"\n}, {\n  \"TROUTRUN\": \"Trout Run\"\n}, {\n  \"BEAVERSPRINGS\": \"Beaver Springs\"\n}, {\n  \"GOWENCITY\": \"Gowen City\"\n}, {\n  \"HUMMELSWHARF\": \"Hummels Wharf\"\n}, {\n  \"MARIONHEIGHTS\": \"Marion Heights\"\n}, {\n  \"LECKKILL\": \"Leck Kill\"\n}, {\n  \"LIGHTSTREET\": \"Light Street\"\n}, {\n  \"LOCUSTGAP\": \"Locust Gap\"\n}, {\n  \"MCCLURE\": \"Mc Clure\"\n}, {\n  \"MOUNTCARMEL\": \"Mount Carmel\"\n}, {\n  \"MOUNTPLEASANTMILLS\": \"Mount Pleasant Mills\"\n}, {\n  \"NEWCOLUMBIA\": \"New Columbia\"\n}, {\n  \"PENNSCREEK\": \"Penns Creek\"\n}, {\n  \"PORTTREVORTON\": \"Port Trevorton\"\n}, {\n  \"POTTSGROVE\": \"Potts Grove\"\n}, {\n  \"COALTOWNSHIP\": \"Coal Township\"\n}, {\n  \"SHAMOKINDAM\": \"Shamokin Dam\"\n}, {\n  \"WESTMILTON\": \"West Milton\"\n}, {\n  \"WHITEDEER\": \"White Deer\"\n}, {\n  \"LOSTCREEK\": \"Lost Creek\"\n}, {\n  \"MAHANOYCITY\": \"Mahanoy City\"\n}, {\n  \"MAHANOYPLANE\": \"Mahanoy Plane\"\n}, {\n  \"MARLIN\": \"Mar Lin\"\n}, {\n  \"MARYD\": \"Mary D\"\n}, {\n  \"NEWPHILADELPHIA\": \"New Philadelphia\"\n}, {\n  \"NEWRINGGOLD\": \"New Ringgold\"\n}, {\n  \"PINEGROVE\": \"Pine Grove\"\n}, {\n  \"PORTCARBON\": \"Port Carbon\"\n}, {\n  \"SAINTCLAIR\": \"Saint Clair\"\n}, {\n  \"SCHUYLKILLHAVEN\": \"Schuylkill Haven\"\n}, {\n  \"SUMMITSTATION\": \"Summit Station\"\n}, {\n  \"TOWERCITY\": \"Tower City\"\n}, {\n  \"VALLEYVIEW\": \"Valley View\"\n}, {\n  \"ZIONGROVE\": \"Zion Grove\"\n}, {\n  \"LEHIGHVALLEY\": \"Lehigh Valley\"\n}, {\n  \"CENTERVALLEY\": \"Center Valley\"\n}, {\n  \"EASTGREENVILLE\": \"East Greenville\"\n}, {\n  \"EASTTEXAS\": \"East Texas\"\n}, {\n  \"GREENLANE\": \"Green Lane\"\n}, {\n  \"LAURYSSTATION\": \"Laurys Station\"\n}, {\n  \"MARTINSCREEK\": \"Martins Creek\"\n}, {\n  \"NEWTRIPOLI\": \"New Tripoli\"\n}, {\n  \"OLDZIONSVILLE\": \"Old Zionsville\"\n}, {\n  \"PENARGYL\": \"Pen Argyl\"\n}, {\n  \"REDHILL\": \"Red Hill\"\n}, {\n  \"WINDGAP\": \"Wind Gap\"\n}, {\n  \"BEAVERMEADOWS\": \"Beaver Meadows\"\n}, {\n  \"JIMTHORPE\": \"Jim Thorpe\"\n}, {\n  \"LATTIMERMINES\": \"Lattimer Mines\"\n}, {\n  \"ROCKGLEN\": \"Rock Glen\"\n}, {\n  \"SAINTJOHNS\": \"Saint Johns\"\n}, {\n  \"SUMMITHILL\": \"Summit Hill\"\n}, {\n  \"EASTSTROUDSBURG\": \"East Stroudsburg\"\n}, {\n  \"BUCKHILLFALLS\": \"Buck Hill Falls\"\n}, {\n  \"DELAWAREWATERGAP\": \"Delaware Water Gap\"\n}, {\n  \"DINGMANSFERRY\": \"Dingmans Ferry\"\n}, {\n  \"LONGPOND\": \"Long Pond\"\n}, {\n  \"MARSHALLSCREEK\": \"Marshalls Creek\"\n}, {\n  \"MINISINKHILLS\": \"Minisink Hills\"\n}, {\n  \"MOUNTBETHEL\": \"Mount Bethel\"\n}, {\n  \"MOUNTPOCONO\": \"Mount Pocono\"\n}, {\n  \"POCONOSUMMIT\": \"Pocono Summit\"\n}, {\n  \"POCONOLAKE\": \"Pocono Lake\"\n}, {\n  \"POCONOLAKEPRESERVE\": \"Pocono Lake Preserve\"\n}, {\n  \"POCONOMANOR\": \"Pocono Manor\"\n}, {\n  \"POCONOPINES\": \"Pocono Pines\"\n}, {\n  \"SHAWNEEONDELAWARE\": \"Shawnee On Delaware\"\n}, {\n  \"UNITYHOUSE\": \"Unity House\"\n}, {\n  \"BEACHLAKE\": \"Beach Lake\"\n}, {\n  \"CLARKSSUMMIT\": \"Clarks Summit\"\n}, {\n  \"FORESTCITY\": \"Forest City\"\n}, {\n  \"HERRICKCENTER\": \"Herrick Center\"\n}, {\n  \"LAKEARIEL\": \"Lake Ariel\"\n}, {\n  \"LAKECOMO\": \"Lake Como\"\n}, {\n  \"LAPLUME\": \"La Plume\"\n}, {\n  \"PLEASANTMOUNT\": \"Pleasant Mount\"\n}, {\n  \"PRESTONPARK\": \"Preston Park\"\n}, {\n  \"SOUTHCANAAN\": \"South Canaan\"\n}, {\n  \"SOUTHSTERLING\": \"South Sterling\"\n}, {\n  \"TYLERHILL\": \"Tyler Hill\"\n}, {\n  \"UNIONDALE\": \"Union Dale\"\n}, {\n  \"WHITEMILLS\": \"White Mills\"\n}, {\n  \"DICKSONCITY\": \"Dickson City\"\n}, {\n  \"BEARCREEK\": \"Bear Creek\"\n}, {\n  \"GLENLYON\": \"Glen Lyon\"\n}, {\n  \"HARVEYSLAKE\": \"Harveys Lake\"\n}, {\n  \"HUNLOCKCREEK\": \"Hunlock Creek\"\n}, {\n  \"HUNTINGTONMILLS\": \"Huntington Mills\"\n}, {\n  \"LAKEHARMONY\": \"Lake Harmony\"\n}, {\n  \"LAKEWINOLA\": \"Lake Winola\"\n}, {\n  \"SWEETVALLEY\": \"Sweet Valley\"\n}, {\n  \"WHITEHAVEN\": \"White Haven\"\n}, {\n  \"WILKESBARRE\": \"Wilkes Barre\"\n}, {\n  \"MOUNTAINTOP\": \"Mountain Top\"\n}, {\n  \"EASTSMITHFIELD\": \"East Smithfield\"\n}, {\n  \"HOPBOTTOM\": \"Hop Bottom\"\n}, {\n  \"LERAYSVILLE\": \"Le Raysville\"\n}, {\n  \"LITTLEMEADOWS\": \"Little Meadows\"\n}, {\n  \"NEWALBANY\": \"New Albany\"\n}, {\n  \"SOUTHGIBSON\": \"South Gibson\"\n}, {\n  \"SOUTHMONTROSE\": \"South Montrose\"\n}, {\n  \"SUGARRUN\": \"Sugar Run\"\n}, {\n  \"WARRENCENTER\": \"Warren Center\"\n}, {\n  \"BLOOMINGGLEN\": \"Blooming Glen\"\n}, {\n  \"FORESTGROVE\": \"Forest Grove\"\n}, {\n  \"LINELEXINGTON\": \"Line Lexington\"\n}, {\n  \"MILFORDSQUARE\": \"Milford Square\"\n}, {\n  \"NEWHOPE\": \"New Hope\"\n}, {\n  \"PENNSPARK\": \"Penns Park\"\n}, {\n  \"POINTPLEASANT\": \"Point Pleasant\"\n}, {\n  \"UPPERBLACKEDDY\": \"Upper Black Eddy\"\n}, {\n  \"WASHINGTONCROSSING\": \"Washington Crossing\"\n}, {\n  \"BALACYNWYD\": \"Bala Cynwyd\"\n}, {\n  \"HUNTINGDONVALLEY\": \"Huntingdon Valley\"\n}, {\n  \"BRYNATHYN\": \"Bryn Athyn\"\n}, {\n  \"BRYNMAWR\": \"Bryn Mawr\"\n}, {\n  \"CHESTERHEIGHTS\": \"Chester Heights\"\n}, {\n  \"CLIFTONHEIGHTS\": \"Clifton Heights\"\n}, {\n  \"CRUMLYNNE\": \"Crum Lynne\"\n}, {\n  \"DREXELHILL\": \"Drexel Hill\"\n}, {\n  \"ELKINSPARK\": \"Elkins Park\"\n}, {\n  \"FAIRLESSHILLS\": \"Fairless Hills\"\n}, {\n  \"FORTWASHINGTON\": \"Fort Washington\"\n}, {\n  \"GLENRIDDLELIMA\": \"Glen Riddle Lima\"\n}, {\n  \"FEASTERVILLETREVOSE\": \"Feasterville Trevose\"\n}, {\n  \"MARCUSHOOK\": \"Marcus Hook\"\n}, {\n  \"MERIONSTATION\": \"Merion Station\"\n}, {\n  \"NEWTOWNSQUARE\": \"Newtown Square\"\n}, {\n  \"PROSPECTPARK\": \"Prospect Park\"\n}, {\n  \"RIDLEYPARK\": \"Ridley Park\"\n}, {\n  \"SHARONHILL\": \"Sharon Hill\"\n}, {\n  \"UPPERDARBY\": \"Upper Darby\"\n}, {\n  \"WILLOWGROVE\": \"Willow Grove\"\n}, {\n  \"CHADDSFORD\": \"Chadds Ford\"\n}, {\n  \"GLENMILLS\": \"Glen Mills\"\n}, {\n  \"HONEYBROOK\": \"Honey Brook\"\n}, {\n  \"KENNETTSQUARE\": \"Kennett Square\"\n}, {\n  \"LINCOLNUNIVERSITY\": \"Lincoln University\"\n}, {\n  \"WESTCHESTER\": \"West Chester\"\n}, {\n  \"WESTGROVE\": \"West Grove\"\n}, {\n  \"KINGOFPRUSSIA\": \"King Of Prussia\"\n}, {\n  \"FAIRVIEWVILLAGE\": \"Fairview Village\"\n}, {\n  \"BLUEBELL\": \"Blue Bell\"\n}, {\n  \"CHESTERSPRINGS\": \"Chester Springs\"\n}, {\n  \"GWYNEDDVALLEY\": \"Gwynedd Valley\"\n}, {\n  \"LAFAYETTEHILL\": \"Lafayette Hill\"\n}, {\n  \"MONTCLARE\": \"Mont Clare\"\n}, {\n  \"NORTHWALES\": \"North Wales\"\n}, {\n  \"PARKERFORD\": \"Parker Ford\"\n}, {\n  \"PLYMOUTHMEETING\": \"Plymouth Meeting\"\n}, {\n  \"SAINTPETERS\": \"Saint Peters\"\n}, {\n  \"SPRINGCITY\": \"Spring City\"\n}, {\n  \"SPRINGHOUSE\": \"Spring House\"\n}, {\n  \"SPRINGMOUNT\": \"Spring Mount\"\n}, {\n  \"VALLEYFORGE\": \"Valley Forge\"\n}, {\n  \"LYONSTATION\": \"Lyon Station\"\n}, {\n  \"MONOCACYSTATION\": \"Monocacy Station\"\n}, {\n  \"MOUNTAETNA\": \"Mount Aetna\"\n}, {\n  \"NEWBERLINVILLE\": \"New Berlinville\"\n}, {\n  \"PINEFORGE\": \"Pine Forge\"\n}, {\n  \"PORTCLINTON\": \"Port Clinton\"\n}, {\n  \"STONYRUN\": \"Stony Run\"\n}, {\n  \"DELAWARECITY\": \"Delaware City\"\n}, {\n  \"PORTPENN\": \"Port Penn\"\n}, {\n  \"SAINTGEORGES\": \"Saint Georges\"\n}, {\n  \"DOVERAFB\": \"Dover Afb\"\n}, {\n  \"BETHANYBEACH\": \"Bethany Beach\"\n}, {\n  \"CAMDENWYOMING\": \"Camden Wyoming\"\n}, {\n  \"FENWICKISLAND\": \"Fenwick Island\"\n}, {\n  \"LITTLECREEK\": \"Little Creek\"\n}, {\n  \"REHOBOTHBEACH\": \"Rehoboth Beach\"\n}, {\n  \"PAEONIANSPRINGS\": \"Paeonian Springs\"\n}, {\n  \"BROADRUN\": \"Broad Run\"\n}, {\n  \"ROUNDHILL\": \"Round Hill\"\n}, {\n  \"THEPLAINS\": \"The Plains\"\n}, {\n  \"ANACOSTIAANNEX\": \"Anacostia Annex\"\n}, {\n  \"BELALTON\": \"Bel Alton\"\n}, {\n  \"BROOMESISLAND\": \"Broomes Island\"\n}, {\n  \"BRYANSROAD\": \"Bryans Road\"\n}, {\n  \"CHARLOTTEHALL\": \"Charlotte Hall\"\n}, {\n  \"COBBISLAND\": \"Cobb Island\"\n}, {\n  \"COLTONSPOINT\": \"Coltons Point\"\n}, {\n  \"GREATMILLS\": \"Great Mills\"\n}, {\n  \"LEXINGTONPARK\": \"Lexington Park\"\n}, {\n  \"MOUNTVICTORIA\": \"Mount Victoria\"\n}, {\n  \"PARKHALL\": \"Park Hall\"\n}, {\n  \"PATUXENTRIVER\": \"Patuxent River\"\n}, {\n  \"PINEYPOINT\": \"Piney Point\"\n}, {\n  \"PORTTOBACCO\": \"Port Tobacco\"\n}, {\n  \"PRINCEFREDERICK\": \"Prince Frederick\"\n}, {\n  \"ROCKPOINT\": \"Rock Point\"\n}, {\n  \"SAINTINIGOES\": \"Saint Inigoes\"\n}, {\n  \"SAINTLEONARD\": \"Saint Leonard\"\n}, {\n  \"SAINTMARYSCITY\": \"Saint Marys City\"\n}, {\n  \"TALLTIMBERS\": \"Tall Timbers\"\n}, {\n  \"VALLEYLEE\": \"Valley Lee\"\n}, {\n  \"SOUTHERNMDFACILITY\": \"Southern Md Facility\"\n}, {\n  \"ANNAPOLISJUNCTION\": \"Annapolis Junction\"\n}, {\n  \"MOUNTRAINIER\": \"Mount Rainier\"\n}, {\n  \"NORTHBEACH\": \"North Beach\"\n}, {\n  \"CAPITOLHEIGHTS\": \"Capitol Heights\"\n}, {\n  \"CHESAPEAKEBEACH\": \"Chesapeake Beach\"\n}, {\n  \"COLLEGEPARK\": \"College Park\"\n}, {\n  \"OXONHILL\": \"Oxon Hill\"\n}, {\n  \"DISTRICTHEIGHTS\": \"District Heights\"\n}, {\n  \"TEMPLEHILLS\": \"Temple Hills\"\n}, {\n  \"FORTGEORGEGMEADE\": \"Fort George G Meade\"\n}, {\n  \"ANDREWSAIRFORCEBASE\": \"Andrews Air Force Base\"\n}, {\n  \"SHADYSIDE\": \"Shady Side\"\n}, {\n  \"GLENNDALE\": \"Glenn Dale\"\n}, {\n  \"UPPERMARLBORO\": \"Upper Marlboro\"\n}, {\n  \"WESTRIVER\": \"West River\"\n}, {\n  \"TRACYSLANDING\": \"Tracys Landing\"\n}, {\n  \"GLENECHO\": \"Glen Echo\"\n}, {\n  \"CHEVYCHASE\": \"Chevy Chase\"\n}, {\n  \"CABINJOHN\": \"Cabin John\"\n}, {\n  \"SANDYSPRING\": \"Sandy Spring\"\n}, {\n  \"WASHINGTONGROVE\": \"Washington Grove\"\n}, {\n  \"MONTGOMERYVILLAGE\": \"Montgomery Village\"\n}, {\n  \"GARRETTPARK\": \"Garrett Park\"\n}, {\n  \"SUBURBMARYLANDFAC\": \"Suburb Maryland Fac\"\n}, {\n  \"TAKOMAPARK\": \"Takoma Park\"\n}, {\n  \"ABERDEENPROVINGGROUND\": \"Aberdeen Proving Ground\"\n}, {\n  \"BELAIR\": \"Bel Air\"\n}, {\n  \"HUNTVALLEY\": \"Hunt Valley\"\n}, {\n  \"ELLICOTTCITY\": \"Ellicott City\"\n}, {\n  \"FORESTHILL\": \"Forest Hill\"\n}, {\n  \"FORTHOWARD\": \"Fort Howard\"\n}, {\n  \"GIBSONISLAND\": \"Gibson Island\"\n}, {\n  \"GLENARM\": \"Glen Arm\"\n}, {\n  \"GLENBURNIE\": \"Glen Burnie\"\n}, {\n  \"HAVREDEGRACE\": \"Havre De Grace\"\n}, {\n  \"LINTHICUMHEIGHTS\": \"Linthicum Heights\"\n}, {\n  \"LONGGREEN\": \"Long Green\"\n}, {\n  \"LUTHERVILLETIMONIUM\": \"Lutherville Timonium\"\n}, {\n  \"MARYLANDLINE\": \"Maryland Line\"\n}, {\n  \"OWINGSMILLS\": \"Owings Mills\"\n}, {\n  \"PERRYHALL\": \"Perry Hall\"\n}, {\n  \"SEVERNAPARK\": \"Severna Park\"\n}, {\n  \"SPARKSGLENCOE\": \"Sparks Glencoe\"\n}, {\n  \"UPPERFALLS\": \"Upper Falls\"\n}, {\n  \"WHITEHALL\": \"White Hall\"\n}, {\n  \"WHITEMARSH\": \"White Marsh\"\n}, {\n  \"GWYNNOAK\": \"Gwynn Oak\"\n}, {\n  \"SPARROWSPOINT\": \"Sparrows Point\"\n}, {\n  \"MIDDLERIVER\": \"Middle River\"\n}, {\n  \"CURTISBAY\": \"Curtis Bay\"\n}, {\n  \"WINDSORMILL\": \"Windsor Mill\"\n}, {\n  \"ECKHARTMINES\": \"Eckhart Mines\"\n}, {\n  \"MCHENRY\": \"Mc Henry\"\n}, {\n  \"MOUNTSAVAGE\": \"Mount Savage\"\n}, {\n  \"SPRINGGAP\": \"Spring Gap\"\n}, {\n  \"CHURCHCREEK\": \"Church Creek\"\n}, {\n  \"CHURCHHILL\": \"Church Hill\"\n}, {\n  \"EASTNEWMARKET\": \"East New Market\"\n}, {\n  \"FISHINGCREEK\": \"Fishing Creek\"\n}, {\n  \"QUEENANNE\": \"Queen Anne\"\n}, {\n  \"ROCKHALL\": \"Rock Hall\"\n}, {\n  \"ROYALOAK\": \"Royal Oak\"\n}, {\n  \"SAINTMICHAELS\": \"Saint Michaels\"\n}, {\n  \"STILLPOND\": \"Still Pond\"\n}, {\n  \"TAYLORSISLAND\": \"Taylors Island\"\n}, {\n  \"WYEMILLS\": \"Wye Mills\"\n}, {\n  \"BIGPOOL\": \"Big Pool\"\n}, {\n  \"BRADDOCKHEIGHTS\": \"Braddock Heights\"\n}, {\n  \"CLEARSPRING\": \"Clear Spring\"\n}, {\n  \"LITTLEORLEANS\": \"Little Orleans\"\n}, {\n  \"MOUNTAIRY\": \"Mount Airy\"\n}, {\n  \"NEWMARKET\": \"New Market\"\n}, {\n  \"NEWMIDWAY\": \"New Midway\"\n}, {\n  \"POINTOFROCKS\": \"Point Of Rocks\"\n}, {\n  \"ROCKYRIDGE\": \"Rocky Ridge\"\n}, {\n  \"UNIONBRIDGE\": \"Union Bridge\"\n}, {\n  \"WESTFRIENDSHIP\": \"West Friendship\"\n}, {\n  \"DEALISLAND\": \"Deal Island\"\n}, {\n  \"MARDELASPRINGS\": \"Mardela Springs\"\n}, {\n  \"MARIONSTATION\": \"Marion Station\"\n}, {\n  \"POCOMOKECITY\": \"Pocomoke City\"\n}, {\n  \"PRINCESSANNE\": \"Princess Anne\"\n}, {\n  \"SNOWHILL\": \"Snow Hill\"\n}, {\n  \"UPPERFAIRMOUNT\": \"Upper Fairmount\"\n}, {\n  \"PERRYPOINT\": \"Perry Point\"\n}, {\n  \"PORTDEPOSIT\": \"Port Deposit\"\n}, {\n  \"RISINGSUN\": \"Rising Sun\"\n}, {\n  \"CHESAPEAKECITY\": \"Chesapeake City\"\n}, {\n  \"ELKMILLS\": \"Elk Mills\"\n}, {\n  \"DUNNLORING\": \"Dunn Loring\"\n}, {\n  \"FAIRFAXSTATION\": \"Fairfax Station\"\n}, {\n  \"FALLSCHURCH\": \"Falls Church\"\n}, {\n  \"FORTBELVOIR\": \"Fort Belvoir\"\n}, {\n  \"GREATFALLS\": \"Great Falls\"\n}, {\n  \"WESTMCLEAN\": \"West Mclean\"\n}, {\n  \"FTMYER\": \"Ft Myer\"\n}, {\n  \"BOWLINGGREEN\": \"Bowling Green\"\n}, {\n  \"BURRHILL\": \"Burr Hill\"\n}, {\n  \"CENTERCROSS\": \"Center Cross\"\n}, {\n  \"COLESPOINT\": \"Coles Point\"\n}, {\n  \"COLONIALBEACH\": \"Colonial Beach\"\n}, {\n  \"KINGGEORGE\": \"King George\"\n}, {\n  \"LOCUSTGROVE\": \"Locust Grove\"\n}, {\n  \"MERRYPOINT\": \"Merry Point\"\n}, {\n  \"RAPPAHANNOCKACADEMY\": \"Rappahannock Academy\"\n}, {\n  \"ROLLINSFORK\": \"Rollins Fork\"\n}, {\n  \"RUTHERGLEN\": \"Ruther Glen\"\n}, {\n  \"WHITESTONE\": \"White Stone\"\n}, {\n  \"WICOMICOCHURCH\": \"Wicomico Church\"\n}, {\n  \"CHESTERGAP\": \"Chester Gap\"\n}, {\n  \"CLEARBROOK\": \"Clear Brook\"\n}, {\n  \"CROSSJUNCTION\": \"Cross Junction\"\n}, {\n  \"FISHERSHILL\": \"Fishers Hill\"\n}, {\n  \"FLINTHILL\": \"Flint Hill\"\n}, {\n  \"FRONTROYAL\": \"Front Royal\"\n}, {\n  \"FORTVALLEY\": \"Fort Valley\"\n}, {\n  \"STARTANNERY\": \"Star Tannery\"\n}, {\n  \"STEPHENSCITY\": \"Stephens City\"\n}, {\n  \"TOMSBROOK\": \"Toms Brook\"\n}, {\n  \"WHITEPOST\": \"White Post\"\n}, {\n  \"BRANDYSTATION\": \"Brandy Station\"\n}, {\n  \"GRAVESMILL\": \"Graves Mill\"\n}, {\n  \"FULKSRUN\": \"Fulks Run\"\n}, {\n  \"LACEYSPRING\": \"Lacey Spring\"\n}, {\n  \"MCGAHEYSVILLE\": \"Mc Gaheysville\"\n}, {\n  \"MOUNTCRAWFORD\": \"Mount Crawford\"\n}, {\n  \"MOUNTJACKSON\": \"Mount Jackson\"\n}, {\n  \"MOUNTSOLON\": \"Mount Solon\"\n}, {\n  \"ORKNEYSPRINGS\": \"Orkney Springs\"\n}, {\n  \"PENNLAIRD\": \"Penn Laird\"\n}, {\n  \"SINGERSGLEN\": \"Singers Glen\"\n}, {\n  \"FREEUNION\": \"Free Union\"\n}, {\n  \"LOCUSTDALE\": \"Locust Dale\"\n}, {\n  \"MADISONMILLS\": \"Madison Mills\"\n}, {\n  \"MASSIESMILL\": \"Massies Mill\"\n}, {\n  \"MONTPELIERSTATION\": \"Montpelier Station\"\n}, {\n  \"NORTHGARDEN\": \"North Garden\"\n}, {\n  \"PINEYRIVER\": \"Piney River\"\n}, {\n  \"WOODBERRYFOREST\": \"Woodberry Forest\"\n}, {\n  \"AMELIACOURTHOUSE\": \"Amelia Court House\"\n}, {\n  \"BREMOBLUFF\": \"Bremo Bluff\"\n}, {\n  \"CHARLESCITY\": \"Charles City\"\n}, {\n  \"CHURCHVIEW\": \"Church View\"\n}, {\n  \"COBBSCREEK\": \"Cobbs Creek\"\n}, {\n  \"FORKUNION\": \"Fork Union\"\n}, {\n  \"GLENALLEN\": \"Glen Allen\"\n}, {\n  \"GLOUCESTERPOINT\": \"Gloucester Point\"\n}, {\n  \"GUMSPRING\": \"Gum Spring\"\n}, {\n  \"HIGHLANDSPRINGS\": \"Highland Springs\"\n}, {\n  \"KENTSSTORE\": \"Kents Store\"\n}, {\n  \"KINGANDQUEENCOURTHOUS\": \"King And Queen Court Hous\"\n}, {\n  \"KINGWILLIAM\": \"King William\"\n}, {\n  \"LITTLEPLYMOUTH\": \"Little Plymouth\"\n}, {\n  \"LOCUSTHILL\": \"Locust Hill\"\n}, {\n  \"MANAKINSABOT\": \"Manakin Sabot\"\n}, {\n  \"MILLERSTAVERN\": \"Millers Tavern\"\n}, {\n  \"NEWCANTON\": \"New Canton\"\n}, {\n  \"NEWKENT\": \"New Kent\"\n}, {\n  \"NEWPOINT\": \"New Point\"\n}, {\n  \"PORTHAYWOOD\": \"Port Haywood\"\n}, {\n  \"PROVIDENCEFORGE\": \"Providence Forge\"\n}, {\n  \"SAINTSTEPHENSCHURCH\": \"Saint Stephens Church\"\n}, {\n  \"STATEFARM\": \"State Farm\"\n}, {\n  \"UNIVERSITYOFRICHMOND\": \"University Of Richmond\"\n}, {\n  \"WARENECK\": \"Ware Neck\"\n}, {\n  \"WATERVIEW\": \"Water View\"\n}, {\n  \"WOODSCROSSROADS\": \"Woods Cross Roads\"\n}, {\n  \"BATTERYPARK\": \"Battery Park\"\n}, {\n  \"BELLEHAVEN\": \"Belle Haven\"\n}, {\n  \"CAPECHARLES\": \"Cape Charles\"\n}, {\n  \"CHINCOTEAGUEISLAND\": \"Chincoteague Island\"\n}, {\n  \"WALLOPSISLAND\": \"Wallops Island\"\n}, {\n  \"DAVISWHARF\": \"Davis Wharf\"\n}, {\n  \"OAKHALL\": \"Oak Hall\"\n}, {\n  \"ISLEOFWIGHT\": \"Isle Of Wight\"\n}, {\n  \"JENKINSBRIDGE\": \"Jenkins Bridge\"\n}, {\n  \"MODESTTOWN\": \"Modest Town\"\n}, {\n  \"NEWCHURCH\": \"New Church\"\n}, {\n  \"VIRGINIABEACH\": \"Virginia Beach\"\n}, {\n  \"WILLISWHARF\": \"Willis Wharf\"\n}, {\n  \"NEWPORTNEWS\": \"Newport News\"\n}, {\n  \"FORTEUSTIS\": \"Fort Eustis\"\n}, {\n  \"FORTMONROE\": \"Fort Monroe\"\n}, {\n  \"CHURCHROAD\": \"Church Road\"\n}, {\n  \"COLONIALHEIGHTS\": \"Colonial Heights\"\n}, {\n  \"MCKENNEY\": \"Mc Kenney\"\n}, {\n  \"PRINCEGEORGE\": \"Prince George\"\n}, {\n  \"CHARLOTTECOURTHOUSE\": \"Charlotte Court House\"\n}, {\n  \"CHASECITY\": \"Chase City\"\n}, {\n  \"DRAKESBRANCH\": \"Drakes Branch\"\n}, {\n  \"FORTMITCHELL\": \"Fort Mitchell\"\n}, {\n  \"GREENBAY\": \"Green Bay\"\n}, {\n  \"HAMPDENSYDNEY\": \"Hampden Sydney\"\n}, {\n  \"LACROSSE\": \"La Crosse\"\n}, {\n  \"REDHOUSE\": \"Red House\"\n}, {\n  \"REDOAK\": \"Red Oak\"\n}, {\n  \"SOUTHHILL\": \"South Hill\"\n}, {\n  \"BENTMOUNTAIN\": \"Bent Mountain\"\n}, {\n  \"BLUERIDGE\": \"Blue Ridge\"\n}, {\n  \"BOONESMILL\": \"Boones Mill\"\n}, {\n  \"COPPERHILL\": \"Copper Hill\"\n}, {\n  \"EAGLEROCK\": \"Eagle Rock\"\n}, {\n  \"GLADEHILL\": \"Glade Hill\"\n}, {\n  \"GLENLYN\": \"Glen Lyn\"\n}, {\n  \"INDIANVALLEY\": \"Indian Valley\"\n}, {\n  \"MCCOY\": \"Mc Coy\"\n}, {\n  \"MEADOWSOFDAN\": \"Meadows Of Dan\"\n}, {\n  \"NEWRIVER\": \"New River\"\n}, {\n  \"PAINTBANK\": \"Paint Bank\"\n}, {\n  \"PATRICKSPRINGS\": \"Patrick Springs\"\n}, {\n  \"RICHCREEK\": \"Rich Creek\"\n}, {\n  \"ROCKYMOUNT\": \"Rocky Mount\"\n}, {\n  \"SANDYLEVEL\": \"Sandy Level\"\n}, {\n  \"UNIONHALL\": \"Union Hall\"\n}, {\n  \"BENHUR\": \"Ben Hur\"\n}, {\n  \"BIGSTONEGAP\": \"Big Stone Gap\"\n}, {\n  \"EASTSTONEGAP\": \"East Stone Gap\"\n}, {\n  \"FORTBLACKMORE\": \"Fort Blackmore\"\n}, {\n  \"GATECITY\": \"Gate City\"\n}, {\n  \"PENNINGTONGAP\": \"Pennington Gap\"\n}, {\n  \"ROSEHILL\": \"Rose Hill\"\n}, {\n  \"SAINTCHARLES\": \"Saint Charles\"\n}, {\n  \"SAINTPAUL\": \"Saint Paul\"\n}, {\n  \"WEBERCITY\": \"Weber City\"\n}, {\n  \"BARRENSPRINGS\": \"Barren Springs\"\n}, {\n  \"CRIPPLECREEK\": \"Cripple Creek\"\n}, {\n  \"ELKCREEK\": \"Elk Creek\"\n}, {\n  \"FANCYGAP\": \"Fancy Gap\"\n}, {\n  \"GLADESPRING\": \"Glade Spring\"\n}, {\n  \"LAURELFORK\": \"Laurel Fork\"\n}, {\n  \"MAXMEADOWS\": \"Max Meadows\"\n}, {\n  \"MOUTHOFWILSON\": \"Mouth Of Wilson\"\n}, {\n  \"ROCKYGAP\": \"Rocky Gap\"\n}, {\n  \"RURALRETREAT\": \"Rural Retreat\"\n}, {\n  \"SEVENMILEFORD\": \"Seven Mile Ford\"\n}, {\n  \"TROUTDALE\": \"Trout Dale\"\n}, {\n  \"AUGUSTASPRINGS\": \"Augusta Springs\"\n}, {\n  \"BLUEGRASS\": \"Blue Grass\"\n}, {\n  \"CLIFTONFORGE\": \"Clifton Forge\"\n}, {\n  \"DOEHILL\": \"Doe Hill\"\n}, {\n  \"FORTDEFIANCE\": \"Fort Defiance\"\n}, {\n  \"GLENWILTON\": \"Glen Wilton\"\n}, {\n  \"HEADWATERS\": \"Head Waters\"\n}, {\n  \"HOTSPRINGS\": \"Hot Springs\"\n}, {\n  \"IRONGATE\": \"Iron Gate\"\n}, {\n  \"LOWMOOR\": \"Low Moor\"\n}, {\n  \"MCDOWELL\": \"Mc Dowell\"\n}, {\n  \"MINTSPRING\": \"Mint Spring\"\n}, {\n  \"MOUNTSIDNEY\": \"Mount Sidney\"\n}, {\n  \"ROCKBRIDGEBATHS\": \"Rockbridge Baths\"\n}, {\n  \"STEELESTAVERN\": \"Steeles Tavern\"\n}, {\n  \"STUARTSDRAFT\": \"Stuarts Draft\"\n}, {\n  \"WARMSPRINGS\": \"Warm Springs\"\n}, {\n  \"WESTAUGUSTA\": \"West Augusta\"\n}, {\n  \"WEYERSCAVE\": \"Weyers Cave\"\n}, {\n  \"BIGISLAND\": \"Big Island\"\n}, {\n  \"BUFFALOJUNCTION\": \"Buffalo Junction\"\n}, {\n  \"CLUSTERSPRINGS\": \"Cluster Springs\"\n}, {\n  \"COLEMANFALLS\": \"Coleman Falls\"\n}, {\n  \"CRYSTALHILL\": \"Crystal Hill\"\n}, {\n  \"DRYFORK\": \"Dry Fork\"\n}, {\n  \"LYNCHSTATION\": \"Lynch Station\"\n}, {\n  \"MADISONHEIGHTS\": \"Madison Heights\"\n}, {\n  \"NATURALBRIDGESTATION\": \"Natural Bridge Station\"\n}, {\n  \"REPUBLICANGROVE\": \"Republican Grove\"\n}, {\n  \"SOUTHBOSTON\": \"South Boston\"\n}, {\n  \"SPOUTSPRING\": \"Spout Spring\"\n}, {\n  \"SWEETBRIAR\": \"Sweet Briar\"\n}, {\n  \"VERNONHILL\": \"Vernon Hill\"\n}, {\n  \"BIGROCK\": \"Big Rock\"\n}, {\n  \"BURKESGARDEN\": \"Burkes Garden\"\n}, {\n  \"CEDARBLUFF\": \"Cedar Bluff\"\n}, {\n  \"FALLSMILLS\": \"Falls Mills\"\n}, {\n  \"JEWELLRIDGE\": \"Jewell Ridge\"\n}, {\n  \"KEENMOUNTAIN\": \"Keen Mountain\"\n}, {\n  \"NORTHTAZEWELL\": \"North Tazewell\"\n}, {\n  \"PILGRIMSKNOB\": \"Pilgrims Knob\"\n}, {\n  \"POUNDINGMILL\": \"Pounding Mill\"\n}, {\n  \"REDASH\": \"Red Ash\"\n}, {\n  \"SHORTTGAP\": \"Shortt Gap\"\n}, {\n  \"SWORDSCREEK\": \"Swords Creek\"\n}, {\n  \"BIGSANDY\": \"Big Sandy\"\n}, {\n  \"CLEARFORK\": \"Clear Fork\"\n}, {\n  \"COALMOUNTAIN\": \"Coal Mountain\"\n}, {\n  \"IKESFORK\": \"Ikes Fork\"\n}, {\n  \"NEWRICHMOND\": \"New Richmond\"\n}, {\n  \"NORTHSPRING\": \"North Spring\"\n}, {\n  \"ROCKVIEW\": \"Rock View\"\n}, {\n  \"TWINBRANCH\": \"Twin Branch\"\n}, {\n  \"WOLFPEN\": \"Wolf Pen\"\n}, {\n  \"FORTSPRING\": \"Fort Spring\"\n}, {\n  \"GAPMILLS\": \"Gap Mills\"\n}, {\n  \"GRASSYMEADOWS\": \"Grassy Meadows\"\n}, {\n  \"GREENBANK\": \"Green Bank\"\n}, {\n  \"MEADOWBLUFF\": \"Meadow Bluff\"\n}, {\n  \"PENCESPRINGS\": \"Pence Springs\"\n}, {\n  \"SINKSGROVE\": \"Sinks Grove\"\n}, {\n  \"ALUMCREEK\": \"Alum Creek\"\n}, {\n  \"BALDKNOB\": \"Bald Knob\"\n}, {\n  \"BLUECREEK\": \"Blue Creek\"\n}, {\n  \"BOBWHITE\": \"Bob White\"\n}, {\n  \"CABINCREEK\": \"Cabin Creek\"\n}, {\n  \"CHARLTONHEIGHTS\": \"Charlton Heights\"\n}, {\n  \"CLEARCREEK\": \"Clear Creek\"\n}, {\n  \"DEEPWATER\": \"Deep Water\"\n}, {\n  \"DRYCREEK\": \"Dry Creek\"\n}, {\n  \"EASTBANK\": \"East Bank\"\n}, {\n  \"FALLINGROCK\": \"Falling Rock\"\n}, {\n  \"FRAZIERSBOTTOM\": \"Fraziers Bottom\"\n}, {\n  \"GAULEYBRIDGE\": \"Gauley Bridge\"\n}, {\n  \"GLENFERRIS\": \"Glen Ferris\"\n}, {\n  \"GRIMMSLANDING\": \"Grimms Landing\"\n}, {\n  \"KANAWHAFALLS\": \"Kanawha Falls\"\n}, {\n  \"MOUNTCARBON\": \"Mount Carbon\"\n}, {\n  \"PONDGAP\": \"Pond Gap\"\n}, {\n  \"ROCKCREEK\": \"Rock Creek\"\n}, {\n  \"MOUNTOLIVE\": \"Mount Olive\"\n}, {\n  \"LEFTHAND\": \"Left Hand\"\n}, {\n  \"MOUNTALTO\": \"Mount Alto\"\n}, {\n  \"STATTSMILLS\": \"Statts Mills\"\n}, {\n  \"VALLEYFORK\": \"Valley Fork\"\n}, {\n  \"WESTCOLUMBIA\": \"West Columbia\"\n}, {\n  \"BERKELEYSPRINGS\": \"Berkeley Springs\"\n}, {\n  \"BUNKERHILL\": \"Bunker Hill\"\n}, {\n  \"CHARLESTOWN\": \"Charles Town\"\n}, {\n  \"FALLINGWATERS\": \"Falling Waters\"\n}, {\n  \"GREATCACAPON\": \"Great Cacapon\"\n}, {\n  \"HARPERSFERRY\": \"Harpers Ferry\"\n}, {\n  \"PAWPAW\": \"Paw Paw\"\n}, {\n  \"SHENANDOAHJUNCTION\": \"Shenandoah Junction\"\n}, {\n  \"SUMMITPOINT\": \"Summit Point\"\n}, {\n  \"APPLEGROVE\": \"Apple Grove\"\n}, {\n  \"BIGCREEK\": \"Big Creek\"\n}, {\n  \"EASTLYNN\": \"East Lynn\"\n}, {\n  \"FORTGAY\": \"Fort Gay\"\n}, {\n  \"GALLIPOLISFERRY\": \"Gallipolis Ferry\"\n}, {\n  \"PECKSMILL\": \"Pecks Mill\"\n}, {\n  \"SALTROCK\": \"Salt Rock\"\n}, {\n  \"SCOTTDEPOT\": \"Scott Depot\"\n}, {\n  \"WESTHAMLIN\": \"West Hamlin\"\n}, {\n  \"MOUNTGAY\": \"Mount Gay\"\n}, {\n  \"PEACHCREEK\": \"Peach Creek\"\n}, {\n  \"SARAHANN\": \"Sarah Ann\"\n}, {\n  \"NORTHMATEWAN\": \"North Matewan\"\n}, {\n  \"REDJACKET\": \"Red Jacket\"\n}, {\n  \"ALLENJUNCTION\": \"Allen Junction\"\n}, {\n  \"BLUEJAY\": \"Blue Jay\"\n}, {\n  \"CAMPCREEK\": \"Camp Creek\"\n}, {\n  \"COALCITY\": \"Coal City\"\n}, {\n  \"COOLRIDGE\": \"Cool Ridge\"\n}, {\n  \"CRABORCHARD\": \"Crab Orchard\"\n}, {\n  \"FLATTOP\": \"Flat Top\"\n}, {\n  \"GLENDANIEL\": \"Glen Daniel\"\n}, {\n  \"GLENFORK\": \"Glen Fork\"\n}, {\n  \"GLENJEAN\": \"Glen Jean\"\n}, {\n  \"GLENMORGAN\": \"Glen Morgan\"\n}, {\n  \"GLENROGERS\": \"Glen Rogers\"\n}, {\n  \"GLENWHITE\": \"Glen White\"\n}, {\n  \"MACARTHUR\": \"Mac Arthur\"\n}, {\n  \"MCGRAWS\": \"Mc Graws\"\n}, {\n  \"MOUNTHOPE\": \"Mount Hope\"\n}, {\n  \"PINEYVIEW\": \"Piney View\"\n}, {\n  \"SHADYSPRING\": \"Shady Spring\"\n}, {\n  \"SLABFORK\": \"Slab Fork\"\n}, {\n  \"GREENSULPHURSPRINGS\": \"Green Sulphur Springs\"\n}, {\n  \"JUMPINGBRANCH\": \"Jumping Branch\"\n}, {\n  \"MEADOWBRIDGE\": \"Meadow Bridge\"\n}, {\n  \"MEADOWCREEK\": \"Meadow Creek\"\n}, {\n  \"SPRINGDALE\": \"Spring Dale\"\n}, {\n  \"WHITEOAK\": \"White Oak\"\n}, {\n  \"BEECHBOTTOM\": \"Beech Bottom\"\n}, {\n  \"GLENDALE\": \"Glen Dale\"\n}, {\n  \"GLENEASTON\": \"Glen Easton\"\n}, {\n  \"MCMECHEN\": \"Mc Mechen\"\n}, {\n  \"NEWMANCHESTER\": \"New Manchester\"\n}, {\n  \"SHORTCREEK\": \"Short Creek\"\n}, {\n  \"VALLEYGROVE\": \"Valley Grove\"\n}, {\n  \"WESTLIBERTY\": \"West Liberty\"\n}, {\n  \"WINDSORHEIGHTS\": \"Windsor Heights\"\n}, {\n  \"MINERALWELLS\": \"Mineral Wells\"\n}, {\n  \"BENSRUN\": \"Bens Run\"\n}, {\n  \"BIGBEND\": \"Big Bend\"\n}, {\n  \"BIGSPRINGS\": \"Big Springs\"\n}, {\n  \"MOUNTZION\": \"Mount Zion\"\n}, {\n  \"NEWMARTINSVILLE\": \"New Martinsville\"\n}, {\n  \"PADENCITY\": \"Paden City\"\n}, {\n  \"PORTERSFALLS\": \"Porters Falls\"\n}, {\n  \"CAMDENONGAULEY\": \"Camden On Gauley\"\n}, {\n  \"FRENCHCREEK\": \"French Creek\"\n}, {\n  \"HACKERVALLEY\": \"Hacker Valley\"\n}, {\n  \"KANAWHAHEAD\": \"Kanawha Head\"\n}, {\n  \"ROCKCAVE\": \"Rock Cave\"\n}, {\n  \"WEBSTERSPRINGS\": \"Webster Springs\"\n}, {\n  \"VALLEYBEND\": \"Valley Bend\"\n}, {\n  \"VALLEYHEAD\": \"Valley Head\"\n}, {\n  \"ALUMBRIDGE\": \"Alum Bridge\"\n}, {\n  \"CENTERPOINT\": \"Center Point\"\n}, {\n  \"COXSMILLS\": \"Coxs Mills\"\n}, {\n  \"JANELEW\": \"Jane Lew\"\n}, {\n  \"MOUNTCLARE\": \"Mount Clare\"\n}, {\n  \"NEWMILTON\": \"New Milton\"\n}, {\n  \"SANDFORK\": \"Sand Fork\"\n}, {\n  \"WESTUNION\": \"West Union\"\n}, {\n  \"BRUCETONMILLS\": \"Bruceton Mills\"\n}, {\n  \"FOURSTATES\": \"Four States\"\n}, {\n  \"GRANTTOWN\": \"Grant Town\"\n}, {\n  \"MONTANAMINES\": \"Montana Mines\"\n}, {\n  \"BIRCHRIVER\": \"Birch River\"\n}, {\n  \"LITTLEBIRCH\": \"Little Birch\"\n}, {\n  \"STRANGECREEK\": \"Strange Creek\"\n}, {\n  \"KESLERSCROSSLANES\": \"Keslers Cross Lanes\"\n}, {\n  \"MOUNTLOOKOUT\": \"Mount Lookout\"\n}, {\n  \"MOUNTNEBO\": \"Mount Nebo\"\n}, {\n  \"CAPONBRIDGE\": \"Capon Bridge\"\n}, {\n  \"ELKGARDEN\": \"Elk Garden\"\n}, {\n  \"FORTASHBY\": \"Fort Ashby\"\n}, {\n  \"GREENSPRING\": \"Green Spring\"\n}, {\n  \"MOUNTSTORM\": \"Mount Storm\"\n}, {\n  \"NEWCREEK\": \"New Creek\"\n}, {\n  \"TERRAALTA\": \"Terra Alta\"\n}, {\n  \"WILEYFORD\": \"Wiley Ford\"\n}, {\n  \"HIGHVIEW\": \"High View\"\n}, {\n  \"LOSTCITY\": \"Lost City\"\n}, {\n  \"CAPONSPRINGS\": \"Capon Springs\"\n}, {\n  \"OLDFIELDS\": \"Old Fields\"\n}, {\n  \"YELLOWSPRING\": \"Yellow Spring\"\n}, {\n  \"UPPERTRACT\": \"Upper Tract\"\n}, {\n  \"SENECAROCKS\": \"Seneca Rocks\"\n}, {\n  \"BELEWSCREEK\": \"Belews Creek\"\n}, {\n  \"EASTBEND\": \"East Bend\"\n}, {\n  \"PILOTMOUNTAIN\": \"Pilot Mountain\"\n}, {\n  \"PINEHALL\": \"Pine Hall\"\n}, {\n  \"RURALHALL\": \"Rural Hall\"\n}, {\n  \"WALNUTCOVE\": \"Walnut Cove\"\n}, {\n  \"WINSTONSALEM\": \"Winston Salem\"\n}, {\n  \"BROWNSSUMMIT\": \"Browns Summit\"\n}, {\n  \"CEDARFALLS\": \"Cedar Falls\"\n}, {\n  \"EAGLESPRINGS\": \"Eagle Springs\"\n}, {\n  \"ELONCOLLEGE\": \"Elon College\"\n}, {\n  \"HAWRIVER\": \"Haw River\"\n}, {\n  \"HIGHPOINT\": \"High Point\"\n}, {\n  \"JACKSONSPRINGS\": \"Jackson Springs\"\n}, {\n  \"MCLEANSVILLE\": \"Mc Leansville\"\n}, {\n  \"MOUNTGILEAD\": \"Mount Gilead\"\n}, {\n  \"PLEASANTGARDEN\": \"Pleasant Garden\"\n}, {\n  \"PROSPECTHILL\": \"Prospect Hill\"\n}, {\n  \"SILERCITY\": \"Siler City\"\n}, {\n  \"SNOWCAMP\": \"Snow Camp\"\n}, {\n  \"WESTEND\": \"West End\"\n}, {\n  \"BUIESCREEK\": \"Buies Creek\"\n}, {\n  \"CHAPELHILL\": \"Chapel Hill\"\n}, {\n  \"FOUROAKS\": \"Four Oaks\"\n}, {\n  \"FUQUAYVARINA\": \"Fuquay Varina\"\n}, {\n  \"HOLLYSPRINGS\": \"Holly Springs\"\n}, {\n  \"HURDLEMILLS\": \"Hurdle Mills\"\n}, {\n  \"NEWHILL\": \"New Hill\"\n}, {\n  \"PINELEVEL\": \"Pine Level\"\n}, {\n  \"WAKEFOREST\": \"Wake Forest\"\n}, {\n  \"WILLOWSPRING\": \"Willow Spring\"\n}, {\n  \"WILSONSMILLS\": \"Wilsons Mills\"\n}, {\n  \"BLOUNTSCREEK\": \"Blounts Creek\"\n}, {\n  \"ELMCITY\": \"Elm City\"\n}, {\n  \"LEWISTONWOODVILLE\": \"Lewiston Woodville\"\n}, {\n  \"OAKCITY\": \"Oak City\"\n}, {\n  \"PLEASANTHILL\": \"Pleasant Hill\"\n}, {\n  \"RICHSQUARE\": \"Rich Square\"\n}, {\n  \"ROANOKERAPIDS\": \"Roanoke Rapids\"\n}, {\n  \"SCOTLANDNECK\": \"Scotland Neck\"\n}, {\n  \"SPRINGHOPE\": \"Spring Hope\"\n}, {\n  \"ELIZABETHCITY\": \"Elizabeth City\"\n}, {\n  \"DURANTSNECK\": \"Durants Neck\"\n}, {\n  \"KILLDEVILHILLS\": \"Kill Devil Hills\"\n}, {\n  \"KITTYHAWK\": \"Kitty Hawk\"\n}, {\n  \"KNOTTSISLAND\": \"Knotts Island\"\n}, {\n  \"MANNSHARBOR\": \"Manns Harbor\"\n}, {\n  \"MERRYHILL\": \"Merry Hill\"\n}, {\n  \"NAGSHEAD\": \"Nags Head\"\n}, {\n  \"POINTHARBOR\": \"Point Harbor\"\n}, {\n  \"POPLARBRANCH\": \"Poplar Branch\"\n}, {\n  \"POWELLSPOINT\": \"Powells Point\"\n}, {\n  \"SOUTHMILLS\": \"South Mills\"\n}, {\n  \"STUMPYPOINT\": \"Stumpy Point\"\n}, {\n  \"BARIUMSPRINGS\": \"Barium Springs\"\n}, {\n  \"BESSEMERCITY\": \"Bessemer City\"\n}, {\n  \"CHINAGROVE\": \"China Grove\"\n}, {\n  \"EASTSPENCER\": \"East Spencer\"\n}, {\n  \"GOLDHILL\": \"Gold Hill\"\n}, {\n  \"GRANITEQUARRY\": \"Granite Quarry\"\n}, {\n  \"HIGHSHOALS\": \"High Shoals\"\n}, {\n  \"INDIANTRAIL\": \"Indian Trail\"\n}, {\n  \"IRONSTATION\": \"Iron Station\"\n}, {\n  \"KINGSMOUNTAIN\": \"Kings Mountain\"\n}, {\n  \"MCADENVILLE\": \"Mc Adenville\"\n}, {\n  \"MCFARLAN\": \"Mc Farlan\"\n}, {\n  \"MOUNTMOURNE\": \"Mount Mourne\"\n}, {\n  \"MOUNTULLA\": \"Mount Ulla\"\n}, {\n  \"PAWCREEK\": \"Paw Creek\"\n}, {\n  \"UNIONMILLS\": \"Union Mills\"\n}, {\n  \"FORTBRAGG\": \"Fort Bragg\"\n}, {\n  \"POPEAFB\": \"Pope A F B\"\n}, {\n  \"HOPEMILLS\": \"Hope Mills\"\n}, {\n  \"LAURELHILL\": \"Laurel Hill\"\n}, {\n  \"LEMONSPRINGS\": \"Lemon Springs\"\n}, {\n  \"LUMBERBRIDGE\": \"Lumber Bridge\"\n}, {\n  \"NEWTONGROVE\": \"Newton Grove\"\n}, {\n  \"REDSPRINGS\": \"Red Springs\"\n}, {\n  \"SAINTPAULS\": \"Saint Pauls\"\n}, {\n  \"SOUTHERNPINES\": \"Southern Pines\"\n}, {\n  \"TARHEEL\": \"Tar Heel\"\n}, {\n  \"CAROLINABEACH\": \"Carolina Beach\"\n}, {\n  \"CASTLEHAYNE\": \"Castle Hayne\"\n}, {\n  \"CERROGORDO\": \"Cerro Gordo\"\n}, {\n  \"FAIRBLUFF\": \"Fair Bluff\"\n}, {\n  \"HOLLYRIDGE\": \"Holly Ridge\"\n}, {\n  \"KUREBEACH\": \"Kure Beach\"\n}, {\n  \"LAKEWACCAMAW\": \"Lake Waccamaw\"\n}, {\n  \"MAPLEHILL\": \"Maple Hill\"\n}, {\n  \"SNEADSFERRY\": \"Sneads Ferry\"\n}, {\n  \"TABORCITY\": \"Tabor City\"\n}, {\n  \"OAKISLAND\": \"Oak Island\"\n}, {\n  \"SUNSETBEACH\": \"Sunset Beach\"\n}, {\n  \"OCEANISLEBEACH\": \"Ocean Isle Beach\"\n}, {\n  \"WRIGHTSVILLEBEACH\": \"Wrightsville Beach\"\n}, {\n  \"CEDARISLAND\": \"Cedar Island\"\n}, {\n  \"COVECITY\": \"Cove City\"\n}, {\n  \"DEEPRUN\": \"Deep Run\"\n}, {\n  \"HARKERSISLAND\": \"Harkers Island\"\n}, {\n  \"CHERRYPOINT\": \"Cherry Point\"\n}, {\n  \"CAMPLEJEUNE\": \"Camp Lejeune\"\n}, {\n  \"TARAWATERRACE\": \"Tarawa Terrace\"\n}, {\n  \"MIDWAYPARK\": \"Midway Park\"\n}, {\n  \"MCCUTCHEONFIELD\": \"Mccutcheon Field\"\n}, {\n  \"LAGRANGE\": \"La Grange\"\n}, {\n  \"MOREHEADCITY\": \"Morehead City\"\n}, {\n  \"NEWBERN\": \"New Bern\"\n}, {\n  \"PINKHILL\": \"Pink Hill\"\n}, {\n  \"SALTERPATH\": \"Salter Path\"\n}, {\n  \"SEVENSPRINGS\": \"Seven Springs\"\n}, {\n  \"EMERALDISLE\": \"Emerald Isle\"\n}, {\n  \"BANNERELK\": \"Banner Elk\"\n}, {\n  \"BLOWINGROCK\": \"Blowing Rock\"\n}, {\n  \"CONNELLYSSPRINGS\": \"Connellys Springs\"\n}, {\n  \"DEEPGAP\": \"Deep Gap\"\n}, {\n  \"ELKPARK\": \"Elk Park\"\n}, {\n  \"GLADEVALLEY\": \"Glade Valley\"\n}, {\n  \"GLENALPINE\": \"Glen Alpine\"\n}, {\n  \"GLENDALESPRINGS\": \"Glendale Springs\"\n}, {\n  \"GRANITEFALLS\": \"Granite Falls\"\n}, {\n  \"GRASSYCREEK\": \"Grassy Creek\"\n}, {\n  \"JONASRIDGE\": \"Jonas Ridge\"\n}, {\n  \"LAURELSPRINGS\": \"Laurel Springs\"\n}, {\n  \"LINVILLEFALLS\": \"Linville Falls\"\n}, {\n  \"MCGRADY\": \"Mc Grady\"\n}, {\n  \"MILLERSCREEK\": \"Millers Creek\"\n}, {\n  \"MORAVIANFALLS\": \"Moravian Falls\"\n}, {\n  \"NORTHWILKESBORO\": \"North Wilkesboro\"\n}, {\n  \"PINEYCREEK\": \"Piney Creek\"\n}, {\n  \"ROARINGGAP\": \"Roaring Gap\"\n}, {\n  \"ROARINGRIVER\": \"Roaring River\"\n}, {\n  \"RUTHERFORDCOLLEGE\": \"Rutherford College\"\n}, {\n  \"SHERRILLSFORD\": \"Sherrills Ford\"\n}, {\n  \"STATEROAD\": \"State Road\"\n}, {\n  \"UNIONGROVE\": \"Union Grove\"\n}, {\n  \"VALLECRUCIS\": \"Valle Crucis\"\n}, {\n  \"WESTJEFFERSON\": \"West Jefferson\"\n}, {\n  \"BALSAMGROVE\": \"Balsam Grove\"\n}, {\n  \"BATCAVE\": \"Bat Cave\"\n}, {\n  \"BLACKMOUNTAIN\": \"Black Mountain\"\n}, {\n  \"BRYSONCITY\": \"Bryson City\"\n}, {\n  \"CEDARMOUNTAIN\": \"Cedar Mountain\"\n}, {\n  \"CHIMNEYROCK\": \"Chimney Rock\"\n}, {\n  \"EASTFLATROCK\": \"East Flat Rock\"\n}, {\n  \"FLATROCK\": \"Flat Rock\"\n}, {\n  \"FONTANADAM\": \"Fontana Dam\"\n}, {\n  \"GREENMOUNTAIN\": \"Green Mountain\"\n}, {\n  \"HORSESHOE\": \"Horse Shoe\"\n}, {\n  \"LAKEJUNALUSKA\": \"Lake Junaluska\"\n}, {\n  \"LAKELURE\": \"Lake Lure\"\n}, {\n  \"LAKETOXAWAY\": \"Lake Toxaway\"\n}, {\n  \"LITTLESWITZERLAND\": \"Little Switzerland\"\n}, {\n  \"MAGGIEVALLEY\": \"Maggie Valley\"\n}, {\n  \"MILLSPRING\": \"Mill Spring\"\n}, {\n  \"MOUNTAINHOME\": \"Mountain Home\"\n}, {\n  \"OLDFORT\": \"Old Fort\"\n}, {\n  \"PISGAHFOREST\": \"Pisgah Forest\"\n}, {\n  \"SCALYMOUNTAIN\": \"Scaly Mountain\"\n}, {\n  \"SPRUCEPINE\": \"Spruce Pine\"\n}, {\n  \"DAVISSTATION\": \"Davis Station\"\n}, {\n  \"HEATHSPRINGS\": \"Heath Springs\"\n}, {\n  \"HOLLYHILL\": \"Holly Hill\"\n}, {\n  \"LIBERTYHILL\": \"Liberty Hill\"\n}, {\n  \"LITTLEMOUNTAIN\": \"Little Mountain\"\n}, {\n  \"MCBEE\": \"Mc Bee\"\n}, {\n  \"NEWZION\": \"New Zion\"\n}, {\n  \"RIDGESPRING\": \"Ridge Spring\"\n}, {\n  \"SAINTMATTHEWS\": \"Saint Matthews\"\n}, {\n  \"STATEPARK\": \"State Park\"\n}, {\n  \"SHAWAFB\": \"Shaw A F B\"\n}, {\n  \"WHITEROCK\": \"White Rock\"\n}, {\n  \"CROSSANCHOR\": \"Cross Anchor\"\n}, {\n  \"CROSSHILL\": \"Cross Hill\"\n}, {\n  \"PACOLETMILLS\": \"Pacolet Mills\"\n}, {\n  \"CHARLESTONAFB\": \"Charleston Afb\"\n}, {\n  \"NORTHCHARLESTON\": \"North Charleston\"\n}, {\n  \"ADAMSRUN\": \"Adams Run\"\n}, {\n  \"EDISTOISLAND\": \"Edisto Island\"\n}, {\n  \"FOLLYBEACH\": \"Folly Beach\"\n}, {\n  \"GOOSECREEK\": \"Goose Creek\"\n}, {\n  \"GREENPOND\": \"Green Pond\"\n}, {\n  \"ISLEOFPALMS\": \"Isle Of Palms\"\n}, {\n  \"JOHNSISLAND\": \"Johns Island\"\n}, {\n  \"MCCLELLANVILLE\": \"Mc Clellanville\"\n}, {\n  \"MONCKSCORNER\": \"Moncks Corner\"\n}, {\n  \"ROUNDO\": \"Round O\"\n}, {\n  \"SAINTSTEPHEN\": \"Saint Stephen\"\n}, {\n  \"SULLIVANSISLAND\": \"Sullivans Island\"\n}, {\n  \"WADMALAWISLAND\": \"Wadmalaw Island\"\n}, {\n  \"FLOYDDALE\": \"Floyd Dale\"\n}, {\n  \"GALIVANTSFERRY\": \"Galivants Ferry\"\n}, {\n  \"GREENSEA\": \"Green Sea\"\n}, {\n  \"LITTLERIVER\": \"Little River\"\n}, {\n  \"LITTLEROCK\": \"Little Rock\"\n}, {\n  \"MCCOLL\": \"Mc Coll\"\n}, {\n  \"MYRTLEBEACH\": \"Myrtle Beach\"\n}, {\n  \"MURRELLSINLET\": \"Murrells Inlet\"\n}, {\n  \"NORTHMYRTLEBEACH\": \"North Myrtle Beach\"\n}, {\n  \"PAWLEYSISLAND\": \"Pawleys Island\"\n}, {\n  \"SOCIETYHILL\": \"Society Hill\"\n}, {\n  \"CALHOUNFALLS\": \"Calhoun Falls\"\n}, {\n  \"DUEWEST\": \"Due West\"\n}, {\n  \"FAIRPLAY\": \"Fair Play\"\n}, {\n  \"FOUNTAININN\": \"Fountain Inn\"\n}, {\n  \"GRAYCOURT\": \"Gray Court\"\n}, {\n  \"HONEAPATH\": \"Honea Path\"\n}, {\n  \"LAFRANCE\": \"La France\"\n}, {\n  \"LONGCREEK\": \"Long Creek\"\n}, {\n  \"MOUNTAINREST\": \"Mountain Rest\"\n}, {\n  \"NINETYSIX\": \"Ninety Six\"\n}, {\n  \"SANDYSPRINGS\": \"Sandy Springs\"\n}, {\n  \"SIXMILE\": \"Six Mile\"\n}, {\n  \"TRAVELERSREST\": \"Travelers Rest\"\n}, {\n  \"WARESHOALS\": \"Ware Shoals\"\n}, {\n  \"FORTMILL\": \"Fort Mill\"\n}, {\n  \"FORTLAWN\": \"Fort Lawn\"\n}, {\n  \"HICKORYGROVE\": \"Hickory Grove\"\n}, {\n  \"MCCONNELLS\": \"Mc Connells\"\n}, {\n  \"MOUNTCROGHAN\": \"Mount Croghan\"\n}, {\n  \"VANWYCK\": \"Van Wyck\"\n}, {\n  \"NEWELLENTON\": \"New Ellenton\"\n}, {\n  \"CLARKSHILL\": \"Clarks Hill\"\n}, {\n  \"MCCORMICK\": \"Mc Cormick\"\n}, {\n  \"NORTHAUGUSTA\": \"North Augusta\"\n}, {\n  \"BEECHISLAND\": \"Beech Island\"\n}, {\n  \"PLUMBRANCH\": \"Plum Branch\"\n}, {\n  \"DAUFUSKIEISLAND\": \"Daufuskie Island\"\n}, {\n  \"EARLYBRANCH\": \"Early Branch\"\n}, {\n  \"SAINTHELENAISLAND\": \"Saint Helena Island\"\n}, {\n  \"HILTONHEADISLAND\": \"Hilton Head Island\"\n}, {\n  \"AVONDALEESTATES\": \"Avondale Estates\"\n}, {\n  \"SOCIALCIRCLE\": \"Social Circle\"\n}, {\n  \"NORTHMETRO\": \"North Metro\"\n}, {\n  \"PINELAKE\": \"Pine Lake\"\n}, {\n  \"STONEMOUNTAIN\": \"Stone Mountain\"\n}, {\n  \"BALLGROUND\": \"Ball Ground\"\n}, {\n  \"BOWDONJUNCTION\": \"Bowdon Junction\"\n}, {\n  \"LITHIASPRINGS\": \"Lithia Springs\"\n}, {\n  \"CAVESPRING\": \"Cave Spring\"\n}, {\n  \"POWDERSPRINGS\": \"Powder Springs\"\n}, {\n  \"ESOMHILL\": \"Esom Hill\"\n}, {\n  \"MARBLEHILL\": \"Marble Hill\"\n}, {\n  \"MOUNTBERRY\": \"Mount Berry\"\n}, {\n  \"TALKINGROCK\": \"Talking Rock\"\n}, {\n  \"VILLARICA\": \"Villa Rica\"\n}, {\n  \"ORCHARDHILL\": \"Orchard Hill\"\n}, {\n  \"PEACHTREECITY\": \"Peachtree City\"\n}, {\n  \"SUNNYSIDE\": \"Sunny Side\"\n}, {\n  \"THEROCK\": \"The Rock\"\n}, {\n  \"FORESTPARK\": \"Forest Park\"\n}, {\n  \"ROCKYFORD\": \"Rocky Ford\"\n}, {\n  \"TWINCITY\": \"Twin City\"\n}, {\n  \"CHESTNUTMOUNTAIN\": \"Chestnut Mountain\"\n}, {\n  \"EASTELLIJAY\": \"East Ellijay\"\n}, {\n  \"FLOWERYBRANCH\": \"Flowery Branch\"\n}, {\n  \"MCCAYSVILLE\": \"Mc Caysville\"\n}, {\n  \"MINERALBLUFF\": \"Mineral Bluff\"\n}, {\n  \"MOUNTAINCITY\": \"Mountain City\"\n}, {\n  \"RABUNGAP\": \"Rabun Gap\"\n}, {\n  \"SAUTEENACOOCHEE\": \"Sautee Nacoochee\"\n}, {\n  \"TALLULAHFALLS\": \"Tallulah Falls\"\n}, {\n  \"YOUNGHARRIS\": \"Young Harris\"\n}, {\n  \"TOCCOAFALLS\": \"Toccoa Falls\"\n}, {\n  \"DEWYROSE\": \"Dewy Rose\"\n}, {\n  \"GOODHOPE\": \"Good Hope\"\n}, {\n  \"UNIONPOINT\": \"Union Point\"\n}, {\n  \"RISINGFAWN\": \"Rising Fawn\"\n}, {\n  \"ROCKSPRING\": \"Rock Spring\"\n}, {\n  \"ROCKYFACE\": \"Rocky Face\"\n}, {\n  \"FORTOGLETHORPE\": \"Fort Oglethorpe\"\n}, {\n  \"SUGARVALLEY\": \"Sugar Valley\"\n}, {\n  \"LOOKOUTMOUNTAIN\": \"Lookout Mountain\"\n}, {\n  \"TUNNELHILL\": \"Tunnel Hill\"\n}, {\n  \"DRYBRANCH\": \"Dry Branch\"\n}, {\n  \"MCRAE\": \"Mc Rae\"\n}, {\n  \"SHADYDALE\": \"Shady Dale\"\n}, {\n  \"WARNERROBINS\": \"Warner Robins\"\n}, {\n  \"FORTSTEWART\": \"Fort Stewart\"\n}, {\n  \"SAPELOISLAND\": \"Sapelo Island\"\n}, {\n  \"TYBEEISLAND\": \"Tybee Island\"\n}, {\n  \"SAINTSIMONSISLAND\": \"Saint Simons Island\"\n}, {\n  \"JEKYLLISLAND\": \"Jekyll Island\"\n}, {\n  \"KINGSBAY\": \"Kings Bay\"\n}, {\n  \"LUMBERCITY\": \"Lumber City\"\n}, {\n  \"SEAISLAND\": \"Sea Island\"\n}, {\n  \"WESTGREEN\": \"West Green\"\n}, {\n  \"DUPONT\": \"Du Pont\"\n}, {\n  \"LAKEPARK\": \"Lake Park\"\n}, {\n  \"RAYCITY\": \"Ray City\"\n}, {\n  \"CEDARSPRINGS\": \"Cedar Springs\"\n}, {\n  \"DESOTO\": \"De Soto\"\n}, {\n  \"FORTGAINES\": \"Fort Gaines\"\n}, {\n  \"IRONCITY\": \"Iron City\"\n}, {\n  \"NORMANPARK\": \"Norman Park\"\n}, {\n  \"SALECITY\": \"Sale City\"\n}, {\n  \"TYTY\": \"Ty Ty\"\n}, {\n  \"BOXSPRINGS\": \"Box Springs\"\n}, {\n  \"JUNCTIONCITY\": \"Junction City\"\n}, {\n  \"PINEMOUNTAIN\": \"Pine Mountain\"\n}, {\n  \"PINEMOUNTAINVALLEY\": \"Pine Mountain Valley\"\n}, {\n  \"WAVERLYHALL\": \"Waverly Hall\"\n}, {\n  \"FORTBENNING\": \"Fort Benning\"\n}, {\n  \"ORANGEPARK\": \"Orange Park\"\n}, {\n  \"PONTEVEDRABEACH\": \"Ponte Vedra Beach\"\n}, {\n  \"DOCTORSINLET\": \"Doctors Inlet\"\n}, {\n  \"FERNANDINABEACH\": \"Fernandina Beach\"\n}, {\n  \"FORTWHITE\": \"Fort White\"\n}, {\n  \"GLENSAINTMARY\": \"Glen Saint Mary\"\n}, {\n  \"GREENCOVESPRINGS\": \"Green Cove Springs\"\n}, {\n  \"LAKEBUTLER\": \"Lake Butler\"\n}, {\n  \"LIVEOAK\": \"Live Oak\"\n}, {\n  \"MCALPIN\": \"Mc Alpin\"\n}, {\n  \"OBRIEN\": \"O Brien\"\n}, {\n  \"PENNEYFARMS\": \"Penney Farms\"\n}, {\n  \"SAINTAUGUSTINE\": \"Saint Augustine\"\n}, {\n  \"WHITESPRINGS\": \"White Springs\"\n}, {\n  \"CRESCENTCITY\": \"Crescent City\"\n}, {\n  \"DAYTONABEACH\": \"Daytona Beach\"\n}, {\n  \"PORTORANGE\": \"Port Orange\"\n}, {\n  \"DELEONSPRINGS\": \"De Leon Springs\"\n}, {\n  \"EASTPALATKA\": \"East Palatka\"\n}, {\n  \"EASTLAKEWEIR\": \"Eastlake Weir\"\n}, {\n  \"FORTMCCOY\": \"Fort Mc Coy\"\n}, {\n  \"PALMCOAST\": \"Palm Coast\"\n}, {\n  \"FLAGLERBEACH\": \"Flagler Beach\"\n}, {\n  \"LADYLAKE\": \"Lady Lake\"\n}, {\n  \"LAKEGENEVA\": \"Lake Geneva\"\n}, {\n  \"NEWSMYRNABEACH\": \"New Smyrna Beach\"\n}, {\n  \"ORMONDBEACH\": \"Ormond Beach\"\n}, {\n  \"POMONAPARK\": \"Pomona Park\"\n}, {\n  \"ORANGESPRINGS\": \"Orange Springs\"\n}, {\n  \"PUTNAMHALL\": \"Putnam Hall\"\n}, {\n  \"SANMATEO\": \"San Mateo\"\n}, {\n  \"JACKSONVILLEBEACH\": \"Jacksonville Beach\"\n}, {\n  \"NEPTUNEBEACH\": \"Neptune Beach\"\n}, {\n  \"LANARKVILLAGE\": \"Lanark Village\"\n}, {\n  \"SAINTMARKS\": \"Saint Marks\"\n}, {\n  \"PANAMACITY\": \"Panama City\"\n}, {\n  \"PANAMACITYBEACH\": \"Panama City Beach\"\n}, {\n  \"MEXICOBEACH\": \"Mexico Beach\"\n}, {\n  \"DEFUNIAKSPRINGS\": \"Defuniak Springs\"\n}, {\n  \"MOSSYHEAD\": \"Mossy Head\"\n}, {\n  \"GRANDRIDGE\": \"Grand Ridge\"\n}, {\n  \"LYNNHAVEN\": \"Lynn Haven\"\n}, {\n  \"POINTWASHINGTON\": \"Point Washington\"\n}, {\n  \"PONCEDELEON\": \"Ponce De Leon\"\n}, {\n  \"PORTSAINTJOE\": \"Port Saint Joe\"\n}, {\n  \"SANTAROSABEACH\": \"Santa Rosa Beach\"\n}, {\n  \"ROSEMARYBCH\": \"Rosemary Bch\"\n}, {\n  \"EGLINAFB\": \"Eglin Afb\"\n}, {\n  \"HURLBURTFIELD\": \"Hurlburt Field\"\n}, {\n  \"FORTWALTONBEACH\": \"Fort Walton Beach\"\n}, {\n  \"GULFBREEZE\": \"Gulf Breeze\"\n}, {\n  \"MCDAVID\": \"Mc David\"\n}, {\n  \"MARYESTHER\": \"Mary Esther\"\n}, {\n  \"CEDARKEY\": \"Cedar Key\"\n}, {\n  \"CROSSCITY\": \"Cross City\"\n}, {\n  \"GULFHAMMOCK\": \"Gulf Hammock\"\n}, {\n  \"HIGHSPRINGS\": \"High Springs\"\n}, {\n  \"HORSESHOEBEACH\": \"Horseshoe Beach\"\n}, {\n  \"ISLANDGROVE\": \"Island Grove\"\n}, {\n  \"KEYSTONEHEIGHTS\": \"Keystone Heights\"\n}, {\n  \"MCINTOSH\": \"Mc Intosh\"\n}, {\n  \"ORANGELAKE\": \"Orange Lake\"\n}, {\n  \"WORTHINGTONSPRINGS\": \"Worthington Springs\"\n}, {\n  \"ALTAMONTESPRINGS\": \"Altamonte Springs\"\n}, {\n  \"WINTERSPRINGS\": \"Winter Springs\"\n}, {\n  \"LAKEHELEN\": \"Lake Helen\"\n}, {\n  \"LAKEMARY\": \"Lake Mary\"\n}, {\n  \"LAKEMONROE\": \"Lake Monroe\"\n}, {\n  \"MOUNTDORA\": \"Mount Dora\"\n}, {\n  \"ORANGECITY\": \"Orange City\"\n}, {\n  \"WINTERPARK\": \"Winter Park\"\n}, {\n  \"MIDFLORIDA\": \"Mid Florida\"\n}, {\n  \"PALMBAY\": \"Palm Bay\"\n}, {\n  \"CAPECANAVERAL\": \"Cape Canaveral\"\n}, {\n  \"PATRICKAFB\": \"Patrick Afb\"\n}, {\n  \"COCOABEACH\": \"Cocoa Beach\"\n}, {\n  \"SATELLITEBEACH\": \"Satellite Beach\"\n}, {\n  \"MELBOURNEBEACH\": \"Melbourne Beach\"\n}, {\n  \"MERRITTISLAND\": \"Merritt Island\"\n}, {\n  \"VEROBEACH\": \"Vero Beach\"\n}, {\n  \"WINTERBEACH\": \"Winter Beach\"\n}, {\n  \"LONGKEY\": \"Long Key\"\n}, {\n  \"KEYLARGO\": \"Key Largo\"\n}, {\n  \"KEYWEST\": \"Key West\"\n}, {\n  \"SUMMERLANDKEY\": \"Summerland Key\"\n}, {\n  \"BIGPINEKEY\": \"Big Pine Key\"\n}, {\n  \"SUGARLOAFSHORES\": \"Sugarloaf Shores\"\n}, {\n  \"KEYCOLONYBEACH\": \"Key Colony Beach\"\n}, {\n  \"MARATHONSHORES\": \"Marathon Shores\"\n}, {\n  \"OPALOCKA\": \"Opa Locka\"\n}, {\n  \"POMPANOBEACH\": \"Pompano Beach\"\n}, {\n  \"PEMBROKEPINES\": \"Pembroke Pines\"\n}, {\n  \"MIAMIBEACH\": \"Miami Beach\"\n}, {\n  \"KEYBISCAYNE\": \"Key Biscayne\"\n}, {\n  \"NORTHMIAMIBEACH\": \"North Miami Beach\"\n}, {\n  \"FORTLAUDERDALE\": \"Fort Lauderdale\"\n}, {\n  \"WESTPALMBEACH\": \"West Palm Beach\"\n}, {\n  \"NORTHPALMBEACH\": \"North Palm Beach\"\n}, {\n  \"BOYNTONBEACH\": \"Boynton Beach\"\n}, {\n  \"BOCARATON\": \"Boca Raton\"\n}, {\n  \"BELLEGLADE\": \"Belle Glade\"\n}, {\n  \"CANALPOINT\": \"Canal Point\"\n}, {\n  \"DEERFIELDBEACH\": \"Deerfield Beach\"\n}, {\n  \"DELRAYBEACH\": \"Delray Beach\"\n}, {\n  \"LAKEWORTH\": \"Lake Worth\"\n}, {\n  \"HOBESOUND\": \"Hobe Sound\"\n}, {\n  \"LAKEHARBOR\": \"Lake Harbor\"\n}, {\n  \"MOOREHAVEN\": \"Moore Haven\"\n}, {\n  \"PALMBEACH\": \"Palm Beach\"\n}, {\n  \"SOUTHBAY\": \"South Bay\"\n}, {\n  \"CENTERHILL\": \"Center Hill\"\n}, {\n  \"DADECITY\": \"Dade City\"\n}, {\n  \"CRYSTALSPRINGS\": \"Crystal Springs\"\n}, {\n  \"LAKEPANASOFFKEE\": \"Lake Panasoffkee\"\n}, {\n  \"PLANTCITY\": \"Plant City\"\n}, {\n  \"SUNCITYCENTER\": \"Sun City Center\"\n}, {\n  \"APOLLOBEACH\": \"Apollo Beach\"\n}, {\n  \"SAINTLEO\": \"Saint Leo\"\n}, {\n  \"SUNCITY\": \"Sun City\"\n}, {\n  \"BAYPINES\": \"Bay Pines\"\n}, {\n  \"CLEARWATERBEACH\": \"Clearwater Beach\"\n}, {\n  \"PINELLASPARK\": \"Pinellas Park\"\n}, {\n  \"INDIANROCKSBEACH\": \"Indian Rocks Beach\"\n}, {\n  \"BELLEAIRBEACH\": \"Belleair Beach\"\n}, {\n  \"AVONPARK\": \"Avon Park\"\n}, {\n  \"EATONPARK\": \"Eaton Park\"\n}, {\n  \"FORTMEADE\": \"Fort Meade\"\n}, {\n  \"HAINESCITY\": \"Haines City\"\n}, {\n  \"HIGHLANDCITY\": \"Highland City\"\n}, {\n  \"INTERCESSIONCITY\": \"Intercession City\"\n}, {\n  \"LAKEALFRED\": \"Lake Alfred\"\n}, {\n  \"LAKEHAMILTON\": \"Lake Hamilton\"\n}, {\n  \"LAKEWALES\": \"Lake Wales\"\n}, {\n  \"INDIANLAKEESTATES\": \"Indian Lake Estates\"\n}, {\n  \"RIVERRANCH\": \"River Ranch\"\n}, {\n  \"POLKCITY\": \"Polk City\"\n}, {\n  \"WINTERHAVEN\": \"Winter Haven\"\n}, {\n  \"ZOLFOSPRINGS\": \"Zolfo Springs\"\n}, {\n  \"FORTMYERS\": \"Fort Myers\"\n}, {\n  \"NORTHFORTMYERS\": \"North Fort Myers\"\n}, {\n  \"CAPECORAL\": \"Cape Coral\"\n}, {\n  \"BOCAGRANDE\": \"Boca Grande\"\n}, {\n  \"ELJOBEAN\": \"El Jobean\"\n}, {\n  \"FORTMYERSBEACH\": \"Fort Myers Beach\"\n}, {\n  \"LEHIGHACRES\": \"Lehigh Acres\"\n}, {\n  \"ROTONDAWEST\": \"Rotonda West\"\n}, {\n  \"PORTCHARLOTTE\": \"Port Charlotte\"\n}, {\n  \"PUNTAGORDA\": \"Punta Gorda\"\n}, {\n  \"SAINTJAMESCITY\": \"Saint James City\"\n}, {\n  \"VANDERBILTBEACH\": \"Vanderbilt Beach\"\n}, {\n  \"BONITASPRINGS\": \"Bonita Springs\"\n}, {\n  \"EVERGLADESCITY\": \"Everglades City\"\n}, {\n  \"MARCOISLAND\": \"Marco Island\"\n}, {\n  \"ANNAMARIA\": \"Anna Maria\"\n}, {\n  \"BRADENTONBEACH\": \"Bradenton Beach\"\n}, {\n  \"HOLMESBEACH\": \"Holmes Beach\"\n}, {\n  \"LONGBOATKEY\": \"Longboat Key\"\n}, {\n  \"TERRACEIA\": \"Terra Ceia\"\n}, {\n  \"MYAKKACITY\": \"Myakka City\"\n}, {\n  \"FORTOGDEN\": \"Fort Ogden\"\n}, {\n  \"NORTHPORT\": \"North Port\"\n}, {\n  \"CRYSTALRIVER\": \"Crystal River\"\n}, {\n  \"FLORALCITY\": \"Floral City\"\n}, {\n  \"HOMOSASSASPRINGS\": \"Homosassa Springs\"\n}, {\n  \"BEVERLYHILLS\": \"Beverly Hills\"\n}, {\n  \"SPRINGHILL\": \"Spring Hill\"\n}, {\n  \"LANDOLAKES\": \"Land O Lakes\"\n}, {\n  \"NEWPORTRICHEY\": \"New Port Richey\"\n}, {\n  \"PORTRICHEY\": \"Port Richey\"\n}, {\n  \"CRYSTALBEACH\": \"Crystal Beach\"\n}, {\n  \"PALMHARBOR\": \"Palm Harbor\"\n}, {\n  \"TARPONSPRINGS\": \"Tarpon Springs\"\n}, {\n  \"SAFETYHARBOR\": \"Safety Harbor\"\n}, {\n  \"FRUITLANDPARK\": \"Fruitland Park\"\n}, {\n  \"HOWEYINTHEHILLS\": \"Howey In The Hills\"\n}, {\n  \"SAINTCLOUD\": \"Saint Cloud\"\n}, {\n  \"WINTERGARDEN\": \"Winter Garden\"\n}, {\n  \"FORTPIERCE\": \"Fort Pierce\"\n}, {\n  \"PORTSAINTLUCIE\": \"Port Saint Lucie\"\n}, {\n  \"JENSENBEACH\": \"Jensen Beach\"\n}, {\n  \"PALMCITY\": \"Palm City\"\n}, {\n  \"PORTSALERNO\": \"Port Salerno\"\n}, {\n  \"ALEXANDERCITY\": \"Alexander City\"\n}, {\n  \"BONAIR\": \"Bon Air\"\n}, {\n  \"COOKSPRINGS\": \"Cook Springs\"\n}, {\n  \"CRANEHILL\": \"Crane Hill\"\n}, {\n  \"HOLLYPOND\": \"Holly Pond\"\n}, {\n  \"LOCUSTFORK\": \"Locust Fork\"\n}, {\n  \"MCCALLA\": \"Mc Calla\"\n}, {\n  \"PELLCITY\": \"Pell City\"\n}, {\n  \"PLEASANTGROVE\": \"Pleasant Grove\"\n}, {\n  \"WESTBLOCTON\": \"West Blocton\"\n}, {\n  \"MCSHAN\": \"Mc Shan\"\n}, {\n  \"WESTGREENE\": \"West Greene\"\n}, {\n  \"CARBONHILL\": \"Carbon Hill\"\n}, {\n  \"DOUBLESPRINGS\": \"Double Springs\"\n}, {\n  \"PHILCAMPBELL\": \"Phil Campbell\"\n}, {\n  \"REDBAY\": \"Red Bay\"\n}, {\n  \"BELLEMINA\": \"Belle Mina\"\n}, {\n  \"MUSCLESHOALS\": \"Muscle Shoals\"\n}, {\n  \"TOWNCREEK\": \"Town Creek\"\n}, {\n  \"HAZELGREEN\": \"Hazel Green\"\n}, {\n  \"LACEYSSPRING\": \"Laceys Spring\"\n}, {\n  \"OWENSCROSSROADS\": \"Owens Cross Roads\"\n}, {\n  \"PAINTROCK\": \"Paint Rock\"\n}, {\n  \"VALHERMOSOSPRINGS\": \"Valhermoso Springs\"\n}, {\n  \"RAINBOWCITY\": \"Rainbow City\"\n}, {\n  \"FORTPAYNE\": \"Fort Payne\"\n}, {\n  \"WALNUTGROVE\": \"Walnut Grove\"\n}, {\n  \"EASTTALLASSEE\": \"East Tallassee\"\n}, {\n  \"FORESTHOME\": \"Forest Home\"\n}, {\n  \"FORTDAVIS\": \"Fort Davis\"\n}, {\n  \"FORTDEPOSIT\": \"Fort Deposit\"\n}, {\n  \"HIGHLANDHOME\": \"Highland Home\"\n}, {\n  \"HOPEHULL\": \"Hope Hull\"\n}, {\n  \"MOUNTMEIGS\": \"Mount Meigs\"\n}, {\n  \"PIKEROAD\": \"Pike Road\"\n}, {\n  \"TUSKEGEEINSTITUTE\": \"Tuskegee Institute\"\n}, {\n  \"DEARMANVILLE\": \"De Armanville\"\n}, {\n  \"SPRINGGARDEN\": \"Spring Garden\"\n}, {\n  \"COFFEESPRINGS\": \"Coffee Springs\"\n}, {\n  \"MIDLANDCITY\": \"Midland City\"\n}, {\n  \"NEWBROCKTON\": \"New Brockton\"\n}, {\n  \"FORTRUCKER\": \"Fort Rucker\"\n}, {\n  \"BURNTCORN\": \"Burnt Corn\"\n}, {\n  \"FRISCOCITY\": \"Frisco City\"\n}, {\n  \"GROVEHILL\": \"Grove Hill\"\n}, {\n  \"MCKENZIE\": \"Mc Kenzie\"\n}, {\n  \"PERDUEHILL\": \"Perdue Hill\"\n}, {\n  \"REDLEVEL\": \"Red Level\"\n}, {\n  \"RIVERFALLS\": \"River Falls\"\n}, {\n  \"BAYMINETTE\": \"Bay Minette\"\n}, {\n  \"BAYOULABATRE\": \"Bayou La Batre\"\n}, {\n  \"BONSECOUR\": \"Bon Secour\"\n}, {\n  \"SPANISHFORT\": \"Spanish Fort\"\n}, {\n  \"DAUPHINISLAND\": \"Dauphin Island\"\n}, {\n  \"GRANDBAY\": \"Grand Bay\"\n}, {\n  \"GULFSHORES\": \"Gulf Shores\"\n}, {\n  \"MAGNOLIASPRINGS\": \"Magnolia Springs\"\n}, {\n  \"ORANGEBEACH\": \"Orange Beach\"\n}, {\n  \"POINTCLEAR\": \"Point Clear\"\n}, {\n  \"SAINTELMO\": \"Saint Elmo\"\n}, {\n  \"SAINTSTEPHENS\": \"Saint Stephens\"\n}, {\n  \"VINEGARBEND\": \"Vinegar Bend\"\n}, {\n  \"WALKERSPRINGS\": \"Walker Springs\"\n}, {\n  \"EIGHTMILE\": \"Eight Mile\"\n}, {\n  \"DIXONSMILLS\": \"Dixons Mills\"\n}, {\n  \"LOWERPEACHTREE\": \"Lower Peach Tree\"\n}, {\n  \"MCWILLIAMS\": \"Mc Williams\"\n}, {\n  \"MARIONJUNCTION\": \"Marion Junction\"\n}, {\n  \"PINEAPPLE\": \"Pine Apple\"\n}, {\n  \"SWEETWATER\": \"Sweet Water\"\n}, {\n  \"AUBURNUNIVERSITY\": \"Auburn University\"\n}, {\n  \"FIVEPOINTS\": \"Five Points\"\n}, {\n  \"HOLYTRINITY\": \"Holy Trinity\"\n}, {\n  \"JACKSONSGAP\": \"Jacksons Gap\"\n}, {\n  \"PHENIXCITY\": \"Phenix City\"\n}, {\n  \"ASHLANDCITY\": \"Ashland City\"\n}, {\n  \"BELLBUCKLE\": \"Bell Buckle\"\n}, {\n  \"BONAQUA\": \"Bon Aqua\"\n}, {\n  \"BUMPUSMILLS\": \"Bumpus Mills\"\n}, {\n  \"CASTALIANSPRINGS\": \"Castalian Springs\"\n}, {\n  \"CEDARHILL\": \"Cedar Hill\"\n}, {\n  \"COLLEGEGROVE\": \"College Grove\"\n}, {\n  \"CROSSPLAINS\": \"Cross Plains\"\n}, {\n  \"CUMBERLANDCITY\": \"Cumberland City\"\n}, {\n  \"CUMBERLANDFURNACE\": \"Cumberland Furnace\"\n}, {\n  \"DIXONSPRINGS\": \"Dixon Springs\"\n}, {\n  \"HURRICANEMILLS\": \"Hurricane Mills\"\n}, {\n  \"INDIANMOUND\": \"Indian Mound\"\n}, {\n  \"KINGSTONSPRINGS\": \"Kingston Springs\"\n}, {\n  \"LAVERGNE\": \"La Vergne\"\n}, {\n  \"MCEWEN\": \"Mc Ewen\"\n}, {\n  \"MCMINNVILLE\": \"Mc Minnville\"\n}, {\n  \"MOUNTJULIET\": \"Mount Juliet\"\n}, {\n  \"NEWJOHNSONVILLE\": \"New Johnsonville\"\n}, {\n  \"OLDHICKORY\": \"Old Hickory\"\n}, {\n  \"PLEASANTSHADE\": \"Pleasant Shade\"\n}, {\n  \"PLEASANTVIEW\": \"Pleasant View\"\n}, {\n  \"REDBOILINGSPRINGS\": \"Red Boiling Springs\"\n}, {\n  \"SAINTBETHLEHEM\": \"Saint Bethlehem\"\n}, {\n  \"TENNESSEERIDGE\": \"Tennessee Ridge\"\n}, {\n  \"THOMPSONSSTATION\": \"Thompsons Station\"\n}, {\n  \"WHITEBLUFF\": \"White Bluff\"\n}, {\n  \"WHITEHOUSE\": \"White House\"\n}, {\n  \"WHITESCREEK\": \"Whites Creek\"\n}, {\n  \"BEERSHEBASPRINGS\": \"Beersheba Springs\"\n}, {\n  \"ESTILLSPRINGS\": \"Estill Springs\"\n}, {\n  \"GRUETLILAAGER\": \"Gruetli Laager\"\n}, {\n  \"LUPTONCITY\": \"Lupton City\"\n}, {\n  \"SAINTANDREWS\": \"Saint Andrews\"\n}, {\n  \"SALECREEK\": \"Sale Creek\"\n}, {\n  \"SIGNALMOUNTAIN\": \"Signal Mountain\"\n}, {\n  \"SODDYDAISY\": \"Soddy Daisy\"\n}, {\n  \"SOUTHPITTSBURG\": \"South Pittsburg\"\n}, {\n  \"TELLICOPLAINS\": \"Tellico Plains\"\n}, {\n  \"TRACYCITY\": \"Tracy City\"\n}, {\n  \"ARNOLDAFB\": \"Arnold Afb\"\n}, {\n  \"WATTSBARDAM\": \"Watts Bar Dam\"\n}, {\n  \"BLUFFCITY\": \"Bluff City\"\n}, {\n  \"FALLBRANCH\": \"Fall Branch\"\n}, {\n  \"FLAGPOND\": \"Flag Pond\"\n}, {\n  \"LAURELBLOOMERY\": \"Laurel Bloomery\"\n}, {\n  \"MILLIGANCOLLEGE\": \"Milligan College\"\n}, {\n  \"PINEYFLATS\": \"Piney Flats\"\n}, {\n  \"ROANMOUNTAIN\": \"Roan Mountain\"\n}, {\n  \"SHADYVALLEY\": \"Shady Valley\"\n}, {\n  \"BEANSTATION\": \"Bean Station\"\n}, {\n  \"BULLSGAP\": \"Bulls Gap\"\n}, {\n  \"CUMBERLANDGAP\": \"Cumberland Gap\"\n}, {\n  \"DEERLODGE\": \"Deer Lodge\"\n}, {\n  \"DELRIO\": \"Del Rio\"\n}, {\n  \"JEFFERSONCITY\": \"Jefferson City\"\n}, {\n  \"KYLESFORD\": \"Kyles Ford\"\n}, {\n  \"LAFOLLETTE\": \"La Follette\"\n}, {\n  \"LENOIRCITY\": \"Lenoir City\"\n}, {\n  \"LONEMOUNTAIN\": \"Lone Mountain\"\n}, {\n  \"NEWTAZEWELL\": \"New Tazewell\"\n}, {\n  \"OLIVERSPRINGS\": \"Oliver Springs\"\n}, {\n  \"PIGEONFORGE\": \"Pigeon Forge\"\n}, {\n  \"SHARPSCHAPEL\": \"Sharps Chapel\"\n}, {\n  \"STRAWBERRYPLAINS\": \"Strawberry Plains\"\n}, {\n  \"TENMILE\": \"Ten Mile\"\n}, {\n  \"THORNHILL\": \"Thorn Hill\"\n}, {\n  \"WHITEPINE\": \"White Pine\"\n}, {\n  \"CROCKETTMILLS\": \"Crockett Mills\"\n}, {\n  \"GRANDJUNCTION\": \"Grand Junction\"\n}, {\n  \"HICKORYVALLEY\": \"Hickory Valley\"\n}, {\n  \"MAURYCITY\": \"Maury City\"\n}, {\n  \"COTTAGEGROVE\": \"Cottage Grove\"\n}, {\n  \"MCLEMORESVILLE\": \"Mc Lemoresville\"\n}, {\n  \"SOUTHFULTON\": \"South Fulton\"\n}, {\n  \"WOODLANDMILLS\": \"Woodland Mills\"\n}, {\n  \"BATHSPRINGS\": \"Bath Springs\"\n}, {\n  \"BEECHBLUFF\": \"Beech Bluff\"\n}, {\n  \"BETHELSPRINGS\": \"Bethel Springs\"\n}, {\n  \"HOLLOWROCK\": \"Hollow Rock\"\n}, {\n  \"JACKSCREEK\": \"Jacks Creek\"\n}, {\n  \"MORRISCHAPEL\": \"Morris Chapel\"\n}, {\n  \"PICKWICKDAM\": \"Pickwick Dam\"\n}, {\n  \"SCOTTSHILL\": \"Scotts Hill\"\n}, {\n  \"SUGARTREE\": \"Sugar Tree\"\n}, {\n  \"CYPRESSINN\": \"Cypress Inn\"\n}, {\n  \"DUCKRIVER\": \"Duck River\"\n}, {\n  \"MINORHILL\": \"Minor Hill\"\n}, {\n  \"PRIMMSPRINGS\": \"Primm Springs\"\n}, {\n  \"SAINTJOSEPH\": \"Saint Joseph\"\n}, {\n  \"SANTAFE\": \"Santa Fe\"\n}, {\n  \"BLOOMINGTONSPRINGS\": \"Bloomington Springs\"\n}, {\n  \"BRUSHCREEK\": \"Brush Creek\"\n}, {\n  \"BUFFALOVALLEY\": \"Buffalo Valley\"\n}, {\n  \"CHESTNUTMOUND\": \"Chestnut Mound\"\n}, {\n  \"PALLMALL\": \"Pall Mall\"\n}, {\n  \"ROCKISLAND\": \"Rock Island\"\n}, {\n  \"SILVERPOINT\": \"Silver Point\"\n}, {\n  \"BLUEMOUNTAIN\": \"Blue Mountain\"\n}, {\n  \"FRIARSPOINT\": \"Friars Point\"\n}, {\n  \"HICKORYFLAT\": \"Hickory Flat\"\n}, {\n  \"HORNLAKE\": \"Horn Lake\"\n}, {\n  \"LAKECORMORANT\": \"Lake Cormorant\"\n}, {\n  \"MICHIGANCITY\": \"Michigan City\"\n}, {\n  \"OLIVEBRANCH\": \"Olive Branch\"\n}, {\n  \"POTTSCAMP\": \"Potts Camp\"\n}, {\n  \"REDBANKS\": \"Red Banks\"\n}, {\n  \"GLENALLAN\": \"Glen Allan\"\n}, {\n  \"MOUNDBAYOU\": \"Mound Bayou\"\n}, {\n  \"NITTAYUMA\": \"Nitta Yuma\"\n}, {\n  \"PANTHERBURN\": \"Panther Burn\"\n}, {\n  \"RENALARA\": \"Rena Lara\"\n}, {\n  \"BLUESPRINGS\": \"Blue Springs\"\n}, {\n  \"GREENWOODSPRINGS\": \"Greenwood Springs\"\n}, {\n  \"MCCONDY\": \"Mc Condy\"\n}, {\n  \"NEWSITE\": \"New Site\"\n}, {\n  \"VANVLEET\": \"Van Vleet\"\n}, {\n  \"CALHOUNCITY\": \"Calhoun City\"\n}, {\n  \"DUCKHILL\": \"Duck Hill\"\n}, {\n  \"GORESPRINGS\": \"Gore Springs\"\n}, {\n  \"ITTABENA\": \"Itta Bena\"\n}, {\n  \"MCCARLEY\": \"Mc Carley\"\n}, {\n  \"MINTERCITY\": \"Minter City\"\n}, {\n  \"MORGANCITY\": \"Morgan City\"\n}, {\n  \"NORTHCARROLLTON\": \"North Carrollton\"\n}, {\n  \"SLATESPRING\": \"Slate Spring\"\n}, {\n  \"TIEPLANT\": \"Tie Plant\"\n}, {\n  \"WATERVALLEY\": \"Water Valley\"\n}, {\n  \"DELTACITY\": \"Delta City\"\n}, {\n  \"DLO\": \"D Lo\"\n}, {\n  \"HOLLYBLUFF\": \"Holly Bluff\"\n}, {\n  \"MCADAMS\": \"Mc Adams\"\n}, {\n  \"MCCOOL\": \"Mc Cool\"\n}, {\n  \"PINEYWOODS\": \"Piney Woods\"\n}, {\n  \"ROLLINGFORK\": \"Rolling Fork\"\n}, {\n  \"SILVERCITY\": \"Silver City\"\n}, {\n  \"VALLEYPARK\": \"Valley Park\"\n}, {\n  \"YAZOOCITY\": \"Yazoo City\"\n}, {\n  \"DEKALB\": \"De Kalb\"\n}, {\n  \"BAYSPRINGS\": \"Bay Springs\"\n}, {\n  \"MCLAIN\": \"Mc Lain\"\n}, {\n  \"MCNEILL\": \"Mc Neill\"\n}, {\n  \"NEWAUGUSTA\": \"New Augusta\"\n}, {\n  \"BAYSAINTLOUIS\": \"Bay Saint Louis\"\n}, {\n  \"STENNISSPACECENTER\": \"Stennis Space Center\"\n}, {\n  \"MOSSPOINT\": \"Moss Point\"\n}, {\n  \"OCEANSPRINGS\": \"Ocean Springs\"\n}, {\n  \"PASSCHRISTIAN\": \"Pass Christian\"\n}, {\n  \"BOGUECHITTO\": \"Bogue Chitto\"\n}, {\n  \"MCCALLCREEK\": \"Mc Call Creek\"\n}, {\n  \"OAKVALE\": \"Oak Vale\"\n}, {\n  \"UNIONCHURCH\": \"Union Church\"\n}, {\n  \"FRENCHCAMP\": \"French Camp\"\n}, {\n  \"MISSISSIPPISTATE\": \"Mississippi State\"\n}, {\n  \"COXSCREEK\": \"Coxs Creek\"\n}, {\n  \"HARRODSCREEK\": \"Harrods Creek\"\n}, {\n  \"MASONICHOME\": \"Masonic Home\"\n}, {\n  \"MOUNTEDEN\": \"Mount Eden\"\n}, {\n  \"PEWEEVALLEY\": \"Pewee Valley\"\n}, {\n  \"SAINTCATHARINE\": \"Saint Catharine\"\n}, {\n  \"SAINTMARY\": \"Saint Mary\"\n}, {\n  \"TURNERSSTATION\": \"Turners Station\"\n}, {\n  \"FALLSOFROUGH\": \"Falls Of Rough\"\n}, {\n  \"FORTKNOX\": \"Fort Knox\"\n}, {\n  \"LEBANONJUNCTION\": \"Lebanon Junction\"\n}, {\n  \"MCDANIELS\": \"Mc Daniels\"\n}, {\n  \"MCQUADY\": \"Mc Quady\"\n}, {\n  \"SEREE\": \"Se Ree\"\n}, {\n  \"UNIONSTAR\": \"Union Star\"\n}, {\n  \"VINEGROVE\": \"Vine Grove\"\n}, {\n  \"CLAYCITY\": \"Clay City\"\n}, {\n  \"GRAVELSWITCH\": \"Gravel Switch\"\n}, {\n  \"MOUNTSTERLING\": \"Mount Sterling\"\n}, {\n  \"NEWLIBERTY\": \"New Liberty\"\n}, {\n  \"NORTHMIDDLETOWN\": \"North Middletown\"\n}, {\n  \"PERRYPARK\": \"Perry Park\"\n}, {\n  \"SALTLICK\": \"Salt Lick\"\n}, {\n  \"STAMPINGGROUND\": \"Stamping Ground\"\n}, {\n  \"GRAYHAWK\": \"Gray Hawk\"\n}, {\n  \"MCKEE\": \"Mc Kee\"\n}, {\n  \"MCKINNEY\": \"Mc Kinney\"\n}, {\n  \"PAINTLICK\": \"Paint Lick\"\n}, {\n  \"RENFROVALLEY\": \"Renfro Valley\"\n}, {\n  \"EASTBERNSTADT\": \"East Bernstadt\"\n}, {\n  \"AGESBROOKSIDE\": \"Ages Brookside\"\n}, {\n  \"BIGLAUREL\": \"Big Laurel\"\n}, {\n  \"GRAYSKNOB\": \"Grays Knob\"\n}, {\n  \"HOLMESMILL\": \"Holmes Mill\"\n}, {\n  \"WALLINSCREEK\": \"Wallins Creek\"\n}, {\n  \"BRYANTSSTORE\": \"Bryants Store\"\n}, {\n  \"FALLROCK\": \"Fall Rock\"\n}, {\n  \"FLATLICK\": \"Flat Lick\"\n}, {\n  \"GOOSEROCK\": \"Goose Rock\"\n}, {\n  \"GREENROAD\": \"Green Road\"\n}, {\n  \"KETTLEISLAND\": \"Kettle Island\"\n}, {\n  \"MARYALICE\": \"Mary Alice\"\n}, {\n  \"SEXTONSCREEK\": \"Sextons Creek\"\n}, {\n  \"STONEYFORK\": \"Stoney Fork\"\n}, {\n  \"FTMITCHELL\": \"Ft Mitchell\"\n}, {\n  \"DEMOSSVILLE\": \"De Mossville\"\n}, {\n  \"DRYRIDGE\": \"Dry Ridge\"\n}, {\n  \"MORNINGVIEW\": \"Morning View\"\n}, {\n  \"MOUNTOLIVET\": \"Mount Olivet\"\n}, {\n  \"MUSESMILLS\": \"Muses Mills\"\n}, {\n  \"FORTTHOMAS\": \"Fort Thomas\"\n}, {\n  \"PLUMMERSLANDING\": \"Plummers Landing\"\n}, {\n  \"SILVERGROVE\": \"Silver Grove\"\n}, {\n  \"CAMPDIX\": \"Camp Dix\"\n}, {\n  \"OLIVEHILL\": \"Olive Hill\"\n}, {\n  \"SOUTHPORTSMOUTH\": \"South Portsmouth\"\n}, {\n  \"SOUTHSHORE\": \"South Shore\"\n}, {\n  \"BOONSCAMP\": \"Boons Camp\"\n}, {\n  \"EASTPOINT\": \"East Point\"\n}, {\n  \"OILSPRINGS\": \"Oil Springs\"\n}, {\n  \"TUTORKEY\": \"Tutor Key\"\n}, {\n  \"VANLEAR\": \"Van Lear\"\n}, {\n  \"WESTVANLEAR\": \"West Van Lear\"\n}, {\n  \"ISLANDCITY\": \"Island City\"\n}, {\n  \"LEECITY\": \"Lee City\"\n}, {\n  \"PINERIDGE\": \"Pine Ridge\"\n}, {\n  \"SAINTHELENS\": \"Saint Helens\"\n}, {\n  \"CANNELCITY\": \"Cannel City\"\n}, {\n  \"SOUTHWILLIAMSON\": \"South Williamson\"\n}, {\n  \"ELKHORNCITY\": \"Elkhorn City\"\n}, {\n  \"FORDSBRANCH\": \"Fords Branch\"\n}, {\n  \"LICKCREEK\": \"Lick Creek\"\n}, {\n  \"MCANDREWS\": \"Mc Andrews\"\n}, {\n  \"MCCARR\": \"Mc Carr\"\n}, {\n  \"MCVEIGH\": \"Mc Veigh\"\n}, {\n  \"ROBINSONCREEK\": \"Robinson Creek\"\n}, {\n  \"SHELBYGAP\": \"Shelby Gap\"\n}, {\n  \"BETSYLAYNE\": \"Betsy Layne\"\n}, {\n  \"BLUERIVER\": \"Blue River\"\n}, {\n  \"HIHAT\": \"Hi Hat\"\n}, {\n  \"BEARBRANCH\": \"Bear Branch\"\n}, {\n  \"GAYSCREEK\": \"Gays Creek\"\n}, {\n  \"MCROBERTS\": \"Mc Roberts\"\n}, {\n  \"PINETOP\": \"Pine Top\"\n}, {\n  \"PIPPAPASSES\": \"Pippa Passes\"\n}, {\n  \"CALVERTCITY\": \"Calvert City\"\n}, {\n  \"FANCYFARM\": \"Fancy Farm\"\n}, {\n  \"GRANDRIVERS\": \"Grand Rivers\"\n}, {\n  \"LACENTER\": \"La Center\"\n}, {\n  \"NEWCONCORD\": \"New Concord\"\n}, {\n  \"WESTPADUCAH\": \"West Paducah\"\n}, {\n  \"CAVECITY\": \"Cave City\"\n}, {\n  \"EIGHTYEIGHT\": \"Eighty Eight\"\n}, {\n  \"FOUNTAINRUN\": \"Fountain Run\"\n}, {\n  \"KNOBLICK\": \"Knob Lick\"\n}, {\n  \"MOUNTHERMON\": \"Mount Hermon\"\n}, {\n  \"PARKCITY\": \"Park City\"\n}, {\n  \"SUMMERSHADE\": \"Summer Shade\"\n}, {\n  \"SMITHSGROVE\": \"Smiths Grove\"\n}, {\n  \"BEESPRING\": \"Bee Spring\"\n}, {\n  \"FORTCAMPBELL\": \"Fort Campbell\"\n}, {\n  \"MAMMOTHCAVE\": \"Mammoth Cave\"\n}, {\n  \"OAKGROVE\": \"Oak Grove\"\n}, {\n  \"SHARONGROVE\": \"Sharon Grove\"\n}, {\n  \"SOUTHUNION\": \"South Union\"\n}, {\n  \"WELCHSCREEK\": \"Welchs Creek\"\n}, {\n  \"BEAVERDAM\": \"Beaver Dam\"\n}, {\n  \"BEECHGROVE\": \"Beech Grove\"\n}, {\n  \"HORSEBRANCH\": \"Horse Branch\"\n}, {\n  \"MAPLEMOUNT\": \"Maple Mount\"\n}, {\n  \"REYNOLDSSTATION\": \"Reynolds Station\"\n}, {\n  \"SOUTHCARROLLTON\": \"South Carrollton\"\n}, {\n  \"WESTLOUISVILLE\": \"West Louisville\"\n}, {\n  \"DAWSONSPRINGS\": \"Dawson Springs\"\n}, {\n  \"MORTONSGAP\": \"Mortons Gap\"\n}, {\n  \"SMITHMILLS\": \"Smith Mills\"\n}, {\n  \"SCIENCEHILL\": \"Science Hill\"\n}, {\n  \"WESTSOMERSET\": \"West Somerset\"\n}, {\n  \"MARSHESSIDING\": \"Marshes Siding\"\n}, {\n  \"MILLSPRINGS\": \"Mill Springs\"\n}, {\n  \"PARKERSLAKE\": \"Parkers Lake\"\n}, {\n  \"PINEKNOT\": \"Pine Knot\"\n}, {\n  \"RUSSELLSPRINGS\": \"Russell Springs\"\n}, {\n  \"WHITLEYCITY\": \"Whitley City\"\n}, {\n  \"BIGCLIFTY\": \"Big Clifty\"\n}, {\n  \"CANEVALLEY\": \"Cane Valley\"\n}, {\n  \"CUBRUN\": \"Cub Run\"\n}, {\n  \"ELKHORN\": \"Elk Horn\"\n}, {\n  \"GLENSFORK\": \"Glens Fork\"\n}, {\n  \"HORSECAVE\": \"Horse Cave\"\n}, {\n  \"MOUNTSHERMAN\": \"Mount Sherman\"\n}, {\n  \"BUCKEYELAKE\": \"Buckeye Lake\"\n}, {\n  \"LEWISCENTER\": \"Lewis Center\"\n}, {\n  \"MAGNETICSPRINGS\": \"Magnetic Springs\"\n}, {\n  \"MILFORDCENTER\": \"Milford Center\"\n}, {\n  \"MOUNTLIBERTY\": \"Mount Liberty\"\n}, {\n  \"NORTHLEWISBURG\": \"North Lewisburg\"\n}, {\n  \"PLAINCITY\": \"Plain City\"\n}, {\n  \"SAINTLOUISVILLE\": \"Saint Louisville\"\n}, {\n  \"SAINTPARIS\": \"Saint Paris\"\n}, {\n  \"UNIONVILLECENTER\": \"Unionville Center\"\n}, {\n  \"CANALWINCHESTER\": \"Canal Winchester\"\n}, {\n  \"COMMERCIALPOINT\": \"Commercial Point\"\n}, {\n  \"MURRAYCITY\": \"Murray City\"\n}, {\n  \"SOUTHBLOOMINGVILLE\": \"South Bloomingville\"\n}, {\n  \"SOUTHSOLON\": \"South Solon\"\n}, {\n  \"UNIONFURNACE\": \"Union Furnace\"\n}, {\n  \"WASHINGTONCOURTHOUSE\": \"Washington Court House\"\n}, {\n  \"WESTRUSHVILLE\": \"West Rushville\"\n}, {\n  \"BELLECENTER\": \"Belle Center\"\n}, {\n  \"DEGRAFF\": \"De Graff\"\n}, {\n  \"EASTLIBERTY\": \"East Liberty\"\n}, {\n  \"GREENCAMP\": \"Green Camp\"\n}, {\n  \"LARUE\": \"La Rue\"\n}, {\n  \"MOUNTVICTORY\": \"Mount Victory\"\n}, {\n  \"NEWBLOOMINGTON\": \"New Bloomington\"\n}, {\n  \"RUSSELLSPOINT\": \"Russells Point\"\n}, {\n  \"UPPERSANDUSKY\": \"Upper Sandusky\"\n}, {\n  \"WESTMANSFIELD\": \"West Mansfield\"\n}, {\n  \"CLAYCENTER\": \"Clay Center\"\n}, {\n  \"HARBORVIEW\": \"Harbor View\"\n}, {\n  \"ISLESAINTGEORGE\": \"Isle Saint George\"\n}, {\n  \"JERRYCITY\": \"Jerry City\"\n}, {\n  \"KELLEYSISLAND\": \"Kelleys Island\"\n}, {\n  \"LAKESIDEMARBLEHEAD\": \"Lakeside Marblehead\"\n}, {\n  \"MIDDLEBASS\": \"Middle Bass\"\n}, {\n  \"OAKHARBOR\": \"Oak Harbor\"\n}, {\n  \"PUTINBAY\": \"Put In Bay\"\n}, {\n  \"STONYRIDGE\": \"Stony Ridge\"\n}, {\n  \"WESTMILLGROVE\": \"West Millgrove\"\n}, {\n  \"GRANDRAPIDS\": \"Grand Rapids\"\n}, {\n  \"LIBERTYCENTER\": \"Liberty Center\"\n}, {\n  \"MARKCENTER\": \"Mark Center\"\n}, {\n  \"MILTONCENTER\": \"Milton Center\"\n}, {\n  \"NEWBAVARIA\": \"New Bavaria\"\n}, {\n  \"RIDGEVILLECORNERS\": \"Ridgeville Corners\"\n}, {\n  \"WESTUNITY\": \"West Unity\"\n}, {\n  \"BELLEVALLEY\": \"Belle Valley\"\n}, {\n  \"BLUEROCK\": \"Blue Rock\"\n}, {\n  \"DUNCANFALLS\": \"Duncan Falls\"\n}, {\n  \"EASTFULTONHAM\": \"East Fultonham\"\n}, {\n  \"LORECITY\": \"Lore City\"\n}, {\n  \"MCCONNELSVILLE\": \"Mc Connelsville\"\n}, {\n  \"MOUNTPERRY\": \"Mount Perry\"\n}, {\n  \"NEWLEXINGTON\": \"New Lexington\"\n}, {\n  \"NEWSTRAITSVILLE\": \"New Straitsville\"\n}, {\n  \"OLDWASHINGTON\": \"Old Washington\"\n}, {\n  \"PLEASANTCITY\": \"Pleasant City\"\n}, {\n  \"QUAKERCITY\": \"Quaker City\"\n}, {\n  \"SYCAMOREVALLEY\": \"Sycamore Valley\"\n}, {\n  \"WHITECOTTAGE\": \"White Cottage\"\n}, {\n  \"STONECREEK\": \"Stone Creek\"\n}, {\n  \"WESTLAFAYETTE\": \"West Lafayette\"\n}, {\n  \"EASTLIVERPOOL\": \"East Liverpool\"\n}, {\n  \"MARTINSFERRY\": \"Martins Ferry\"\n}, {\n  \"MINGOJUNCTION\": \"Mingo Junction\"\n}, {\n  \"PINEYFORK\": \"Piney Fork\"\n}, {\n  \"POWHATANPOINT\": \"Powhatan Point\"\n}, {\n  \"SAINTCLAIRSVILLE\": \"Saint Clairsville\"\n}, {\n  \"WOLFRUN\": \"Wolf Run\"\n}, {\n  \"NEWATHENS\": \"New Athens\"\n}, {\n  \"NEWRUMLEY\": \"New Rumley\"\n}, {\n  \"AVONLAKE\": \"Avon Lake\"\n}, {\n  \"CHAGRINFALLS\": \"Chagrin Falls\"\n}, {\n  \"COLUMBIASTATION\": \"Columbia Station\"\n}, {\n  \"EASTCLARIDON\": \"East Claridon\"\n}, {\n  \"NORTHRIDGEVILLE\": \"North Ridgeville\"\n}, {\n  \"GATESMILLS\": \"Gates Mills\"\n}, {\n  \"GRANDRIVER\": \"Grand River\"\n}, {\n  \"SHEFFIELDLAKE\": \"Sheffield Lake\"\n}, {\n  \"NORTHKINGSVILLE\": \"North Kingsville\"\n}, {\n  \"NORTHOLMSTED\": \"North Olmsted\"\n}, {\n  \"ROCKYRIVER\": \"Rocky River\"\n}, {\n  \"NORTHROYALTON\": \"North Royalton\"\n}, {\n  \"MAPLEHEIGHTS\": \"Maple Heights\"\n}, {\n  \"OLMSTEDFALLS\": \"Olmsted Falls\"\n}, {\n  \"BAYVILLAGE\": \"Bay Village\"\n}, {\n  \"BROADVIEWHEIGHTS\": \"Broadview Heights\"\n}, {\n  \"BRADYLAKE\": \"Brady Lake\"\n}, {\n  \"CHIPPEWALAKE\": \"Chippewa Lake\"\n}, {\n  \"CUYAHOGAFALLS\": \"Cuyahoga Falls\"\n}, {\n  \"WESTFIELDCENTER\": \"Westfield Center\"\n}, {\n  \"MUNROEFALLS\": \"Munroe Falls\"\n}, {\n  \"SHARONCENTER\": \"Sharon Center\"\n}, {\n  \"VALLEYCITY\": \"Valley City\"\n}, {\n  \"WESTSALEM\": \"West Salem\"\n}, {\n  \"BERLINCENTER\": \"Berlin Center\"\n}, {\n  \"EASTPALESTINE\": \"East Palestine\"\n}, {\n  \"LAKEMILTON\": \"Lake Milton\"\n}, {\n  \"MINERALRIDGE\": \"Mineral Ridge\"\n}, {\n  \"NEWMIDDLETOWN\": \"New Middletown\"\n}, {\n  \"NEWSPRINGFIELD\": \"New Springfield\"\n}, {\n  \"NEWWATERFORD\": \"New Waterford\"\n}, {\n  \"NORTHBENTON\": \"North Benton\"\n}, {\n  \"NORTHBLOOMFIELD\": \"North Bloomfield\"\n}, {\n  \"NORTHJACKSON\": \"North Jackson\"\n}, {\n  \"NORTHLIMA\": \"North Lima\"\n}, {\n  \"APPLECREEK\": \"Apple Creek\"\n}, {\n  \"BEACHCITY\": \"Beach City\"\n}, {\n  \"BIGPRAIRIE\": \"Big Prairie\"\n}, {\n  \"CANALFULTON\": \"Canal Fulton\"\n}, {\n  \"EASTSPARTA\": \"East Sparta\"\n}, {\n  \"HARLEMSPRINGS\": \"Harlem Springs\"\n}, {\n  \"MINERALCITY\": \"Mineral City\"\n}, {\n  \"MOUNTEATON\": \"Mount Eaton\"\n}, {\n  \"NORTHGEORGETOWN\": \"North Georgetown\"\n}, {\n  \"WALNUTCREEK\": \"Walnut Creek\"\n}, {\n  \"BERLINHEIGHTS\": \"Berlin Heights\"\n}, {\n  \"GREENSPRINGS\": \"Green Springs\"\n}, {\n  \"MCCUTCHENVILLE\": \"Mc Cutchenville\"\n}, {\n  \"NEWRIEGEL\": \"New Riegel\"\n}, {\n  \"NEWWASHINGTON\": \"New Washington\"\n}, {\n  \"NORTHFAIRFIELD\": \"North Fairfield\"\n}, {\n  \"NORTHROBINSON\": \"North Robinson\"\n}, {\n  \"SULPHURSPRINGS\": \"Sulphur Springs\"\n}, {\n  \"COLLEGECORNER\": \"College Corner\"\n}, {\n  \"KINGSMILLS\": \"Kings Mills\"\n}, {\n  \"MOUNTSAINTJOSEPH\": \"Mount Saint Joseph\"\n}, {\n  \"SEVENMILE\": \"Seven Mile\"\n}, {\n  \"SOUTHLEBANON\": \"South Lebanon\"\n}, {\n  \"WESTELKTON\": \"West Elkton\"\n}, {\n  \"CAMPDENNISON\": \"Camp Dennison\"\n}, {\n  \"LEESCREEK\": \"Lees Creek\"\n}, {\n  \"MOUNTORAB\": \"Mount Orab\"\n}, {\n  \"NEWVIENNA\": \"New Vienna\"\n}, {\n  \"PLEASANTPLAIN\": \"Pleasant Plain\"\n}, {\n  \"PORTWILLIAM\": \"Port William\"\n}, {\n  \"SINKINGSPRING\": \"Sinking Spring\"\n}, {\n  \"TERRACEPARK\": \"Terrace Park\"\n}, {\n  \"LUDLOWFALLS\": \"Ludlow Falls\"\n}, {\n  \"NEWCARLISLE\": \"New Carlisle\"\n}, {\n  \"NEWMADISON\": \"New Madison\"\n}, {\n  \"NEWWESTON\": \"New Weston\"\n}, {\n  \"NORTHSTAR\": \"North Star\"\n}, {\n  \"SOUTHCHARLESTON\": \"South Charleston\"\n}, {\n  \"SOUTHVIENNA\": \"South Vienna\"\n}, {\n  \"TIPPCITY\": \"Tipp City\"\n}, {\n  \"TREMONTCITY\": \"Tremont City\"\n}, {\n  \"WESTALEXANDRIA\": \"West Alexandria\"\n}, {\n  \"WESTMANCHESTER\": \"West Manchester\"\n}, {\n  \"YELLOWSPRINGS\": \"Yellow Springs\"\n}, {\n  \"CHERRYFORK\": \"Cherry Fork\"\n}, {\n  \"CROWNCITY\": \"Crown City\"\n}, {\n  \"FRANKLINFURNACE\": \"Franklin Furnace\"\n}, {\n  \"KITTSHILL\": \"Kitts Hill\"\n}, {\n  \"MCARTHUR\": \"Mc Arthur\"\n}, {\n  \"MCDERMOTT\": \"Mc Dermott\"\n}, {\n  \"NEWPLYMOUTH\": \"New Plymouth\"\n}, {\n  \"WESTPORTSMOUTH\": \"West Portsmouth\"\n}, {\n  \"RICHMONDDALE\": \"Richmond Dale\"\n}, {\n  \"ROCKCAMP\": \"Rock Camp\"\n}, {\n  \"SCIOTOFURNACE\": \"Scioto Furnace\"\n}, {\n  \"SOUTHPOINT\": \"South Point\"\n}, {\n  \"SOUTHWEBSTER\": \"South Webster\"\n}, {\n  \"WILLOWWOOD\": \"Willow Wood\"\n}, {\n  \"COALRUN\": \"Coal Run\"\n}, {\n  \"DEXTERCITY\": \"Dexter City\"\n}, {\n  \"LITTLEHOCKING\": \"Little Hocking\"\n}, {\n  \"LONGBOTTOM\": \"Long Bottom\"\n}, {\n  \"LOWERSALEM\": \"Lower Salem\"\n}, {\n  \"NEWMARSHFIELD\": \"New Marshfield\"\n}, {\n  \"NEWMATAMORAS\": \"New Matamoras\"\n}, {\n  \"TUPPERSPLAINS\": \"Tuppers Plains\"\n}, {\n  \"WINGETTRUN\": \"Wingett Run\"\n}, {\n  \"BENTONRIDGE\": \"Benton Ridge\"\n}, {\n  \"COLUMBUSGROVE\": \"Columbus Grove\"\n}, {\n  \"FORTJENNINGS\": \"Fort Jennings\"\n}, {\n  \"FORTLORAMIE\": \"Fort Loramie\"\n}, {\n  \"FORTRECOVERY\": \"Fort Recovery\"\n}, {\n  \"GROVERHILL\": \"Grover Hill\"\n}, {\n  \"MCCOMB\": \"Mc Comb\"\n}, {\n  \"MCGUFFEY\": \"Mc Guffey\"\n}, {\n  \"MARIASTEIN\": \"Maria Stein\"\n}, {\n  \"MIDDLEPOINT\": \"Middle Point\"\n}, {\n  \"MILLERCITY\": \"Miller City\"\n}, {\n  \"MOUNTBLANCHARD\": \"Mount Blanchard\"\n}, {\n  \"MOUNTCORY\": \"Mount Cory\"\n}, {\n  \"NEWBREMEN\": \"New Bremen\"\n}, {\n  \"NEWHAMPSHIRE\": \"New Hampshire\"\n}, {\n  \"NEWKNOXVILLE\": \"New Knoxville\"\n}, {\n  \"NORTHBALTIMORE\": \"North Baltimore\"\n}, {\n  \"OHIOCITY\": \"Ohio City\"\n}, {\n  \"SAINTHENRY\": \"Saint Henry\"\n}, {\n  \"VANWERT\": \"Van Wert\"\n}, {\n  \"MCCORDSVILLE\": \"Mc Cordsville\"\n}, {\n  \"NEWPALESTINE\": \"New Palestine\"\n}, {\n  \"BEVERLYSHORES\": \"Beverly Shores\"\n}, {\n  \"BOONEGROVE\": \"Boone Grove\"\n}, {\n  \"CEDARLAKE\": \"Cedar Lake\"\n}, {\n  \"EASTCHICAGO\": \"East Chicago\"\n}, {\n  \"KINGSFORDHEIGHTS\": \"Kingsford Heights\"\n}, {\n  \"LAKEVILLAGE\": \"Lake Village\"\n}, {\n  \"LAPORTE\": \"La Porte\"\n}, {\n  \"NORTHJUDSON\": \"North Judson\"\n}, {\n  \"ROLLINGPRAIRIE\": \"Rolling Prairie\"\n}, {\n  \"SAINTJOHN\": \"Saint John\"\n}, {\n  \"SANPIERRE\": \"San Pierre\"\n}, {\n  \"SUMAVARESORTS\": \"Sumava Resorts\"\n}, {\n  \"LAKESTATION\": \"Lake Station\"\n}, {\n  \"ETNAGREEN\": \"Etna Green\"\n}, {\n  \"NORTHLIBERTY\": \"North Liberty\"\n}, {\n  \"NORTHWEBSTER\": \"North Webster\"\n}, {\n  \"NOTREDAME\": \"Notre Dame\"\n}, {\n  \"WINONALAKE\": \"Winona Lake\"\n}, {\n  \"SOUTHBEND\": \"South Bend\"\n}, {\n  \"COLUMBIACITY\": \"Columbia City\"\n}, {\n  \"LINNGROVE\": \"Linn Grove\"\n}, {\n  \"PLEASANTLAKE\": \"Pleasant Lake\"\n}, {\n  \"PLEASANTMILLS\": \"Pleasant Mills\"\n}, {\n  \"ROMECITY\": \"Rome City\"\n}, {\n  \"SAINTJOE\": \"Saint Joe\"\n}, {\n  \"SOUTHMILFORD\": \"South Milford\"\n}, {\n  \"SOUTHWHITLEY\": \"South Whitley\"\n}, {\n  \"FORTWAYNE\": \"Fort Wayne\"\n}, {\n  \"GASCITY\": \"Gas City\"\n}, {\n  \"GRASSCREEK\": \"Grass Creek\"\n}, {\n  \"LAFONTAINE\": \"La Fontaine\"\n}, {\n  \"LAKECICOTT\": \"Lake Cicott\"\n}, {\n  \"LEITERSFORD\": \"Leiters Ford\"\n}, {\n  \"LIBERTYMILLS\": \"Liberty Mills\"\n}, {\n  \"NEWWAVERLY\": \"New Waverly\"\n}, {\n  \"NORTHMANCHESTER\": \"North Manchester\"\n}, {\n  \"GRISSOMARB\": \"Grissom Arb\"\n}, {\n  \"ROYALCENTER\": \"Royal Center\"\n}, {\n  \"STARCITY\": \"Star City\"\n}, {\n  \"TWELVEMILE\": \"Twelve Mile\"\n}, {\n  \"WESTMIDDLETON\": \"West Middleton\"\n}, {\n  \"YOUNGAMERICA\": \"Young America\"\n}, {\n  \"WESTCOLLEGECORNER\": \"West College Corner\"\n}, {\n  \"EASTENTERPRISE\": \"East Enterprise\"\n}, {\n  \"MOORESHILL\": \"Moores Hill\"\n}, {\n  \"NEWTRENTON\": \"New Trenton\"\n}, {\n  \"FLOYDSKNOBS\": \"Floyds Knobs\"\n}, {\n  \"MOUNTSAINTFRANCIS\": \"Mount Saint Francis\"\n}, {\n  \"NEWSALISBURY\": \"New Salisbury\"\n}, {\n  \"NORTHVERNON\": \"North Vernon\"\n}, {\n  \"PARISCROSSING\": \"Paris Crossing\"\n}, {\n  \"CAMBRIDGECITY\": \"Cambridge City\"\n}, {\n  \"FOUNTAINCITY\": \"Fountain City\"\n}, {\n  \"GREENSFORK\": \"Greens Fork\"\n}, {\n  \"HARTFORDCITY\": \"Hartford City\"\n}, {\n  \"MOUNTSUMMIT\": \"Mount Summit\"\n}, {\n  \"PARKERCITY\": \"Parker City\"\n}, {\n  \"FORTRITNER\": \"Fort Ritner\"\n}, {\n  \"FRENCHLICK\": \"French Lick\"\n}, {\n  \"SWITZCITY\": \"Switz City\"\n}, {\n  \"WESTBADENSPRINGS\": \"West Baden Springs\"\n}, {\n  \"LINCOLNCITY\": \"Lincoln City\"\n}, {\n  \"MARIAHHILL\": \"Mariah Hill\"\n}, {\n  \"MONROECITY\": \"Monroe City\"\n}, {\n  \"SAINTANTHONY\": \"Saint Anthony\"\n}, {\n  \"SAINTCROIX\": \"Saint Croix\"\n}, {\n  \"SAINTMEINRAD\": \"Saint Meinrad\"\n}, {\n  \"SANTACLAUS\": \"Santa Claus\"\n}, {\n  \"TELLCITY\": \"Tell City\"\n}, {\n  \"NEWHARMONY\": \"New Harmony\"\n}, {\n  \"FORTBRANCH\": \"Fort Branch\"\n}, {\n  \"OAKLANDCITY\": \"Oakland City\"\n}, {\n  \"TERREHAUTE\": \"Terre Haute\"\n}, {\n  \"NEWGOSHEN\": \"New Goshen\"\n}, {\n  \"PRAIRIECREEK\": \"Prairie Creek\"\n}, {\n  \"SAINTBERNICE\": \"Saint Bernice\"\n}, {\n  \"SAINTMARYOFTHEWOODS\": \"Saint Mary Of The Woods\"\n}, {\n  \"WESTTERREHAUTE\": \"West Terre Haute\"\n}, {\n  \"BATTLEGROUND\": \"Battle Ground\"\n}, {\n  \"BUCKCREEK\": \"Buck Creek\"\n}, {\n  \"EARLPARK\": \"Earl Park\"\n}, {\n  \"FAIROAKS\": \"Fair Oaks\"\n}, {\n  \"MOUNTAYR\": \"Mount Ayr\"\n}, {\n  \"NEWROSS\": \"New Ross\"\n}, {\n  \"PINEVILLAGE\": \"Pine Village\"\n}, {\n  \"CENTERLINE\": \"Center Line\"\n}, {\n  \"HARSENSISLAND\": \"Harsens Island\"\n}, {\n  \"HAZELPARK\": \"Hazel Park\"\n}, {\n  \"CLINTONTOWNSHIP\": \"Clinton Township\"\n}, {\n  \"MARINECITY\": \"Marine City\"\n}, {\n  \"MOUNTCLEMENS\": \"Mount Clemens\"\n}, {\n  \"HARRISONTOWNSHIP\": \"Harrison Township\"\n}, {\n  \"NORTHSTREET\": \"North Street\"\n}, {\n  \"EASTCHINA\": \"East China\"\n}, {\n  \"FORTGRATIOT\": \"Fort Gratiot\"\n}, {\n  \"PORTHURON\": \"Port Huron\"\n}, {\n  \"PLEASANTRIDGE\": \"Pleasant Ridge\"\n}, {\n  \"HUNTINGTONWOODS\": \"Huntington Woods\"\n}, {\n  \"SMITHSCREEK\": \"Smiths Creek\"\n}, {\n  \"SAINTCLAIRSHORES\": \"Saint Clair Shores\"\n}, {\n  \"ALLENPARK\": \"Allen Park\"\n}, {\n  \"ANNARBOR\": \"Ann Arbor\"\n}, {\n  \"DEARBORNHEIGHTS\": \"Dearborn Heights\"\n}, {\n  \"GROSSEILE\": \"Grosse Ile\"\n}, {\n  \"LASALLE\": \"La Salle\"\n}, {\n  \"LUNAPIER\": \"Luna Pier\"\n}, {\n  \"NEWHUDSON\": \"New Hudson\"\n}, {\n  \"SOUTHLYON\": \"South Lyon\"\n}, {\n  \"SOUTHROCKWOOD\": \"South Rockwood\"\n}, {\n  \"WHITMORELAKE\": \"Whitmore Lake\"\n}, {\n  \"RIVERROUGE\": \"River Rouge\"\n}, {\n  \"HARPERWOODS\": \"Harper Woods\"\n}, {\n  \"GROSSEPOINTE\": \"Grosse Pointe\"\n}, {\n  \"OAKPARK\": \"Oak Park\"\n}, {\n  \"BLOOMFIELDHILLS\": \"Bloomfield Hills\"\n}, {\n  \"STERLINGHEIGHTS\": \"Sterling Heights\"\n}, {\n  \"KEEGOHARBOR\": \"Keego Harbor\"\n}, {\n  \"AUBURNHILLS\": \"Auburn Hills\"\n}, {\n  \"DRAYTONPLAINS\": \"Drayton Plains\"\n}, {\n  \"LAKEORION\": \"Lake Orion\"\n}, {\n  \"COMMERCETOWNSHIP\": \"Commerce Township\"\n}, {\n  \"UNIONLAKE\": \"Union Lake\"\n}, {\n  \"WALLEDLAKE\": \"Walled Lake\"\n}, {\n  \"BADAXE\": \"Bad Axe\"\n}, {\n  \"BIRCHRUN\": \"Birch Run\"\n}, {\n  \"BROWNCITY\": \"Brown City\"\n}, {\n  \"GRANDBLANC\": \"Grand Blanc\"\n}, {\n  \"HARBORBEACH\": \"Harbor Beach\"\n}, {\n  \"IMLAYCITY\": \"Imlay City\"\n}, {\n  \"MINDENCITY\": \"Minden City\"\n}, {\n  \"NEWLOTHROP\": \"New Lothrop\"\n}, {\n  \"OTTERLAKE\": \"Otter Lake\"\n}, {\n  \"PORTAUSTIN\": \"Port Austin\"\n}, {\n  \"PORTHOPE\": \"Port Hope\"\n}, {\n  \"PORTSANILAC\": \"Port Sanilac\"\n}, {\n  \"SWARTZCREEK\": \"Swartz Creek\"\n}, {\n  \"HIGGINSLAKE\": \"Higgins Lake\"\n}, {\n  \"HOUGHTONLAKE\": \"Houghton Lake\"\n}, {\n  \"HOUGHTONLAKEHEIGHTS\": \"Houghton Lake Heights\"\n}, {\n  \"ROSECITY\": \"Rose City\"\n}, {\n  \"SAINTHELEN\": \"Saint Helen\"\n}, {\n  \"WESTBRANCH\": \"West Branch\"\n}, {\n  \"AUGRES\": \"Au Gres\"\n}, {\n  \"BARTONCITY\": \"Barton City\"\n}, {\n  \"BAYCITY\": \"Bay City\"\n}, {\n  \"UNIVERSITYCENTER\": \"University Center\"\n}, {\n  \"BAYPORT\": \"Bay Port\"\n}, {\n  \"CASSCITY\": \"Cass City\"\n}, {\n  \"EASTTAWAS\": \"East Tawas\"\n}, {\n  \"NATIONALCITY\": \"National City\"\n}, {\n  \"SOUTHBRANCH\": \"South Branch\"\n}, {\n  \"TAWASCITY\": \"Tawas City\"\n}, {\n  \"CARSONCITY\": \"Carson City\"\n}, {\n  \"EASTLANSING\": \"East Lansing\"\n}, {\n  \"EATONRAPIDS\": \"Eaton Rapids\"\n}, {\n  \"ELMHALL\": \"Elm Hall\"\n}, {\n  \"GRANDLEDGE\": \"Grand Ledge\"\n}, {\n  \"LAKEODESSA\": \"Lake Odessa\"\n}, {\n  \"MAPLERAPIDS\": \"Maple Rapids\"\n}, {\n  \"SAINTLOUIS\": \"Saint Louis\"\n}, {\n  \"SIXLAKES\": \"Six Lakes\"\n}, {\n  \"BATTLECREEK\": \"Battle Creek\"\n}, {\n  \"BENTONHARBOR\": \"Benton Harbor\"\n}, {\n  \"BURROAK\": \"Burr Oak\"\n}, {\n  \"HAGARSHORES\": \"Hagar Shores\"\n}, {\n  \"EASTLEROY\": \"East Leroy\"\n}, {\n  \"HICKORYCORNERS\": \"Hickory Corners\"\n}, {\n  \"SOUTHHAVEN\": \"South Haven\"\n}, {\n  \"WHITEPIGEON\": \"White Pigeon\"\n}, {\n  \"BERRIENCENTER\": \"Berrien Center\"\n}, {\n  \"BERRIENSPRINGS\": \"Berrien Springs\"\n}, {\n  \"NEWTROY\": \"New Troy\"\n}, {\n  \"THREEOAKS\": \"Three Oaks\"\n}, {\n  \"UNIONPIER\": \"Union Pier\"\n}, {\n  \"CEMENTCITY\": \"Cement City\"\n}, {\n  \"GRASSLAKE\": \"Grass Lake\"\n}, {\n  \"MANITOUBEACH\": \"Manitou Beach\"\n}, {\n  \"MICHIGANCENTER\": \"Michigan Center\"\n}, {\n  \"OTTAWALAKE\": \"Ottawa Lake\"\n}, {\n  \"RIVESJUNCTION\": \"Rives Junction\"\n}, {\n  \"SANDCREEK\": \"Sand Creek\"\n}, {\n  \"SOMERSETCENTER\": \"Somerset Center\"\n}, {\n  \"SPRINGARBOR\": \"Spring Arbor\"\n}, {\n  \"BIGRAPIDS\": \"Big Rapids\"\n}, {\n  \"BYRONCENTER\": \"Byron Center\"\n}, {\n  \"COMSTOCKPARK\": \"Comstock Park\"\n}, {\n  \"HOWARDCITY\": \"Howard City\"\n}, {\n  \"KENTCITY\": \"Kent City\"\n}, {\n  \"WHITECLOUD\": \"White Cloud\"\n}, {\n  \"FREESOIL\": \"Free Soil\"\n}, {\n  \"GRANDHAVEN\": \"Grand Haven\"\n}, {\n  \"NEWERA\": \"New Era\"\n}, {\n  \"TWINLAKE\": \"Twin Lake\"\n}, {\n  \"WESTOLIVE\": \"West Olive\"\n}, {\n  \"CENTRALLAKE\": \"Central Lake\"\n}, {\n  \"ELKRAPIDS\": \"Elk Rapids\"\n}, {\n  \"FIFELAKE\": \"Fife Lake\"\n}, {\n  \"FILERCITY\": \"Filer City\"\n}, {\n  \"GLENARBOR\": \"Glen Arbor\"\n}, {\n  \"LAKEANN\": \"Lake Ann\"\n}, {\n  \"LAKELEELANAU\": \"Lake Leelanau\"\n}, {\n  \"MCBAIN\": \"Mc Bain\"\n}, {\n  \"MAPLECITY\": \"Maple City\"\n}, {\n  \"OLDMISSION\": \"Old Mission\"\n}, {\n  \"RAPIDCITY\": \"Rapid City\"\n}, {\n  \"REEDCITY\": \"Reed City\"\n}, {\n  \"SOUTHBOARDMAN\": \"South Boardman\"\n}, {\n  \"SUTTONSBAY\": \"Suttons Bay\"\n}, {\n  \"TRAVERSECITY\": \"Traverse City\"\n}, {\n  \"MACKINAWCITY\": \"Mackinaw City\"\n}, {\n  \"BOYNECITY\": \"Boyne City\"\n}, {\n  \"BOYNEFALLS\": \"Boyne Falls\"\n}, {\n  \"BURTLAKE\": \"Burt Lake\"\n}, {\n  \"CARPLAKE\": \"Carp Lake\"\n}, {\n  \"CROSSVILLAGE\": \"Cross Village\"\n}, {\n  \"DETOURVILLAGE\": \"De Tour Village\"\n}, {\n  \"DRUMMONDISLAND\": \"Drummond Island\"\n}, {\n  \"EASTJORDAN\": \"East Jordan\"\n}, {\n  \"GOODHART\": \"Good Hart\"\n}, {\n  \"HARBORSPRINGS\": \"Harbor Springs\"\n}, {\n  \"HUBBARDLAKE\": \"Hubbard Lake\"\n}, {\n  \"INDIANRIVER\": \"Indian River\"\n}, {\n  \"MACKINACISLAND\": \"Mackinac Island\"\n}, {\n  \"MULLETTLAKE\": \"Mullett Lake\"\n}, {\n  \"POINTEAUXPINS\": \"Pointe Aux Pins\"\n}, {\n  \"ROGERSCITY\": \"Rogers City\"\n}, {\n  \"SAINTIGNACE\": \"Saint Ignace\"\n}, {\n  \"BEAVERISLAND\": \"Beaver Island\"\n}, {\n  \"SAULTSAINTEMARIE\": \"Sault Sainte Marie\"\n}, {\n  \"TROUTLAKE\": \"Trout Lake\"\n}, {\n  \"WALLOONLAKE\": \"Walloon Lake\"\n}, {\n  \"IRONMOUNTAIN\": \"Iron Mountain\"\n}, {\n  \"AUTRAIN\": \"Au Train\"\n}, {\n  \"BARKRIVER\": \"Bark River\"\n}, {\n  \"BIGBAY\": \"Big Bay\"\n}, {\n  \"CEDARRIVER\": \"Cedar River\"\n}, {\n  \"EBENJUNCTION\": \"Eben Junction\"\n}, {\n  \"LITTLELAKE\": \"Little Lake\"\n}, {\n  \"FOSTERCITY\": \"Foster City\"\n}, {\n  \"GOULDCITY\": \"Gould City\"\n}, {\n  \"GRANDMARAIS\": \"Grand Marais\"\n}, {\n  \"MCMILLAN\": \"Mc Millan\"\n}, {\n  \"NATIONALMINE\": \"National Mine\"\n}, {\n  \"RAPIDRIVER\": \"Rapid River\"\n}, {\n  \"ATLANTICMINE\": \"Atlantic Mine\"\n}, {\n  \"BRUCECROSSING\": \"Bruce Crossing\"\n}, {\n  \"COPPERCITY\": \"Copper City\"\n}, {\n  \"COPPERHARBOR\": \"Copper Harbor\"\n}, {\n  \"CRYSTALFALLS\": \"Crystal Falls\"\n}, {\n  \"DOLLARBAY\": \"Dollar Bay\"\n}, {\n  \"IRONRIVER\": \"Iron River\"\n}, {\n  \"LAKELINDEN\": \"Lake Linden\"\n}, {\n  \"MASSCITY\": \"Mass City\"\n}, {\n  \"SOUTHRANGE\": \"South Range\"\n}, {\n  \"BARNESCITY\": \"Barnes City\"\n}, {\n  \"COONRAPIDS\": \"Coon Rapids\"\n}, {\n  \"DALLASCENTER\": \"Dallas Center\"\n}, {\n  \"DAVISCITY\": \"Davis City\"\n}, {\n  \"GARDENGROVE\": \"Garden Grove\"\n}, {\n  \"GUTHRIECENTER\": \"Guthrie Center\"\n}, {\n  \"IOWAFALLS\": \"Iowa Falls\"\n}, {\n  \"LEGRAND\": \"Le Grand\"\n}, {\n  \"MCCALLSBURG\": \"Mc Callsburg\"\n}, {\n  \"NEWVIRGINIA\": \"New Virginia\"\n}, {\n  \"PILOTMOUND\": \"Pilot Mound\"\n}, {\n  \"PRAIRIECITY\": \"Prairie City\"\n}, {\n  \"STATECENTER\": \"State Center\"\n}, {\n  \"STORYCITY\": \"Story City\"\n}, {\n  \"VANMETER\": \"Van Meter\"\n}, {\n  \"WESTDESMOINES\": \"West Des Moines\"\n}, {\n  \"WHATCHEER\": \"What Cheer\"\n}, {\n  \"DESMOINES\": \"Des Moines\"\n}, {\n  \"MASONCITY\": \"Mason City\"\n}, {\n  \"BUFFALOCENTER\": \"Buffalo Center\"\n}, {\n  \"CLEARLAKE\": \"Clear Lake\"\n}, {\n  \"CRYSTALLAKE\": \"Crystal Lake\"\n}, {\n  \"LAKEMILLS\": \"Lake Mills\"\n}, {\n  \"LITTLECEDAR\": \"Little Cedar\"\n}, {\n  \"MCINTIRE\": \"Mc Intire\"\n}, {\n  \"NORASPRINGS\": \"Nora Springs\"\n}, {\n  \"ROCKFALLS\": \"Rock Falls\"\n}, {\n  \"SAINTANSGAR\": \"Saint Ansgar\"\n}, {\n  \"FORTDODGE\": \"Fort Dodge\"\n}, {\n  \"ALBERTCITY\": \"Albert City\"\n}, {\n  \"DAKOTACITY\": \"Dakota City\"\n}, {\n  \"EAGLEGROVE\": \"Eagle Grove\"\n}, {\n  \"GILMORECITY\": \"Gilmore City\"\n}, {\n  \"LONEROCK\": \"Lone Rock\"\n}, {\n  \"LUVERNE\": \"Lu Verne\"\n}, {\n  \"ROCKWELLCITY\": \"Rockwell City\"\n}, {\n  \"SACCITY\": \"Sac City\"\n}, {\n  \"SIOUXRAPIDS\": \"Sioux Rapids\"\n}, {\n  \"STORMLAKE\": \"Storm Lake\"\n}, {\n  \"SWEACITY\": \"Swea City\"\n}, {\n  \"WEBSTERCITY\": \"Webster City\"\n}, {\n  \"WESTBEND\": \"West Bend\"\n}, {\n  \"ALTAVISTA\": \"Alta Vista\"\n}, {\n  \"GRUNDYCENTER\": \"Grundy Center\"\n}, {\n  \"LAPORTECITY\": \"La Porte City\"\n}, {\n  \"MARBLEROCK\": \"Marble Rock\"\n}, {\n  \"SHELLROCK\": \"Shell Rock\"\n}, {\n  \"STEAMBOATROCK\": \"Steamboat Rock\"\n}, {\n  \"SHANNONCITY\": \"Shannon City\"\n}, {\n  \"CLIMBINGHILL\": \"Climbing Hill\"\n}, {\n  \"LEMARS\": \"Le Mars\"\n}, {\n  \"SERGEANTBLUFF\": \"Sergeant Bluff\"\n}, {\n  \"SIOUXCITY\": \"Sioux City\"\n}, {\n  \"ROCKRAPIDS\": \"Rock Rapids\"\n}, {\n  \"ROCKVALLEY\": \"Rock Valley\"\n}, {\n  \"SIOUXCENTER\": \"Sioux Center\"\n}, {\n  \"ARNOLDSPARK\": \"Arnolds Park\"\n}, {\n  \"GILLETTGROVE\": \"Gillett Grove\"\n}, {\n  \"MAYCITY\": \"May City\"\n}, {\n  \"SPIRITLAKE\": \"Spirit Lake\"\n}, {\n  \"CHARTEROAK\": \"Charter Oak\"\n}, {\n  \"IDAGROVE\": \"Ida Grove\"\n}, {\n  \"WALLLAKE\": \"Wall Lake\"\n}, {\n  \"COUNCILBLUFFS\": \"Council Bluffs\"\n}, {\n  \"CARTERLAKE\": \"Carter Lake\"\n}, {\n  \"DOWCITY\": \"Dow City\"\n}, {\n  \"HONEYCREEK\": \"Honey Creek\"\n}, {\n  \"LITTLESIOUX\": \"Little Sioux\"\n}, {\n  \"MCCLELLAND\": \"Mc Clelland\"\n}, {\n  \"MISSOURIVALLEY\": \"Missouri Valley\"\n}, {\n  \"PACIFICJUNCTION\": \"Pacific Junction\"\n}, {\n  \"COLLEGESPRINGS\": \"College Springs\"\n}, {\n  \"HOLYCROSS\": \"Holy Cross\"\n}, {\n  \"LAMOTTE\": \"La Motte\"\n}, {\n  \"NORTHBUENAVISTA\": \"North Buena Vista\"\n}, {\n  \"SAINTDONATUS\": \"Saint Donatus\"\n}, {\n  \"SAINTOLAF\": \"Saint Olaf\"\n}, {\n  \"STRAWBERRYPOINT\": \"Strawberry Point\"\n}, {\n  \"FORTATKINSON\": \"Fort Atkinson\"\n}, {\n  \"LIMESPRINGS\": \"Lime Springs\"\n}, {\n  \"MCGREGOR\": \"Mc Gregor\"\n}, {\n  \"NEWALBIN\": \"New Albin\"\n}, {\n  \"SAINTLUCAS\": \"Saint Lucas\"\n}, {\n  \"BELLEPLAINE\": \"Belle Plaine\"\n}, {\n  \"CENTERJUNCTION\": \"Center Junction\"\n}, {\n  \"IOWACITY\": \"Iowa City\"\n}, {\n  \"LOSTNATION\": \"Lost Nation\"\n}, {\n  \"MIDDLEAMANA\": \"Middle Amana\"\n}, {\n  \"MOUNTAUBURN\": \"Mount Auburn\"\n}, {\n  \"NORTHENGLISH\": \"North English\"\n}, {\n  \"OXFORDJUNCTION\": \"Oxford Junction\"\n}, {\n  \"SOUTHAMANA\": \"South Amana\"\n}, {\n  \"SOUTHENGLISH\": \"South English\"\n}, {\n  \"TROYMILLS\": \"Troy Mills\"\n}, {\n  \"VANHORNE\": \"Van Horne\"\n}, {\n  \"CEDARRAPIDS\": \"Cedar Rapids\"\n}, {\n  \"PROMISECITY\": \"Promise City\"\n}, {\n  \"FORTMADISON\": \"Fort Madison\"\n}, {\n  \"MORNINGSUN\": \"Morning Sun\"\n}, {\n  \"PILOTGROVE\": \"Pilot Grove\"\n}, {\n  \"COLUMBUSCITY\": \"Columbus City\"\n}, {\n  \"COLUMBUSJUNCTION\": \"Columbus Junction\"\n}, {\n  \"DEWITT\": \"De Witt\"\n}, {\n  \"GOOSELAKE\": \"Goose Lake\"\n}, {\n  \"GRANDMOUND\": \"Grand Mound\"\n}, {\n  \"LECLAIRE\": \"Le Claire\"\n}, {\n  \"LONETREE\": \"Lone Tree\"\n}, {\n  \"LONGGROVE\": \"Long Grove\"\n}, {\n  \"MCCAUSLAND\": \"Mc Causland\"\n}, {\n  \"TEEDSGROVE\": \"Teeds Grove\"\n}, {\n  \"ELKHARTLAKE\": \"Elkhart Lake\"\n}, {\n  \"IRONRIDGE\": \"Iron Ridge\"\n}, {\n  \"JOHNSONCREEK\": \"Johnson Creek\"\n}, {\n  \"MENOMONEEFALLS\": \"Menomonee Falls\"\n}, {\n  \"MOUNTCALVARY\": \"Mount Calvary\"\n}, {\n  \"NEWHOLSTEIN\": \"New Holstein\"\n}, {\n  \"NORTHLAKE\": \"North Lake\"\n}, {\n  \"RANDOMLAKE\": \"Random Lake\"\n}, {\n  \"SHEBOYGANFALLS\": \"Sheboygan Falls\"\n}, {\n  \"BENETLAKE\": \"Benet Lake\"\n}, {\n  \"CAMPLAKE\": \"Camp Lake\"\n}, {\n  \"EASTTROY\": \"East Troy\"\n}, {\n  \"ELMGROVE\": \"Elm Grove\"\n}, {\n  \"GENESEEDEPOT\": \"Genesee Depot\"\n}, {\n  \"GENOACITY\": \"Genoa City\"\n}, {\n  \"HALESCORNERS\": \"Hales Corners\"\n}, {\n  \"NEWMUNSTER\": \"New Munster\"\n}, {\n  \"NORTHPRAIRIE\": \"North Prairie\"\n}, {\n  \"OAKCREEK\": \"Oak Creek\"\n}, {\n  \"PELLLAKE\": \"Pell Lake\"\n}, {\n  \"PLEASANTPRAIRIE\": \"Pleasant Prairie\"\n}, {\n  \"POWERSLAKE\": \"Powers Lake\"\n}, {\n  \"SOUTHMILWAUKEE\": \"South Milwaukee\"\n}, {\n  \"TWINLAKES\": \"Twin Lakes\"\n}, {\n  \"WILLIAMSBAY\": \"Williams Bay\"\n}, {\n  \"BLACKEARTH\": \"Black Earth\"\n}, {\n  \"BLUEMOUNDS\": \"Blue Mounds\"\n}, {\n  \"DEFOREST\": \"De Forest\"\n}, {\n  \"MCFARLAND\": \"Mc Farland\"\n}, {\n  \"MOUNTHOREB\": \"Mount Horeb\"\n}, {\n  \"NEWGLARUS\": \"New Glarus\"\n}, {\n  \"PRAIRIEDUSAC\": \"Prairie Du Sac\"\n}, {\n  \"RICHLANDCENTER\": \"Richland Center\"\n}, {\n  \"SAUKCITY\": \"Sauk City\"\n}, {\n  \"SOUTHWAYNE\": \"South Wayne\"\n}, {\n  \"SPRINGGREEN\": \"Spring Green\"\n}, {\n  \"SUNPRAIRIE\": \"Sun Prairie\"\n}, {\n  \"CUBACITY\": \"Cuba City\"\n}, {\n  \"GLENHAVEN\": \"Glen Haven\"\n}, {\n  \"PATCHGROVE\": \"Patch Grove\"\n}, {\n  \"PRAIRIEDUCHIEN\": \"Prairie Du Chien\"\n}, {\n  \"FOXLAKE\": \"Fox Lake\"\n}, {\n  \"GRANDMARSH\": \"Grand Marsh\"\n}, {\n  \"LAKEDELTON\": \"Lake Delton\"\n}, {\n  \"LAVALLE\": \"La Valle\"\n}, {\n  \"LIMERIDGE\": \"Lime Ridge\"\n}, {\n  \"LYNDONSTATION\": \"Lyndon Station\"\n}, {\n  \"NORTHFREEDOM\": \"North Freedom\"\n}, {\n  \"ROCKSPRINGS\": \"Rock Springs\"\n}, {\n  \"UNIONCENTER\": \"Union Center\"\n}, {\n  \"WISCONSINDELLS\": \"Wisconsin Dells\"\n}, {\n  \"EASTELLSWORTH\": \"East Ellsworth\"\n}, {\n  \"GLENWOODCITY\": \"Glenwood City\"\n}, {\n  \"HAGERCITY\": \"Hager City\"\n}, {\n  \"SAINTCROIXFALLS\": \"Saint Croix Falls\"\n}, {\n  \"STARPRAIRIE\": \"Star Prairie\"\n}, {\n  \"ARMSTRONGCREEK\": \"Armstrong Creek\"\n}, {\n  \"COMBINEDLOCKS\": \"Combined Locks\"\n}, {\n  \"DEPERE\": \"De Pere\"\n}, {\n  \"FORESTJUNCTION\": \"Forest Junction\"\n}, {\n  \"GREENVALLEY\": \"Green Valley\"\n}, {\n  \"LITTLECHUTE\": \"Little Chute\"\n}, {\n  \"LITTLESUAMICO\": \"Little Suamico\"\n}, {\n  \"OCONTOFALLS\": \"Oconto Falls\"\n}, {\n  \"BAILEYSHARBOR\": \"Baileys Harbor\"\n}, {\n  \"EGGHARBOR\": \"Egg Harbor\"\n}, {\n  \"ELLISONBAY\": \"Ellison Bay\"\n}, {\n  \"FISHCREEK\": \"Fish Creek\"\n}, {\n  \"FRANCISCREEK\": \"Francis Creek\"\n}, {\n  \"NEWFRANKEN\": \"New Franken\"\n}, {\n  \"SAINTNAZIANZ\": \"Saint Nazianz\"\n}, {\n  \"SISTERBAY\": \"Sister Bay\"\n}, {\n  \"STURGEONBAY\": \"Sturgeon Bay\"\n}, {\n  \"TISCHMILLS\": \"Tisch Mills\"\n}, {\n  \"TWORIVERS\": \"Two Rivers\"\n}, {\n  \"WASHINGTONISLAND\": \"Washington Island\"\n}, {\n  \"AMHERSTJUNCTION\": \"Amherst Junction\"\n}, {\n  \"JUMPRIVER\": \"Jump River\"\n}, {\n  \"PELICANLAKE\": \"Pelican Lake\"\n}, {\n  \"PORTEDWARDS\": \"Port Edwards\"\n}, {\n  \"RIBLAKE\": \"Rib Lake\"\n}, {\n  \"STEVENSPOINT\": \"Stevens Point\"\n}, {\n  \"SUMMITLAKE\": \"Summit Lake\"\n}, {\n  \"WISCONSINRAPIDS\": \"Wisconsin Rapids\"\n}, {\n  \"BOULDERJUNCTION\": \"Boulder Junction\"\n}, {\n  \"CLAMLAKE\": \"Clam Lake\"\n}, {\n  \"EAGLERIVER\": \"Eagle River\"\n}, {\n  \"GLENFLORA\": \"Glen Flora\"\n}, {\n  \"HEAFFORDJUNCTION\": \"Heafford Junction\"\n}, {\n  \"IRONBELT\": \"Iron Belt\"\n}, {\n  \"LACDUFLAMBEAU\": \"Lac Du Flambeau\"\n}, {\n  \"LAKETOMAHAWK\": \"Lake Tomahawk\"\n}, {\n  \"MCNAUGHTON\": \"Mc Naughton\"\n}, {\n  \"MANITOWISHWATERS\": \"Manitowish Waters\"\n}, {\n  \"PARKFALLS\": \"Park Falls\"\n}, {\n  \"SAINTGERMAIN\": \"Saint Germain\"\n}, {\n  \"THREELAKES\": \"Three Lakes\"\n}, {\n  \"ALMACENTER\": \"Alma Center\"\n}, {\n  \"BLACKRIVERFALLS\": \"Black River Falls\"\n}, {\n  \"CAMPDOUGLAS\": \"Camp Douglas\"\n}, {\n  \"COONVALLEY\": \"Coon Valley\"\n}, {\n  \"GAYSMILLS\": \"Gays Mills\"\n}, {\n  \"LAFARGE\": \"La Farge\"\n}, {\n  \"SOLDIERSGROVE\": \"Soldiers Grove\"\n}, {\n  \"TUNNELCITY\": \"Tunnel City\"\n}, {\n  \"CHIPPEWAFALLS\": \"Chippewa Falls\"\n}, {\n  \"EAUGALLE\": \"Eau Galle\"\n}, {\n  \"ELKMOUND\": \"Elk Mound\"\n}, {\n  \"FALLCREEK\": \"Fall Creek\"\n}, {\n  \"JIMFALLS\": \"Jim Falls\"\n}, {\n  \"MAIDENROCK\": \"Maiden Rock\"\n}, {\n  \"NEWAUBURN\": \"New Auburn\"\n}, {\n  \"PIGEONFALLS\": \"Pigeon Falls\"\n}, {\n  \"PLUMCITY\": \"Plum City\"\n}, {\n  \"PRAIRIEFARM\": \"Prairie Farm\"\n}, {\n  \"BALSAMLAKE\": \"Balsam Lake\"\n}, {\n  \"GRANDVIEW\": \"Grand View\"\n}, {\n  \"LAKENEBAGAMON\": \"Lake Nebagamon\"\n}, {\n  \"LAPOINTE\": \"La Pointe\"\n}, {\n  \"PORTWING\": \"Port Wing\"\n}, {\n  \"RICELAKE\": \"Rice Lake\"\n}, {\n  \"SHELLLAKE\": \"Shell Lake\"\n}, {\n  \"SOLONSPRINGS\": \"Solon Springs\"\n}, {\n  \"STONELAKE\": \"Stone Lake\"\n}, {\n  \"TURTLELAKE\": \"Turtle Lake\"\n}, {\n  \"BIGFALLS\": \"Big Falls\"\n}, {\n  \"BUTTEDESMORTS\": \"Butte Des Morts\"\n}, {\n  \"FONDDULAC\": \"Fond Du Lac\"\n}, {\n  \"GREENLAKE\": \"Green Lake\"\n}, {\n  \"PINERIVER\": \"Pine River\"\n}, {\n  \"POYSIPPI\": \"Poy Sippi\"\n}, {\n  \"VANDYNE\": \"Van Dyne\"\n}, {\n  \"WILDROSE\": \"Wild Rose\"\n}, {\n  \"BROOKPARK\": \"Brook Park\"\n}, {\n  \"CANNONFALLS\": \"Cannon Falls\"\n}, {\n  \"CASTLEROCK\": \"Castle Rock\"\n}, {\n  \"CENTERCITY\": \"Center City\"\n}, {\n  \"CHISAGOCITY\": \"Chisago City\"\n}, {\n  \"CIRCLEPINES\": \"Circle Pines\"\n}, {\n  \"FORESTLAKE\": \"Forest Lake\"\n}, {\n  \"LAKEELMO\": \"Lake Elmo\"\n}, {\n  \"MARINEONSAINTCROIX\": \"Marine On Saint Croix\"\n}, {\n  \"REDWING\": \"Red Wing\"\n}, {\n  \"RUSHCITY\": \"Rush City\"\n}, {\n  \"SAINTPAULPARK\": \"Saint Paul Park\"\n}, {\n  \"SOUTHSAINTPAUL\": \"South Saint Paul\"\n}, {\n  \"INVERGROVEHEIGHTS\": \"Inver Grove Heights\"\n}, {\n  \"TAYLORSFALLS\": \"Taylors Falls\"\n}, {\n  \"BIGLAKE\": \"Big Lake\"\n}, {\n  \"BIRDISLAND\": \"Bird Island\"\n}, {\n  \"BUFFALOLAKE\": \"Buffalo Lake\"\n}, {\n  \"CRYSTALBAY\": \"Crystal Bay\"\n}, {\n  \"EDENVALLEY\": \"Eden Valley\"\n}, {\n  \"ELKRIVER\": \"Elk River\"\n}, {\n  \"GREENISLE\": \"Green Isle\"\n}, {\n  \"EDENPRAIRIE\": \"Eden Prairie\"\n}, {\n  \"MAPLEPLAIN\": \"Maple Plain\"\n}, {\n  \"HOWARDLAKE\": \"Howard Lake\"\n}, {\n  \"LESTERPRAIRIE\": \"Lester Prairie\"\n}, {\n  \"MAPLELAKE\": \"Maple Lake\"\n}, {\n  \"MINNETONKABEACH\": \"Minnetonka Beach\"\n}, {\n  \"NEWGERMANY\": \"New Germany\"\n}, {\n  \"PRIORLAKE\": \"Prior Lake\"\n}, {\n  \"SAINTBONIFACIUS\": \"Saint Bonifacius\"\n}, {\n  \"SPRINGPARK\": \"Spring Park\"\n}, {\n  \"BEAVERBAY\": \"Beaver Bay\"\n}, {\n  \"GRANDPORTAGE\": \"Grand Portage\"\n}, {\n  \"KNIFERIVER\": \"Knife River\"\n}, {\n  \"TWOHARBORS\": \"Two Harbors\"\n}, {\n  \"CRANELAKE\": \"Crane Lake\"\n}, {\n  \"HILLCITY\": \"Hill City\"\n}, {\n  \"HOYTLAKES\": \"Hoyt Lakes\"\n}, {\n  \"KETTLERIVER\": \"Kettle River\"\n}, {\n  \"MOOSELAKE\": \"Moose Lake\"\n}, {\n  \"MOUNTAINIRON\": \"Mountain Iron\"\n}, {\n  \"NETTLAKE\": \"Nett Lake\"\n}, {\n  \"SIDELAKE\": \"Side Lake\"\n}, {\n  \"STURGEONLAKE\": \"Sturgeon Lake\"\n}, {\n  \"SWANRIVER\": \"Swan River\"\n}, {\n  \"WILLOWRIVER\": \"Willow River\"\n}, {\n  \"BLOOMINGPRAIRIE\": \"Blooming Prairie\"\n}, {\n  \"DODGECENTER\": \"Dodge Center\"\n}, {\n  \"GRANDMEADOW\": \"Grand Meadow\"\n}, {\n  \"LACRESCENT\": \"La Crescent\"\n}, {\n  \"MINNESOTACITY\": \"Minnesota City\"\n}, {\n  \"READSLANDING\": \"Reads Landing\"\n}, {\n  \"ROSECREEK\": \"Rose Creek\"\n}, {\n  \"WESTCONCORD\": \"West Concord\"\n}, {\n  \"ZUMBROFALLS\": \"Zumbro Falls\"\n}, {\n  \"ALBERTLEA\": \"Albert Lea\"\n}, {\n  \"BLUEEARTH\": \"Blue Earth\"\n}, {\n  \"CLARKSGROVE\": \"Clarks Grove\"\n}, {\n  \"GOODTHUNDER\": \"Good Thunder\"\n}, {\n  \"LAKECRYSTAL\": \"Lake Crystal\"\n}, {\n  \"LECENTER\": \"Le Center\"\n}, {\n  \"LESUEUR\": \"Le Sueur\"\n}, {\n  \"MADISONLAKE\": \"Madison Lake\"\n}, {\n  \"MINNESOTALAKE\": \"Minnesota Lake\"\n}, {\n  \"NEWPRAGUE\": \"New Prague\"\n}, {\n  \"NEWRICHLAND\": \"New Richland\"\n}, {\n  \"NEWULM\": \"New Ulm\"\n}, {\n  \"SAINTPETER\": \"Saint Peter\"\n}, {\n  \"SLEEPYEYE\": \"Sleepy Eye\"\n}, {\n  \"BEAVERCREEK\": \"Beaver Creek\"\n}, {\n  \"BINGHAMLAKE\": \"Bingham Lake\"\n}, {\n  \"HERONLAKE\": \"Heron Lake\"\n}, {\n  \"LAKEBENTON\": \"Lake Benton\"\n}, {\n  \"LAKEWILSON\": \"Lake Wilson\"\n}, {\n  \"MOUNTAINLAKE\": \"Mountain Lake\"\n}, {\n  \"BROWNSVALLEY\": \"Browns Valley\"\n}, {\n  \"CLARACITY\": \"Clara City\"\n}, {\n  \"HANLEYFALLS\": \"Hanley Falls\"\n}, {\n  \"LAKELILLIAN\": \"Lake Lillian\"\n}, {\n  \"REDWOODFALLS\": \"Redwood Falls\"\n}, {\n  \"SACREDHEART\": \"Sacred Heart\"\n}, {\n  \"WOODLAKE\": \"Wood Lake\"\n}, {\n  \"GREYEAGLE\": \"Grey Eagle\"\n}, {\n  \"HOLMESCITY\": \"Holmes City\"\n}, {\n  \"LONGPRAIRIE\": \"Long Prairie\"\n}, {\n  \"MCGRATH\": \"Mc Grath\"\n}, {\n  \"NEWMUNICH\": \"New Munich\"\n}, {\n  \"PARKERSPRAIRIE\": \"Parkers Prairie\"\n}, {\n  \"SAINTMARTIN\": \"Saint Martin\"\n}, {\n  \"SAUKCENTRE\": \"Sauk Centre\"\n}, {\n  \"SAUKRAPIDS\": \"Sauk Rapids\"\n}, {\n  \"WAITEPARK\": \"Waite Park\"\n}, {\n  \"AHGWAHCHING\": \"Ah Gwah Ching\"\n}, {\n  \"EAGLEBEND\": \"Eagle Bend\"\n}, {\n  \"FIFTYLAKES\": \"Fifty Lakes\"\n}, {\n  \"FORTRIPLEY\": \"Fort Ripley\"\n}, {\n  \"LAKEHUBERT\": \"Lake Hubert\"\n}, {\n  \"PARKRAPIDS\": \"Park Rapids\"\n}, {\n  \"PEQUOTLAKES\": \"Pequot Lakes\"\n}, {\n  \"DETROITLAKES\": \"Detroit Lakes\"\n}, {\n  \"BATTLELAKE\": \"Battle Lake\"\n}, {\n  \"DEERCREEK\": \"Deer Creek\"\n}, {\n  \"ELBOWLAKE\": \"Elbow Lake\"\n}, {\n  \"FERGUSFALLS\": \"Fergus Falls\"\n}, {\n  \"PELICANRAPIDS\": \"Pelican Rapids\"\n}, {\n  \"TWINVALLEY\": \"Twin Valley\"\n}, {\n  \"WHITEEARTH\": \"White Earth\"\n}, {\n  \"WOLFLAKE\": \"Wolf Lake\"\n}, {\n  \"CASSLAKE\": \"Cass Lake\"\n}, {\n  \"FEDERALDAM\": \"Federal Dam\"\n}, {\n  \"INTERNATIONALFALLS\": \"International Falls\"\n}, {\n  \"SOUTHINTERNATIONALFALLS\": \"South International Falls\"\n}, {\n  \"SQUAWLAKE\": \"Squaw Lake\"\n}, {\n  \"THIEFRIVERFALLS\": \"Thief River Falls\"\n}, {\n  \"ANGLEINLET\": \"Angle Inlet\"\n}, {\n  \"EASTGRANDFORKS\": \"East Grand Forks\"\n}, {\n  \"LAKEBRONSON\": \"Lake Bronson\"\n}, {\n  \"REDLAKEFALLS\": \"Red Lake Falls\"\n}, {\n  \"SAINTHILAIRE\": \"Saint Hilaire\"\n}, {\n  \"SAINTVINCENT\": \"Saint Vincent\"\n}, {\n  \"DELLRAPIDS\": \"Dell Rapids\"\n}, {\n  \"ELKPOINT\": \"Elk Point\"\n}, {\n  \"MISSIONHILL\": \"Mission Hill\"\n}, {\n  \"NORTHSIOUXCITY\": \"North Sioux City\"\n}, {\n  \"VALLEYSPRINGS\": \"Valley Springs\"\n}, {\n  \"SIOUXFALLS\": \"Sioux Falls\"\n}, {\n  \"BUFFALORIDGE\": \"Buffalo Ridge\"\n}, {\n  \"BIGSTONECITY\": \"Big Stone City\"\n}, {\n  \"CLAIRECITY\": \"Claire City\"\n}, {\n  \"DESMET\": \"De Smet\"\n}, {\n  \"LAKENORDEN\": \"Lake Norden\"\n}, {\n  \"LAKEPRESTON\": \"Lake Preston\"\n}, {\n  \"NEWEFFINGTON\": \"New Effington\"\n}, {\n  \"TWINBROOKS\": \"Twin Brooks\"\n}, {\n  \"WILLOWLAKE\": \"Willow Lake\"\n}, {\n  \"FORTTHOMPSON\": \"Fort Thompson\"\n}, {\n  \"GANNVALLEY\": \"Gann Valley\"\n}, {\n  \"LAKEANDES\": \"Lake Andes\"\n}, {\n  \"REEHEIGHTS\": \"Ree Heights\"\n}, {\n  \"SAINTLAWRENCE\": \"Saint Lawrence\"\n}, {\n  \"WESSINGTONSPRINGS\": \"Wessington Springs\"\n}, {\n  \"FORTPIERRE\": \"Fort Pierre\"\n}, {\n  \"LOWERBRULE\": \"Lower Brule\"\n}, {\n  \"MISSIONRIDGE\": \"Mission Ridge\"\n}, {\n  \"WHITERIVER\": \"White River\"\n}, {\n  \"EAGLEBUTTE\": \"Eagle Butte\"\n}, {\n  \"GLADVALLEY\": \"Glad Valley\"\n}, {\n  \"LITTLEEAGLE\": \"Little Eagle\"\n}, {\n  \"MCLAUGHLIN\": \"Mc Laughlin\"\n}, {\n  \"MOUNDCITY\": \"Mound City\"\n}, {\n  \"TIMBERLAKE\": \"Timber Lake\"\n}, {\n  \"TRAILCITY\": \"Trail City\"\n}, {\n  \"ELLSWORTHAFB\": \"Ellsworth Afb\"\n}, {\n  \"BELLEFOURCHE\": \"Belle Fourche\"\n}, {\n  \"BLACKHAWK\": \"Black Hawk\"\n}, {\n  \"BOXELDER\": \"Box Elder\"\n}, {\n  \"BUFFALOGAP\": \"Buffalo Gap\"\n}, {\n  \"CAMPCROOK\": \"Camp Crook\"\n}, {\n  \"ELMSPRINGS\": \"Elm Springs\"\n}, {\n  \"MUDBUTTE\": \"Mud Butte\"\n}, {\n  \"NEWUNDERWOOD\": \"New Underwood\"\n}, {\n  \"REDOWL\": \"Red Owl\"\n}, {\n  \"SAINTONGE\": \"Saint Onge\"\n}, {\n  \"WHITEOWL\": \"White Owl\"\n}, {\n  \"WOUNDEDKNEE\": \"Wounded Knee\"\n}, {\n  \"FORTRANSOM\": \"Fort Ransom\"\n}, {\n  \"WESTFARGO\": \"West Fargo\"\n}, {\n  \"GRANDFORKS\": \"Grand Forks\"\n}, {\n  \"GRANDFORKSAFB\": \"Grand Forks Afb\"\n}, {\n  \"FORESTRIVER\": \"Forest River\"\n}, {\n  \"PARKRIVER\": \"Park River\"\n}, {\n  \"DEVILSLAKE\": \"Devils Lake\"\n}, {\n  \"CHURCHSFERRY\": \"Churchs Ferry\"\n}, {\n  \"FORTTOTTEN\": \"Fort Totten\"\n}, {\n  \"NEWROCKFORD\": \"New Rockford\"\n}, {\n  \"WILLOWCITY\": \"Willow City\"\n}, {\n  \"GRACECITY\": \"Grace City\"\n}, {\n  \"CANNONBALL\": \"Cannon Ball\"\n}, {\n  \"FORTYATES\": \"Fort Yates\"\n}, {\n  \"GOLDENVALLEY\": \"Golden Valley\"\n}, {\n  \"NEWLEIPZIG\": \"New Leipzig\"\n}, {\n  \"DUNNCENTER\": \"Dunn Center\"\n}, {\n  \"GLENULLIN\": \"Glen Ullin\"\n}, {\n  \"GRASSYBUTTE\": \"Grassy Butte\"\n}, {\n  \"NEWENGLAND\": \"New England\"\n}, {\n  \"SENTINELBUTTE\": \"Sentinel Butte\"\n}, {\n  \"SOUTHHEART\": \"South Heart\"\n}, {\n  \"MINOTAFB\": \"Minot Afb\"\n}, {\n  \"DESLACS\": \"Des Lacs\"\n}, {\n  \"WATFORDCITY\": \"Watford City\"\n}, {\n  \"BIGTIMBER\": \"Big Timber\"\n}, {\n  \"CLYDEPARK\": \"Clyde Park\"\n}, {\n  \"COOKECITY\": \"Cooke City\"\n}, {\n  \"CROWAGENCY\": \"Crow Agency\"\n}, {\n  \"GRASSRANGE\": \"Grass Range\"\n}, {\n  \"LAMEDEER\": \"Lame Deer\"\n}, {\n  \"LODGEGRASS\": \"Lodge Grass\"\n}, {\n  \"MCLEOD\": \"Mc Leod\"\n}, {\n  \"POMPEYSPILLAR\": \"Pompeys Pillar\"\n}, {\n  \"REDLODGE\": \"Red Lodge\"\n}, {\n  \"REEDPOINT\": \"Reed Point\"\n}, {\n  \"SAINTXAVIER\": \"Saint Xavier\"\n}, {\n  \"SANDSPRINGS\": \"Sand Springs\"\n}, {\n  \"SILVERGATE\": \"Silver Gate\"\n}, {\n  \"TWODOT\": \"Two Dot\"\n}, {\n  \"WOLFPOINT\": \"Wolf Point\"\n}, {\n  \"FORTPECK\": \"Fort Peck\"\n}, {\n  \"SAINTMARIE\": \"Saint Marie\"\n}, {\n  \"MCCABE\": \"Mc Cabe\"\n}, {\n  \"MEDICINELAKE\": \"Medicine Lake\"\n}, {\n  \"MILESCITY\": \"Miles City\"\n}, {\n  \"MALMSTROMAFB\": \"Malmstrom A F B\"\n}, {\n  \"BLACKEAGLE\": \"Black Eagle\"\n}, {\n  \"COFFEECREEK\": \"Coffee Creek\"\n}, {\n  \"CUTBANK\": \"Cut Bank\"\n}, {\n  \"EASTGLACIERPARK\": \"East Glacier Park\"\n}, {\n  \"FORTBENTON\": \"Fort Benton\"\n}, {\n  \"FORTSHAW\": \"Fort Shaw\"\n}, {\n  \"HEARTBUTTE\": \"Heart Butte\"\n}, {\n  \"JUDITHGAP\": \"Judith Gap\"\n}, {\n  \"SANDCOULEE\": \"Sand Coulee\"\n}, {\n  \"SANTARITA\": \"Santa Rita\"\n}, {\n  \"SUNRIVER\": \"Sun River\"\n}, {\n  \"SWEETGRASS\": \"Sweet Grass\"\n}, {\n  \"CANYONCREEK\": \"Canyon Creek\"\n}, {\n  \"EASTHELENA\": \"East Helena\"\n}, {\n  \"FORTHARRISON\": \"Fort Harrison\"\n}, {\n  \"WOLFCREEK\": \"Wolf Creek\"\n}, {\n  \"BIGSKY\": \"Big Sky\"\n}, {\n  \"GALLATINGATEWAY\": \"Gallatin Gateway\"\n}, {\n  \"GOLDCREEK\": \"Gold Creek\"\n}, {\n  \"MCALLISTER\": \"Mc Allister\"\n}, {\n  \"SILVERSTAR\": \"Silver Star\"\n}, {\n  \"THREEFORKS\": \"Three Forks\"\n}, {\n  \"TWINBRIDGES\": \"Twin Bridges\"\n}, {\n  \"VIRGINIACITY\": \"Virginia City\"\n}, {\n  \"WESTYELLOWSTONE\": \"West Yellowstone\"\n}, {\n  \"WILLOWCREEK\": \"Willow Creek\"\n}, {\n  \"WISERIVER\": \"Wise River\"\n}, {\n  \"DEBORGIA\": \"De Borgia\"\n}, {\n  \"SAINTIGNATIUS\": \"Saint Ignatius\"\n}, {\n  \"SAINTREGIS\": \"Saint Regis\"\n}, {\n  \"SEELEYLAKE\": \"Seeley Lake\"\n}, {\n  \"THOMPSONFALLS\": \"Thompson Falls\"\n}, {\n  \"BIGARM\": \"Big Arm\"\n}, {\n  \"HUNGRYHORSE\": \"Hungry Horse\"\n}, {\n  \"LAKEMCDONALD\": \"Lake Mc Donald\"\n}, {\n  \"MARTINCITY\": \"Martin City\"\n}, {\n  \"WESTGLACIER\": \"West Glacier\"\n}, {\n  \"ELKGROVEVILLAGE\": \"Elk Grove Village\"\n}, {\n  \"ROLLINGMEADOWS\": \"Rolling Meadows\"\n}, {\n  \"DESPLAINES\": \"Des Plaines\"\n}, {\n  \"FOXRIVERGROVE\": \"Fox River Grove\"\n}, {\n  \"GLENVIEWNAS\": \"Glenview Nas\"\n}, {\n  \"FORTSHERIDAN\": \"Fort Sheridan\"\n}, {\n  \"ISLANDLAKE\": \"Island Lake\"\n}, {\n  \"LAKEBLUFF\": \"Lake Bluff\"\n}, {\n  \"LAKEFOREST\": \"Lake Forest\"\n}, {\n  \"LAKEVILLA\": \"Lake Villa\"\n}, {\n  \"LAKEZURICH\": \"Lake Zurich\"\n}, {\n  \"MORTONGROVE\": \"Morton Grove\"\n}, {\n  \"MOUNTPROSPECT\": \"Mount Prospect\"\n}, {\n  \"VERNONHILLS\": \"Vernon Hills\"\n}, {\n  \"NORTHCHICAGO\": \"North Chicago\"\n}, {\n  \"PROSPECTHEIGHTS\": \"Prospect Heights\"\n}, {\n  \"SOLONMILLS\": \"Solon Mills\"\n}, {\n  \"GREATLAKES\": \"Great Lakes\"\n}, {\n  \"BUFFALOGROVE\": \"Buffalo Grove\"\n}, {\n  \"WINTHROPHARBOR\": \"Winthrop Harbor\"\n}, {\n  \"WONDERLAKE\": \"Wonder Lake\"\n}, {\n  \"CAROLSTREAM\": \"Carol Stream\"\n}, {\n  \"HANOVERPARK\": \"Hanover Park\"\n}, {\n  \"GLENELLYN\": \"Glen Ellyn\"\n}, {\n  \"GLENDALEHEIGHTS\": \"Glendale Heights\"\n}, {\n  \"MAPLEPARK\": \"Maple Park\"\n}, {\n  \"LAKEINTHEHILLS\": \"Lake In The Hills\"\n}, {\n  \"MELROSEPARK\": \"Melrose Park\"\n}, {\n  \"STONEPARK\": \"Stone Park\"\n}, {\n  \"PLATOCENTER\": \"Plato Center\"\n}, {\n  \"RIVERGROVE\": \"River Grove\"\n}, {\n  \"SCHILLERPARK\": \"Schiller Park\"\n}, {\n  \"SOUTHELGIN\": \"South Elgin\"\n}, {\n  \"HOFFMANESTATES\": \"Hoffman Estates\"\n}, {\n  \"VILLAPARK\": \"Villa Park\"\n}, {\n  \"WESTCHICAGO\": \"West Chicago\"\n}, {\n  \"WOODDALE\": \"Wood Dale\"\n}, {\n  \"RIVERFOREST\": \"River Forest\"\n}, {\n  \"BLUEISLAND\": \"Blue Island\"\n}, {\n  \"CALUMETCITY\": \"Calumet City\"\n}, {\n  \"CHICAGOHEIGHTS\": \"Chicago Heights\"\n}, {\n  \"CHICAGORIDGE\": \"Chicago Ridge\"\n}, {\n  \"HAZELCREST\": \"Hazel Crest\"\n}, {\n  \"NEWLENOX\": \"New Lenox\"\n}, {\n  \"OAKFOREST\": \"Oak Forest\"\n}, {\n  \"OAKLAWN\": \"Oak Lawn\"\n}, {\n  \"HICKORYHILLS\": \"Hickory Hills\"\n}, {\n  \"OLYMPIAFIELDS\": \"Olympia Fields\"\n}, {\n  \"ORLANDPARK\": \"Orland Park\"\n}, {\n  \"PALOSHEIGHTS\": \"Palos Heights\"\n}, {\n  \"PALOSPARK\": \"Palos Park\"\n}, {\n  \"PALOSHILLS\": \"Palos Hills\"\n}, {\n  \"PARKFOREST\": \"Park Forest\"\n}, {\n  \"RICHTONPARK\": \"Richton Park\"\n}, {\n  \"SOUTHHOLLAND\": \"South Holland\"\n}, {\n  \"SOUTHWILMINGTON\": \"South Wilmington\"\n}, {\n  \"TINLEYPARK\": \"Tinley Park\"\n}, {\n  \"COUNTRYCLUBHILLS\": \"Country Club Hills\"\n}, {\n  \"WILLOWSPRINGS\": \"Willow Springs\"\n}, {\n  \"BEDFORDPARK\": \"Bedford Park\"\n}, {\n  \"SUMMITARGO\": \"Summit Argo\"\n}, {\n  \"CLARENDONHILLS\": \"Clarendon Hills\"\n}, {\n  \"DOWNERSGROVE\": \"Downers Grove\"\n}, {\n  \"OAKBROOK\": \"Oak Brook\"\n}, {\n  \"LAGRANGEPARK\": \"La Grange Park\"\n}, {\n  \"NORTHAURORA\": \"North Aurora\"\n}, {\n  \"WESTERNSPRINGS\": \"Western Springs\"\n}, {\n  \"FOXVALLEY\": \"Fox Valley\"\n}, {\n  \"AMFOHARE\": \"Amf Ohare\"\n}, {\n  \"HARWOODHEIGHTS\": \"Harwood Heights\"\n}, {\n  \"EVERGREENPARK\": \"Evergreen Park\"\n}, {\n  \"AROMAPARK\": \"Aroma Park\"\n}, {\n  \"CISSNAPARK\": \"Cissna Park\"\n}, {\n  \"GIBSONCITY\": \"Gibson City\"\n}, {\n  \"GRANTPARK\": \"Grant Park\"\n}, {\n  \"HOPKINSPARK\": \"Hopkins Park\"\n}, {\n  \"PIPERCITY\": \"Piper City\"\n}, {\n  \"SAINTANNE\": \"Saint Anne\"\n}, {\n  \"APPLERIVER\": \"Apple River\"\n}, {\n  \"DAVISJUNCTION\": \"Davis Junction\"\n}, {\n  \"EASTDUBUQUE\": \"East Dubuque\"\n}, {\n  \"FRANKLINGROVE\": \"Franklin Grove\"\n}, {\n  \"GARDENPRAIRIE\": \"Garden Prairie\"\n}, {\n  \"GERMANVALLEY\": \"German Valley\"\n}, {\n  \"LEAFRIVER\": \"Leaf River\"\n}, {\n  \"MCCONNELL\": \"Mc Connell\"\n}, {\n  \"MONROECENTER\": \"Monroe Center\"\n}, {\n  \"MOUNTCARROLL\": \"Mount Carroll\"\n}, {\n  \"PEARLCITY\": \"Pearl City\"\n}, {\n  \"POPLARGROVE\": \"Poplar Grove\"\n}, {\n  \"ROCKCITY\": \"Rock City\"\n}, {\n  \"SCALESMOUND\": \"Scales Mound\"\n}, {\n  \"SCIOTOMILLS\": \"Scioto Mills\"\n}, {\n  \"SOUTHBELOIT\": \"South Beloit\"\n}, {\n  \"STILLMANVALLEY\": \"Stillman Valley\"\n}, {\n  \"LOVESPARK\": \"Loves Park\"\n}, {\n  \"MACHESNEYPARK\": \"Machesney Park\"\n}, {\n  \"BUFFALOPRAIRIE\": \"Buffalo Prairie\"\n}, {\n  \"CARBONCLIFF\": \"Carbon Cliff\"\n}, {\n  \"COALVALLEY\": \"Coal Valley\"\n}, {\n  \"DEERGROVE\": \"Deer Grove\"\n}, {\n  \"EASTMOLINE\": \"East Moline\"\n}, {\n  \"ILLINOISCITY\": \"Illinois City\"\n}, {\n  \"LYNNCENTER\": \"Lynn Center\"\n}, {\n  \"RAPIDSCITY\": \"Rapids City\"\n}, {\n  \"TAYLORRIDGE\": \"Taylor Ridge\"\n}, {\n  \"CEDARPOINT\": \"Cedar Point\"\n}, {\n  \"LAMOILLE\": \"La Moille\"\n}, {\n  \"LONGPOINT\": \"Long Point\"\n}, {\n  \"MCNABB\": \"Mc Nabb\"\n}, {\n  \"TROYGROVE\": \"Troy Grove\"\n}, {\n  \"VANORIN\": \"Van Orin\"\n}, {\n  \"WESTBROOKLYN\": \"West Brooklyn\"\n}, {\n  \"BISHOPHILL\": \"Bishop Hill\"\n}, {\n  \"CAMPGROVE\": \"Camp Grove\"\n}, {\n  \"EASTGALESBURG\": \"East Galesburg\"\n}, {\n  \"LAHARPE\": \"La Harpe\"\n}, {\n  \"NORTHHENDERSON\": \"North Henderson\"\n}, {\n  \"TABLEGROVE\": \"Table Grove\"\n}, {\n  \"HANNACITY\": \"Hanna City\"\n}, {\n  \"KINGSTONMINES\": \"Kingston Mines\"\n}, {\n  \"LAROSE\": \"La Rose\"\n}, {\n  \"LONDONMILLS\": \"London Mills\"\n}, {\n  \"SOUTHPEKIN\": \"South Pekin\"\n}, {\n  \"YATESCITY\": \"Yates City\"\n}, {\n  \"CREVECOEUR\": \"Creve Coeur\"\n}, {\n  \"EASTPEORIA\": \"East Peoria\"\n}, {\n  \"ELPASO\": \"El Paso\"\n}, {\n  \"DELAND\": \"De Land\"\n}, {\n  \"FARMERCITY\": \"Farmer City\"\n}, {\n  \"RIDGEFARM\": \"Ridge Farm\"\n}, {\n  \"WHITEHEATH\": \"White Heath\"\n}, {\n  \"DALTONCITY\": \"Dalton City\"\n}, {\n  \"LAPLACE\": \"La Place\"\n}, {\n  \"VILLAGROVE\": \"Villa Grove\"\n}, {\n  \"COTTAGEHILLS\": \"Cottage Hills\"\n}, {\n  \"EASTALTON\": \"East Alton\"\n}, {\n  \"GLENCARBON\": \"Glen Carbon\"\n}, {\n  \"GOLDENEAGLE\": \"Golden Eagle\"\n}, {\n  \"GRANITECITY\": \"Granite City\"\n}, {\n  \"NATIONALSTOCKYARDS\": \"National Stock Yards\"\n}, {\n  \"NEWDOUGLAS\": \"New Douglas\"\n}, {\n  \"SOUTHROXANA\": \"South Roxana\"\n}, {\n  \"TAYLORSPRINGS\": \"Taylor Springs\"\n}, {\n  \"WOODRIVER\": \"Wood River\"\n}, {\n  \"EASTSAINTLOUIS\": \"East Saint Louis\"\n}, {\n  \"FAIRVIEWHEIGHTS\": \"Fairview Heights\"\n}, {\n  \"SCOTTAIRFORCEBASE\": \"Scott Air Force Base\"\n}, {\n  \"EASTCARONDELET\": \"East Carondelet\"\n}, {\n  \"ELLISGROVE\": \"Ellis Grove\"\n}, {\n  \"MULBERRYGROVE\": \"Mulberry Grove\"\n}, {\n  \"NEWBADEN\": \"New Baden\"\n}, {\n  \"NEWMEMPHIS\": \"New Memphis\"\n}, {\n  \"OFALLON\": \"O Fallon\"\n}, {\n  \"PRAIRIEDUROCHER\": \"Prairie Du Rocher\"\n}, {\n  \"REDBUD\": \"Red Bud\"\n}, {\n  \"SAINTJACOB\": \"Saint Jacob\"\n}, {\n  \"SAINTLIBORY\": \"Saint Libory\"\n}, {\n  \"CAMPPOINT\": \"Camp Point\"\n}, {\n  \"DALLASCITY\": \"Dallas City\"\n}, {\n  \"LAPRAIRIE\": \"La Prairie\"\n}, {\n  \"BEECHERCITY\": \"Beecher City\"\n}, {\n  \"MOUNTERIE\": \"Mount Erie\"\n}, {\n  \"SAINTEMARIE\": \"Sainte Marie\"\n}, {\n  \"SAINTFRANCISVILLE\": \"Saint Francisville\"\n}, {\n  \"WESTYORK\": \"West York\"\n}, {\n  \"BLUEMOUND\": \"Blue Mound\"\n}, {\n  \"LAKEFORK\": \"Lake Fork\"\n}, {\n  \"MOUNTPULASKI\": \"Mount Pulaski\"\n}, {\n  \"MTZION\": \"Mt Zion\"\n}, {\n  \"TOWERHILL\": \"Tower Hill\"\n}, {\n  \"BLUFFSPRINGS\": \"Bluff Springs\"\n}, {\n  \"LINCOLN'SNEWSALEM\": \"Lincoln's New Salem\"\n}, {\n  \"PLEASANTPLAINS\": \"Pleasant Plains\"\n}, {\n  \"SANJOSE\": \"San Jose\"\n}, {\n  \"STANDARDCITY\": \"Standard City\"\n}, {\n  \"BELLERIVE\": \"Belle Rive\"\n}, {\n  \"BONEGAP\": \"Bone Gap\"\n}, {\n  \"BURNTPRAIRIE\": \"Burnt Prairie\"\n}, {\n  \"DUQUOIN\": \"Du Quoin\"\n}, {\n  \"FRANKFORTHEIGHTS\": \"Frankfort Heights\"\n}, {\n  \"FREEMANSPUR\": \"Freeman Spur\"\n}, {\n  \"GOLDENGATE\": \"Golden Gate\"\n}, {\n  \"MCLEANSBORO\": \"Mc Leansboro\"\n}, {\n  \"MILLSHOALS\": \"Mill Shoals\"\n}, {\n  \"NORRISCITY\": \"Norris City\"\n}, {\n  \"SAILORSPRINGS\": \"Sailor Springs\"\n}, {\n  \"WALNUTHILL\": \"Walnut Hill\"\n}, {\n  \"WAYNECITY\": \"Wayne City\"\n}, {\n  \"WESTFRANKFORT\": \"West Frankfort\"\n}, {\n  \"ALTOPASS\": \"Alto Pass\"\n}, {\n  \"CAMPBELLHILL\": \"Campbell Hill\"\n}, {\n  \"CARRIERMILLS\": \"Carrier Mills\"\n}, {\n  \"CAVEINROCK\": \"Cave In Rock\"\n}, {\n  \"CREALSPRINGS\": \"Creal Springs\"\n}, {\n  \"GRANDCHAIN\": \"Grand Chain\"\n}, {\n  \"GRANDTOWER\": \"Grand Tower\"\n}, {\n  \"JOHNSTONCITY\": \"Johnston City\"\n}, {\n  \"KARBERSRIDGE\": \"Karbers Ridge\"\n}, {\n  \"NEWBURNSIDE\": \"New Burnside\"\n}, {\n  \"VILLARIDGE\": \"Villa Ridge\"\n}, {\n  \"CRYSTALCITY\": \"Crystal City\"\n}, {\n  \"FRENCHVILLAGE\": \"French Village\"\n}, {\n  \"GRAYSUMMIT\": \"Gray Summit\"\n}, {\n  \"MARYLANDHEIGHTS\": \"Maryland Heights\"\n}, {\n  \"EARTHCITY\": \"Earth City\"\n}, {\n  \"HIGHRIDGE\": \"High Ridge\"\n}, {\n  \"HOUSESPRINGS\": \"House Springs\"\n}, {\n  \"MORSEMILL\": \"Morse Mill\"\n}, {\n  \"SAINTANN\": \"Saint Ann\"\n}, {\n  \"VALLESMINES\": \"Valles Mines\"\n}, {\n  \"HAWKPOINT\": \"Hawk Point\"\n}, {\n  \"HIGHHILL\": \"High Hill\"\n}, {\n  \"MONTGOMERYCITY\": \"Montgomery City\"\n}, {\n  \"MOSCOWMILLS\": \"Moscow Mills\"\n}, {\n  \"NEWMELLE\": \"New Melle\"\n}, {\n  \"LAKESAINTLOUIS\": \"Lake Saint Louis\"\n}, {\n  \"OLDMONROE\": \"Old Monroe\"\n}, {\n  \"PORTAGEDESSIOUX\": \"Portage Des Sioux\"\n}, {\n  \"WESTALTON\": \"West Alton\"\n}, {\n  \"WRIGHTCITY\": \"Wright City\"\n}, {\n  \"KNOXCITY\": \"Knox City\"\n}, {\n  \"SAINTPATRICK\": \"Saint Patrick\"\n}, {\n  \"GREENCASTLE\": \"Green Castle\"\n}, {\n  \"GREENCITY\": \"Green City\"\n}, {\n  \"NEWCAMBRIA\": \"New Cambria\"\n}, {\n  \"QUEENCITY\": \"Queen City\"\n}, {\n  \"PARKHILLS\": \"Park Hills\"\n}, {\n  \"BONNETERRE\": \"Bonne Terre\"\n}, {\n  \"DESARC\": \"Des Arc\"\n}, {\n  \"DOERUN\": \"Doe Run\"\n}, {\n  \"MIDDLEBROOK\": \"Middle Brook\"\n}, {\n  \"NEWOFFENBURG\": \"New Offenburg\"\n}, {\n  \"PILOTKNOB\": \"Pilot Knob\"\n}, {\n  \"SAINTEGENEVIEVE\": \"Sainte Genevieve\"\n}, {\n  \"CAPEGIRARDEAU\": \"Cape Girardeau\"\n}, {\n  \"BELLCITY\": \"Bell City\"\n}, {\n  \"MCGEE\": \"Mc Gee\"\n}, {\n  \"OLDAPPLETON\": \"Old Appleton\"\n}, {\n  \"MCBRIDE\": \"Mc Bride\"\n}, {\n  \"SCOTTCITY\": \"Scott City\"\n}, {\n  \"BRAGGCITY\": \"Bragg City\"\n}, {\n  \"EASTPRAIRIE\": \"East Prairie\"\n}, {\n  \"NEWMADRID\": \"New Madrid\"\n}, {\n  \"WOLFISLAND\": \"Wolf Island\"\n}, {\n  \"POPLARBLUFF\": \"Poplar Bluff\"\n}, {\n  \"BATESCITY\": \"Bates City\"\n}, {\n  \"CAMDENPOINT\": \"Camden Point\"\n}, {\n  \"EXCELSIORSPRINGS\": \"Excelsior Springs\"\n}, {\n  \"GRAINVALLEY\": \"Grain Valley\"\n}, {\n  \"LEESSUMMIT\": \"Lees Summit\"\n}, {\n  \"LONEJACK\": \"Lone Jack\"\n}, {\n  \"MISSOURICITY\": \"Missouri City\"\n}, {\n  \"PLATTECITY\": \"Platte City\"\n}, {\n  \"KANSASCITY\": \"Kansas City\"\n}, {\n  \"BURLINGTONJUNCTION\": \"Burlington Junction\"\n}, {\n  \"CONCEPTIONJUNCTION\": \"Conception Junction\"\n}, {\n  \"GRANTCITY\": \"Grant City\"\n}, {\n  \"KINGCITY\": \"King City\"\n}, {\n  \"ROCKPORT\": \"Rock Port\"\n}, {\n  \"GILMANCITY\": \"Gilman City\"\n}, {\n  \"LOCKSPRINGS\": \"Lock Springs\"\n}, {\n  \"MCFALL\": \"Mc Fall\"\n}, {\n  \"APPLETONCITY\": \"Appleton City\"\n}, {\n  \"EASTLYNNE\": \"East Lynne\"\n}, {\n  \"ELDORADOSPRINGS\": \"El Dorado Springs\"\n}, {\n  \"GOLDENCITY\": \"Golden City\"\n}, {\n  \"JERICOSPRINGS\": \"Jerico Springs\"\n}, {\n  \"LOWRYCITY\": \"Lowry City\"\n}, {\n  \"RICHHILL\": \"Rich Hill\"\n}, {\n  \"SCHELLCITY\": \"Schell City\"\n}, {\n  \"CARLJUNCTION\": \"Carl Junction\"\n}, {\n  \"LARUSSELL\": \"La Russell\"\n}, {\n  \"NECKCITY\": \"Neck City\"\n}, {\n  \"ROCKYCOMFORT\": \"Rocky Comfort\"\n}, {\n  \"SOUTHWESTCITY\": \"South West City\"\n}, {\n  \"STARKCITY\": \"Stark City\"\n}, {\n  \"TIFFCITY\": \"Tiff City\"\n}, {\n  \"WEBBCITY\": \"Webb City\"\n}, {\n  \"BONNOTSMILL\": \"Bonnots Mill\"\n}, {\n  \"CEDARCITY\": \"Cedar City\"\n}, {\n  \"GRAVOISMILLS\": \"Gravois Mills\"\n}, {\n  \"HOLTSSUMMIT\": \"Holts Summit\"\n}, {\n  \"LAKEOZARK\": \"Lake Ozark\"\n}, {\n  \"LINNCREEK\": \"Linn Creek\"\n}, {\n  \"LOOSECREEK\": \"Loose Creek\"\n}, {\n  \"MCGIRK\": \"Mc Girk\"\n}, {\n  \"OSAGEBEACH\": \"Osage Beach\"\n}, {\n  \"PRAIRIEHOME\": \"Prairie Home\"\n}, {\n  \"SAINTELIZABETH\": \"Saint Elizabeth\"\n}, {\n  \"SUNRISEBEACH\": \"Sunrise Beach\"\n}, {\n  \"BENTONCITY\": \"Benton City\"\n}, {\n  \"CLIFTONHILL\": \"Clifton Hill\"\n}, {\n  \"KINGDOMCITY\": \"Kingdom City\"\n}, {\n  \"NEWFRANKLIN\": \"New Franklin\"\n}, {\n  \"RUSHHILL\": \"Rush Hill\"\n}, {\n  \"WHITEMANAIRFORCEBASE\": \"Whiteman Air Force Base\"\n}, {\n  \"ARROWROCK\": \"Arrow Rock\"\n}, {\n  \"CLIMAXSPRINGS\": \"Climax Springs\"\n}, {\n  \"COLECAMP\": \"Cole Camp\"\n}, {\n  \"GREENRIDGE\": \"Green Ridge\"\n}, {\n  \"KNOBNOSTER\": \"Knob Noster\"\n}, {\n  \"LAMONTE\": \"La Monte\"\n}, {\n  \"MALTABEND\": \"Malta Bend\"\n}, {\n  \"SWEETSPRINGS\": \"Sweet Springs\"\n}, {\n  \"BIRCHTREE\": \"Birch Tree\"\n}, {\n  \"COOKSTATION\": \"Cook Station\"\n}, {\n  \"DEVILSELBOW\": \"Devils Elbow\"\n}, {\n  \"EDGARSPRINGS\": \"Edgar Springs\"\n}, {\n  \"FORTLEONARDWOOD\": \"Fort Leonard Wood\"\n}, {\n  \"LAKESPRING\": \"Lake Spring\"\n}, {\n  \"MOUNTAINVIEW\": \"Mountain View\"\n}, {\n  \"SAINTROBERT\": \"Saint Robert\"\n}, {\n  \"LONGLANE\": \"Long Lane\"\n}, {\n  \"ASHGROVE\": \"Ash Grove\"\n}, {\n  \"CAPLINGERMILLS\": \"Caplinger Mills\"\n}, {\n  \"BLUEEYE\": \"Blue Eye\"\n}, {\n  \"BOISDARC\": \"Bois D Arc\"\n}, {\n  \"BROOKLINESTATION\": \"Brookline Station\"\n}, {\n  \"CAPEFAIR\": \"Cape Fair\"\n}, {\n  \"CROSSTIMBERS\": \"Cross Timbers\"\n}, {\n  \"FAIRGROVE\": \"Fair Grove\"\n}, {\n  \"HALFWAY\": \"Half Way\"\n}, {\n  \"KISSEEMILLS\": \"Kissee Mills\"\n}, {\n  \"KIMBERLINGCITY\": \"Kimberling City\"\n}, {\n  \"MCCLURG\": \"Mc Clurg\"\n}, {\n  \"MOUNTAINGROVE\": \"Mountain Grove\"\n}, {\n  \"PIERCECITY\": \"Pierce City\"\n}, {\n  \"PLEASANTHOPE\": \"Pleasant Hope\"\n}, {\n  \"REEDSSPRING\": \"Reeds Spring\"\n}, {\n  \"ROCKAWAYBEACH\": \"Rockaway Beach\"\n}, {\n  \"SHELLKNOB\": \"Shell Knob\"\n}, {\n  \"SOUTHGREENFIELD\": \"South Greenfield\"\n}, {\n  \"STOTTSCITY\": \"Stotts City\"\n}, {\n  \"WALNUTSHADE\": \"Walnut Shade\"\n}, {\n  \"WESTPLAINS\": \"West Plains\"\n}, {\n  \"MACKSCREEK\": \"Macks Creek\"\n}, {\n  \"PEACEVALLEY\": \"Peace Valley\"\n}, {\n  \"BALDWINCITY\": \"Baldwin City\"\n}, {\n  \"BONNERSPRINGS\": \"Bonner Springs\"\n}, {\n  \"CLEARVIEWCITY\": \"Clearview City\"\n}, {\n  \"FORTLEAVENWORTH\": \"Fort Leavenworth\"\n}, {\n  \"NEWCENTURY\": \"New Century\"\n}, {\n  \"LACYGNE\": \"La Cygne\"\n}, {\n  \"MCLOUTH\": \"Mc Louth\"\n}, {\n  \"SHAWNEEMISSION\": \"Shawnee Mission\"\n}, {\n  \"BLUERAPIDS\": \"Blue Rapids\"\n}, {\n  \"FORTRILEY\": \"Fort Riley\"\n}, {\n  \"OSAGECITY\": \"Osage City\"\n}, {\n  \"FORTSCOTT\": \"Fort Scott\"\n}, {\n  \"BAXTERSPRINGS\": \"Baxter Springs\"\n}, {\n  \"MCCUNE\": \"Mc Cune\"\n}, {\n  \"NEOSHOFALLS\": \"Neosho Falls\"\n}, {\n  \"WESTMINERAL\": \"West Mineral\"\n}, {\n  \"YATESCENTER\": \"Yates Center\"\n}, {\n  \"COTTONWOODFALLS\": \"Cottonwood Falls\"\n}, {\n  \"COUNCILGROVE\": \"Council Grove\"\n}, {\n  \"LOSTSPRINGS\": \"Lost Springs\"\n}, {\n  \"MATFIELDGREEN\": \"Matfield Green\"\n}, {\n  \"NEOSHORAPIDS\": \"Neosho Rapids\"\n}, {\n  \"STRONGCITY\": \"Strong City\"\n}, {\n  \"WHITECITY\": \"White City\"\n}, {\n  \"SMITHCENTER\": \"Smith Center\"\n}, {\n  \"ARKANSASCITY\": \"Arkansas City\"\n}, {\n  \"CEDARVALE\": \"Cedar Vale\"\n}, {\n  \"CONWAYSPRINGS\": \"Conway Springs\"\n}, {\n  \"ELDORADO\": \"El Dorado\"\n}, {\n  \"GARDENPLAIN\": \"Garden Plain\"\n}, {\n  \"GEUDASPRINGS\": \"Geuda Springs\"\n}, {\n  \"MEDICINELODGE\": \"Medicine Lodge\"\n}, {\n  \"NORTHNEWTON\": \"North Newton\"\n}, {\n  \"VALLEYCENTER\": \"Valley Center\"\n}, {\n  \"MCCONNELLAFB\": \"Mcconnell Afb\"\n}, {\n  \"ELKCITY\": \"Elk City\"\n}, {\n  \"ELKFALLS\": \"Elk Falls\"\n}, {\n  \"MOUNDVALLEY\": \"Mound Valley\"\n}, {\n  \"CAWKERCITY\": \"Cawker City\"\n}, {\n  \"GLENELDER\": \"Glen Elder\"\n}, {\n  \"SYLVANGROVE\": \"Sylvan Grove\"\n}, {\n  \"SOUTHHUTCHINSON\": \"South Hutchinson\"\n}, {\n  \"MCCRACKEN\": \"Mc Cracken\"\n}, {\n  \"NESSCITY\": \"Ness City\"\n}, {\n  \"PAWNEEROCK\": \"Pawnee Rock\"\n}, {\n  \"PRETTYPRAIRIE\": \"Pretty Prairie\"\n}, {\n  \"RUSHCENTER\": \"Rush Center\"\n}, {\n  \"PRAIRIEVIEW\": \"Prairie View\"\n}, {\n  \"WAKEENEY\": \"Wa Keeney\"\n}, {\n  \"BIRDCITY\": \"Bird City\"\n}, {\n  \"DODGECITY\": \"Dodge City\"\n}, {\n  \"BOYSTOWN\": \"Boys Town\"\n}, {\n  \"CEDARBLUFFS\": \"Cedar Bluffs\"\n}, {\n  \"CEDARCREEK\": \"Cedar Creek\"\n}, {\n  \"FORTCALHOUN\": \"Fort Calhoun\"\n}, {\n  \"STCOLUMBANS\": \"St Columbans\"\n}, {\n  \"OFFUTTAFB\": \"Offutt A F B\"\n}, {\n  \"LAVISTA\": \"La Vista\"\n}, {\n  \"BEAVERCROSSING\": \"Beaver Crossing\"\n}, {\n  \"FALLSCITY\": \"Falls City\"\n}, {\n  \"MCCOOLJUNCTION\": \"Mc Cool Junction\"\n}, {\n  \"NEBRASKACITY\": \"Nebraska City\"\n}, {\n  \"PAWNEECITY\": \"Pawnee City\"\n}, {\n  \"PLEASANTDALE\": \"Pleasant Dale\"\n}, {\n  \"STEELECITY\": \"Steele City\"\n}, {\n  \"TABLEROCK\": \"Table Rock\"\n}, {\n  \"WEEPINGWATER\": \"Weeping Water\"\n}, {\n  \"DAVIDCITY\": \"David City\"\n}, {\n  \"MORSEBLUFF\": \"Morse Bluff\"\n}, {\n  \"PLATTECENTER\": \"Platte Center\"\n}, {\n  \"RISINGCITY\": \"Rising City\"\n}, {\n  \"SAINTEDWARD\": \"Saint Edward\"\n}, {\n  \"MEADOWGROVE\": \"Meadow Grove\"\n}, {\n  \"NEWMANGROVE\": \"Newman Grove\"\n}, {\n  \"SAINTHELENA\": \"Saint Helena\"\n}, {\n  \"SOUTHSIOUXCITY\": \"South Sioux City\"\n}, {\n  \"BROKENBOW\": \"Broken Bow\"\n}, {\n  \"ELMCREEK\": \"Elm Creek\"\n}, {\n  \"LOUPCITY\": \"Loup City\"\n}, {\n  \"NORTHLOUP\": \"North Loup\"\n}, {\n  \"BEAVERCITY\": \"Beaver City\"\n}, {\n  \"GUIDEROCK\": \"Guide Rock\"\n}, {\n  \"REDCLOUD\": \"Red Cloud\"\n}, {\n  \"REPUBLICANCITY\": \"Republican City\"\n}, {\n  \"MCCOOK\": \"Mc Cook\"\n}, {\n  \"HAYESCENTER\": \"Hayes Center\"\n}, {\n  \"NORTHPLATTE\": \"North Platte\"\n}, {\n  \"WILLOWISLAND\": \"Willow Island\"\n}, {\n  \"LONGPINE\": \"Long Pine\"\n}, {\n  \"HAYSPRINGS\": \"Hay Springs\"\n}, {\n  \"DESALLEMANDS\": \"Des Allemands\"\n}, {\n  \"BELLECHASSE\": \"Belle Chasse\"\n}, {\n  \"NEWSARPY\": \"New Sarpy\"\n}, {\n  \"POINTEALAHACHE\": \"Pointe A La Hache\"\n}, {\n  \"PORTSULPHUR\": \"Port Sulphur\"\n}, {\n  \"SAINTBERNARD\": \"Saint Bernard\"\n}, {\n  \"SAINTROSE\": \"Saint Rose\"\n}, {\n  \"NEWORLEANS\": \"New Orleans\"\n}, {\n  \"PIERREPART\": \"Pierre Part\"\n}, {\n  \"BELLEROSE\": \"Belle Rose\"\n}, {\n  \"CUTOFF\": \"Cut Off\"\n}, {\n  \"GOLDENMEADOW\": \"Golden Meadow\"\n}, {\n  \"ABITASPRINGS\": \"Abita Springs\"\n}, {\n  \"AVERYISLAND\": \"Avery Island\"\n}, {\n  \"BREAUXBRIDGE\": \"Breaux Bridge\"\n}, {\n  \"CHURCHPOINT\": \"Church Point\"\n}, {\n  \"GRANDCOTEAU\": \"Grand Coteau\"\n}, {\n  \"LAKEARTHUR\": \"Lake Arthur\"\n}, {\n  \"NEWIBERIA\": \"New Iberia\"\n}, {\n  \"PINEPRAIRIE\": \"Pine Prairie\"\n}, {\n  \"PORTBARRE\": \"Port Barre\"\n}, {\n  \"SAINTMARTINVILLE\": \"Saint Martinville\"\n}, {\n  \"TURKEYCREEK\": \"Turkey Creek\"\n}, {\n  \"VILLEPLATTE\": \"Ville Platte\"\n}, {\n  \"LAKECHARLES\": \"Lake Charles\"\n}, {\n  \"GRANDCHENIER\": \"Grand Chenier\"\n}, {\n  \"DENHAMSPRINGS\": \"Denham Springs\"\n}, {\n  \"BAYOUGOULA\": \"Bayou Goula\"\n}, {\n  \"FRENCHSETTLEMENT\": \"French Settlement\"\n}, {\n  \"GREENWELLSPRINGS\": \"Greenwell Springs\"\n}, {\n  \"GROSSETETE\": \"Grosse Tete\"\n}, {\n  \"KROTZSPRINGS\": \"Krotz Springs\"\n}, {\n  \"NEWROADS\": \"New Roads\"\n}, {\n  \"PORTALLEN\": \"Port Allen\"\n}, {\n  \"SAINTAMANT\": \"Saint Amant\"\n}, {\n  \"SAINTGABRIEL\": \"Saint Gabriel\"\n}, {\n  \"WHITECASTLE\": \"White Castle\"\n}, {\n  \"UNCLESAM\": \"Uncle Sam\"\n}, {\n  \"BATONROUGE\": \"Baton Rouge\"\n}, {\n  \"COTTONVALLEY\": \"Cotton Valley\"\n}, {\n  \"GRANDCANE\": \"Grand Cane\"\n}, {\n  \"HALLSUMMIT\": \"Hall Summit\"\n}, {\n  \"PLAINDEALING\": \"Plain Dealing\"\n}, {\n  \"BARKSDALEAFB\": \"Barksdale Afb\"\n}, {\n  \"BOSSIERCITY\": \"Bossier City\"\n}, {\n  \"FORTNECESSITY\": \"Fort Necessity\"\n}, {\n  \"LAKEPROVIDENCE\": \"Lake Providence\"\n}, {\n  \"MERROUGE\": \"Mer Rouge\"\n}, {\n  \"SAINTLANDRY\": \"Saint Landry\"\n}, {\n  \"SICILYISLAND\": \"Sicily Island\"\n}, {\n  \"DRYPRONG\": \"Dry Prong\"\n}, {\n  \"SAINTMAURICE\": \"Saint Maurice\"\n}, {\n  \"PINEBLUFF\": \"Pine Bluff\"\n}, {\n  \"FOUNTAINHILL\": \"Fountain Hill\"\n}, {\n  \"MCGEHEE\": \"Mc Gehee\"\n}, {\n  \"NEWEDINBURG\": \"New Edinburg\"\n}, {\n  \"MCNEIL\": \"Mc Neil\"\n}, {\n  \"WHELENSPRINGS\": \"Whelen Springs\"\n}, {\n  \"BENLOMOND\": \"Ben Lomond\"\n}, {\n  \"DEQUEEN\": \"De Queen\"\n}, {\n  \"GARLANDCITY\": \"Garland City\"\n}, {\n  \"MCCASKILL\": \"Mc Caskill\"\n}, {\n  \"HOTSPRINGSNATIONALPARK\": \"Hot Springs National Park\"\n}, {\n  \"HOTSPRINGSVILLAGE\": \"Hot Springs Village\"\n}, {\n  \"BOARDCAMP\": \"Board Camp\"\n}, {\n  \"CADDOGAP\": \"Caddo Gap\"\n}, {\n  \"MOUNTAINPINE\": \"Mountain Pine\"\n}, {\n  \"MOUNTIDA\": \"Mount Ida\"\n}, {\n  \"PENCILBLUFF\": \"Pencil Bluff\"\n}, {\n  \"BEEBRANCH\": \"Bee Branch\"\n}, {\n  \"CENTERRIDGE\": \"Center Ridge\"\n}, {\n  \"COTTONPLANT\": \"Cotton Plant\"\n}, {\n  \"CROCKETTSBLUFF\": \"Crocketts Bluff\"\n}, {\n  \"DEVALLSBLUFF\": \"De Valls Bluff\"\n}, {\n  \"COLLEGESTATION\": \"College Station\"\n}, {\n  \"HICKORYPLAINS\": \"Hickory Plains\"\n}, {\n  \"HOLLYGROVE\": \"Holly Grove\"\n}, {\n  \"FAIRFIELDBAY\": \"Fairfield Bay\"\n}, {\n  \"LITTLEROCKAIRFORCEBASE\": \"Little Rock Air Force Base\"\n}, {\n  \"MCCRORY\": \"Mc Crory\"\n}, {\n  \"JONESMILL\": \"Jones Mill\"\n}, {\n  \"NORTHLITTLEROCK\": \"North Little Rock\"\n}, {\n  \"ROSEBUD\": \"Rose Bud\"\n}, {\n  \"SWEETHOME\": \"Sweet Home\"\n}, {\n  \"WESTMEMPHIS\": \"West Memphis\"\n}, {\n  \"FORRESTCITY\": \"Forrest City\"\n}, {\n  \"FRENCHMANSBAYOU\": \"Frenchmans Bayou\"\n}, {\n  \"HICKORYRIDGE\": \"Hickory Ridge\"\n}, {\n  \"MARKEDTREE\": \"Marked Tree\"\n}, {\n  \"SNOWLAKE\": \"Snow Lake\"\n}, {\n  \"WESTHELENA\": \"West Helena\"\n}, {\n  \"WESTRIDGE\": \"West Ridge\"\n}, {\n  \"BLACKOAK\": \"Black Oak\"\n}, {\n  \"BLACKROCK\": \"Black Rock\"\n}, {\n  \"MCDOUGAL\": \"Mc Dougal\"\n}, {\n  \"OKEAN\": \"O Kean\"\n}, {\n  \"PEACHORCHARD\": \"Peach Orchard\"\n}, {\n  \"RAVENDENSPRINGS\": \"Ravenden Springs\"\n}, {\n  \"STATEUNIVERSITY\": \"State University\"\n}, {\n  \"WALNUTRIDGE\": \"Walnut Ridge\"\n}, {\n  \"HORSESHOEBEND\": \"Horseshoe Bend\"\n}, {\n  \"ASHFLAT\": \"Ash Flat\"\n}, {\n  \"CALICOROCK\": \"Calico Rock\"\n}, {\n  \"CHEROKEEVILLAGE\": \"Cherokee Village\"\n}, {\n  \"EVENINGSHADE\": \"Evening Shade\"\n}, {\n  \"FIFTYSIX\": \"Fifty Six\"\n}, {\n  \"HEBERSPRINGS\": \"Heber Springs\"\n}, {\n  \"MAMMOTHSPRING\": \"Mammoth Spring\"\n}, {\n  \"OILTROUGH\": \"Oil Trough\"\n}, {\n  \"SULPHURROCK\": \"Sulphur Rock\"\n}, {\n  \"TUMBLINGSHOALS\": \"Tumbling Shoals\"\n}, {\n  \"VIOLETHILL\": \"Violet Hill\"\n}, {\n  \"BIGFLAT\": \"Big Flat\"\n}, {\n  \"BULLSHOALS\": \"Bull Shoals\"\n}, {\n  \"DIAMONDCITY\": \"Diamond City\"\n}, {\n  \"EUREKASPRINGS\": \"Eureka Springs\"\n}, {\n  \"GREENFOREST\": \"Green Forest\"\n}, {\n  \"LEADHILL\": \"Lead Hill\"\n}, {\n  \"MARBLEFALLS\": \"Marble Falls\"\n}, {\n  \"MOUNTJUDEA\": \"Mount Judea\"\n}, {\n  \"WESTERNGROVE\": \"Western Grove\"\n}, {\n  \"WITTSSPRINGS\": \"Witts Springs\"\n}, {\n  \"BELLAVISTA\": \"Bella Vista\"\n}, {\n  \"CAVESPRINGS\": \"Cave Springs\"\n}, {\n  \"PEARIDGE\": \"Pea Ridge\"\n}, {\n  \"PRAIRIEGROVE\": \"Prairie Grove\"\n}, {\n  \"SILOAMSPRINGS\": \"Siloam Springs\"\n}, {\n  \"WESTFORK\": \"West Fork\"\n}, {\n  \"COALHILL\": \"Coal Hill\"\n}, {\n  \"NEWBLAINE\": \"New Blaine\"\n}, {\n  \"FORTSMITH\": \"Fort Smith\"\n}, {\n  \"NATURALDAM\": \"Natural Dam\"\n}, {\n  \"ELRENO\": \"El Reno\"\n}, {\n  \"FORTCOBB\": \"Fort Cobb\"\n}, {\n  \"NICOMAPARK\": \"Nicoma Park\"\n}, {\n  \"PAULSVALLEY\": \"Pauls Valley\"\n}, {\n  \"RUSHSPRINGS\": \"Rush Springs\"\n}, {\n  \"OKLAHOMACITY\": \"Oklahoma City\"\n}, {\n  \"ELMORECITY\": \"Elmore City\"\n}, {\n  \"GENEAUTRY\": \"Gene Autry\"\n}, {\n  \"LONEGROVE\": \"Lone Grove\"\n}, {\n  \"RATLIFFCITY\": \"Ratliff City\"\n}, {\n  \"FORTSILL\": \"Fort Sill\"\n}, {\n  \"ALTUSAFB\": \"Altus Afb\"\n}, {\n  \"MEDICINEPARK\": \"Medicine Park\"\n}, {\n  \"MOUNTAINPARK\": \"Mountain Park\"\n}, {\n  \"BURNSFLAT\": \"Burns Flat\"\n}, {\n  \"DILLCITY\": \"Dill City\"\n}, {\n  \"LONEWOLF\": \"Lone Wolf\"\n}, {\n  \"CLEOSPRINGS\": \"Cleo Springs\"\n}, {\n  \"PONDCREEK\": \"Pond Creek\"\n}, {\n  \"FORTSUPPLY\": \"Fort Supply\"\n}, {\n  \"BOISECITY\": \"Boise City\"\n}, {\n  \"BROKENARROW\": \"Broken Arrow\"\n}, {\n  \"SCOFFEYVILLE\": \"S Coffeyville\"\n}, {\n  \"BIGCABIN\": \"Big Cabin\"\n}, {\n  \"NORTHMIAMI\": \"North Miami\"\n}, {\n  \"TWINOAKS\": \"Twin Oaks\"\n}, {\n  \"COUNCILHILL\": \"Council Hill\"\n}, {\n  \"FORTGIBSON\": \"Fort Gibson\"\n}, {\n  \"PARKHILL\": \"Park Hill\"\n}, {\n  \"WEBBERSFALLS\": \"Webbers Falls\"\n}, {\n  \"PONCACITY\": \"Ponca City\"\n}, {\n  \"KAWCITY\": \"Kaw City\"\n}, {\n  \"REDROCK\": \"Red Rock\"\n}, {\n  \"FORTTOWSON\": \"Fort Towson\"\n}, {\n  \"MARBLECITY\": \"Marble City\"\n}, {\n  \"SHADYPOINT\": \"Shady Point\"\n}, {\n  \"FLOWERMOUND\": \"Flower Mound\"\n}, {\n  \"GRANDPRAIRIE\": \"Grand Prairie\"\n}, {\n  \"THECOLONY\": \"The Colony\"\n}, {\n  \"LAKEDALLAS\": \"Lake Dallas\"\n}, {\n  \"LITTLEELM\": \"Little Elm\"\n}, {\n  \"CADDOMILLS\": \"Caddo Mills\"\n}, {\n  \"GRANDSALINE\": \"Grand Saline\"\n}, {\n  \"WILLSPOINT\": \"Wills Point\"\n}, {\n  \"ROYSECITY\": \"Royse City\"\n}, {\n  \"ARTHURCITY\": \"Arthur City\"\n}, {\n  \"BENFRANKLIN\": \"Ben Franklin\"\n}, {\n  \"DODDCITY\": \"Dodd City\"\n}, {\n  \"LAKECREEK\": \"Lake Creek\"\n}, {\n  \"LONEOAK\": \"Lone Oak\"\n}, {\n  \"PECANGAP\": \"Pecan Gap\"\n}, {\n  \"SULPHURBLUFF\": \"Sulphur Bluff\"\n}, {\n  \"TOMBEAN\": \"Tom Bean\"\n}, {\n  \"VANALSTYNE\": \"Van Alstyne\"\n}, {\n  \"WOLFECITY\": \"Wolfe City\"\n}, {\n  \"DEBERRY\": \"De Berry\"\n}, {\n  \"ELYSIANFIELDS\": \"Elysian Fields\"\n}, {\n  \"HUGHESSPRINGS\": \"Hughes Springs\"\n}, {\n  \"LAIRDHILL\": \"Laird Hill\"\n}, {\n  \"LONESTAR\": \"Lone Star\"\n}, {\n  \"MOUNTENTERPRISE\": \"Mount Enterprise\"\n}, {\n  \"ORECITY\": \"Ore City\"\n}, {\n  \"SELMANCITY\": \"Selman City\"\n}, {\n  \"BENWHEELER\": \"Ben Wheeler\"\n}, {\n  \"NEWSUMMERFIELD\": \"New Summerfield\"\n}, {\n  \"TENNESSEECOLONY\": \"Tennessee Colony\"\n}, {\n  \"APPLESPRINGS\": \"Apple Springs\"\n}, {\n  \"BONWIER\": \"Bon Wier\"\n}, {\n  \"SANAUGUSTINE\": \"San Augustine\"\n}, {\n  \"GLENROSE\": \"Glen Rose\"\n}, {\n  \"RIOVISTA\": \"Rio Vista\"\n}, {\n  \"FORTWORTH\": \"Fort Worth\"\n}, {\n  \"HALTOMCITY\": \"Haltom City\"\n}, {\n  \"NAVALAIRSTATION/JRB\": \"Naval Air Station/ Jrb\"\n}, {\n  \"NORTHRICHLANDHILLS\": \"North Richland Hills\"\n}, {\n  \"PILOTPOINT\": \"Pilot Point\"\n}, {\n  \"SAINTJO\": \"Saint Jo\"\n}, {\n  \"WICHITAFALLS\": \"Wichita Falls\"\n}, {\n  \"SHEPPARDAFB\": \"Sheppard Afb\"\n}, {\n  \"ARCHERCITY\": \"Archer City\"\n}, {\n  \"IOWAPARK\": \"Iowa Park\"\n}, {\n  \"BLUFFDALE\": \"Bluff Dale\"\n}, {\n  \"DELEON\": \"De Leon\"\n}, {\n  \"MORGANMILL\": \"Morgan Mill\"\n}, {\n  \"RISINGSTAR\": \"Rising Star\"\n}, {\n  \"PALOPINTO\": \"Palo Pinto\"\n}, {\n  \"COPPERASCOVE\": \"Copperas Cove\"\n}, {\n  \"HARKERHEIGHTS\": \"Harker Heights\"\n}, {\n  \"LEONJUNCTION\": \"Leon Junction\"\n}, {\n  \"CHINASPRING\": \"China Spring\"\n}, {\n  \"CRANFILLSGAP\": \"Cranfills Gap\"\n}, {\n  \"ELMMOTT\": \"Elm Mott\"\n}, {\n  \"LAGUNAPARK\": \"Laguna Park\"\n}, {\n  \"MOUNTCALM\": \"Mount Calm\"\n}, {\n  \"PRAIRIEHILL\": \"Prairie Hill\"\n}, {\n  \"VALLEYMILLS\": \"Valley Mills\"\n}, {\n  \"WALNUTSPRINGS\": \"Walnut Springs\"\n}, {\n  \"FORTMCKAVETT\": \"Fort Mc Kavett\"\n}, {\n  \"PEARVALLEY\": \"Pear Valley\"\n}, {\n  \"RICHLANDSPRINGS\": \"Richland Springs\"\n}, {\n  \"SANSABA\": \"San Saba\"\n}, {\n  \"SANTAANNA\": \"Santa Anna\"\n}, {\n  \"VALLEYSPRING\": \"Valley Spring\"\n}, {\n  \"SANANGELO\": \"San Angelo\"\n}, {\n  \"GOODFELLOWAFB\": \"Goodfellow Afb\"\n}, {\n  \"ROBERTLEE\": \"Robert Lee\"\n}, {\n  \"STERLINGCITY\": \"Sterling City\"\n}, {\n  \"NORTHHOUSTON\": \"North Houston\"\n}, {\n  \"NEWCANEY\": \"New Caney\"\n}, {\n  \"CEDARLANE\": \"Cedar Lane\"\n}, {\n  \"CHAPPELLHILL\": \"Chappell Hill\"\n}, {\n  \"EASTBERNARD\": \"East Bernard\"\n}, {\n  \"ELCAMPO\": \"El Campo\"\n}, {\n  \"LANECITY\": \"Lane City\"\n}, {\n  \"OLDOCEAN\": \"Old Ocean\"\n}, {\n  \"SANFELIPE\": \"San Felipe\"\n}, {\n  \"SUGARLAND\": \"Sugar Land\"\n}, {\n  \"VANVLECK\": \"Van Vleck\"\n}, {\n  \"GALENAPARK\": \"Galena Park\"\n}, {\n  \"LAKEJACKSON\": \"Lake Jackson\"\n}, {\n  \"LAMARQUE\": \"La Marque\"\n}, {\n  \"LEAGUECITY\": \"League City\"\n}, {\n  \"MONTBELVIEU\": \"Mont Belvieu\"\n}, {\n  \"SOUTHHOUSTON\": \"South Houston\"\n}, {\n  \"TEXASCITY\": \"Texas City\"\n}, {\n  \"BRIDGECITY\": \"Bridge City\"\n}, {\n  \"HIGHISLAND\": \"High Island\"\n}, {\n  \"PORTARTHUR\": \"Port Arthur\"\n}, {\n  \"PORTBOLIVAR\": \"Port Bolivar\"\n}, {\n  \"PORTNECHES\": \"Port Neches\"\n}, {\n  \"SABINEPASS\": \"Sabine Pass\"\n}, {\n  \"SOURLAKE\": \"Sour Lake\"\n}, {\n  \"VILLAGEMILLS\": \"Village Mills\"\n}, {\n  \"DIMEBOX\": \"Dime Box\"\n}, {\n  \"NORTHZULCH\": \"North Zulch\"\n}, {\n  \"ROANSPRAIRIE\": \"Roans Prairie\"\n}, {\n  \"LAWARD\": \"La Ward\"\n}, {\n  \"LONGMOTT\": \"Long Mott\"\n}, {\n  \"POINTCOMFORT\": \"Point Comfort\"\n}, {\n  \"PORTLAVACA\": \"Port Lavaca\"\n}, {\n  \"PORTOCONNOR\": \"Port O Connor\"\n}, {\n  \"ARTESIAWELLS\": \"Artesia Wells\"\n}, {\n  \"GEORGEWEST\": \"George West\"\n}, {\n  \"LACOSTE\": \"La Coste\"\n}, {\n  \"PIPECREEK\": \"Pipe Creek\"\n}, {\n  \"RIOMEDINA\": \"Rio Medina\"\n}, {\n  \"SANYGNACIO\": \"San Ygnacio\"\n}, {\n  \"SPRINGBRANCH\": \"Spring Branch\"\n}, {\n  \"VONORMY\": \"Von Ormy\"\n}, {\n  \"KARNESCITY\": \"Karnes City\"\n}, {\n  \"LAVERNIA\": \"La Vernia\"\n}, {\n  \"MCQUEENEY\": \"Mc Queeney\"\n}, {\n  \"NEWBRAUNFELS\": \"New Braunfels\"\n}, {\n  \"CANYONLAKE\": \"Canyon Lake\"\n}, {\n  \"PANNAMARIA\": \"Panna Maria\"\n}, {\n  \"UNIVERSALCITY\": \"Universal City\"\n}, {\n  \"SAINTHEDWIG\": \"Saint Hedwig\"\n}, {\n  \"SUTHERLANDSPRINGS\": \"Sutherland Springs\"\n}, {\n  \"AGUADULCE\": \"Agua Dulce\"\n}, {\n  \"ARANSASPASS\": \"Aransas Pass\"\n}, {\n  \"BENBOLT\": \"Ben Bolt\"\n}, {\n  \"CHAPMANRANCH\": \"Chapman Ranch\"\n}, {\n  \"MIRANDOCITY\": \"Mirando City\"\n}, {\n  \"ORANGEGROVE\": \"Orange Grove\"\n}, {\n  \"PORTARANSAS\": \"Port Aransas\"\n}, {\n  \"SANDIEGO\": \"San Diego\"\n}, {\n  \"CORPUSCHRISTI\": \"Corpus Christi\"\n}, {\n  \"FALCONHEIGHTS\": \"Falcon Heights\"\n}, {\n  \"LABLANCA\": \"La Blanca\"\n}, {\n  \"LAFERIA\": \"La Feria\"\n}, {\n  \"LAJOYA\": \"La Joya\"\n}, {\n  \"LAVILLA\": \"La Villa\"\n}, {\n  \"LOSEBANOS\": \"Los Ebanos\"\n}, {\n  \"LOSFRESNOS\": \"Los Fresnos\"\n}, {\n  \"LOSINDIOS\": \"Los Indios\"\n}, {\n  \"PORTISABEL\": \"Port Isabel\"\n}, {\n  \"RIOGRANDECITY\": \"Rio Grande City\"\n}, {\n  \"RIOHONDO\": \"Rio Hondo\"\n}, {\n  \"SANBENITO\": \"San Benito\"\n}, {\n  \"SANISIDRO\": \"San Isidro\"\n}, {\n  \"SANPERLITA\": \"San Perlita\"\n}, {\n  \"SANTAELENA\": \"Santa Elena\"\n}, {\n  \"SANTAMARIA\": \"Santa Maria\"\n}, {\n  \"SANTAROSA\": \"Santa Rosa\"\n}, {\n  \"SULLIVANCITY\": \"Sullivan City\"\n}, {\n  \"SOUTHPADREISLAND\": \"South Padre Island\"\n}, {\n  \"PORTMANSFIELD\": \"Port Mansfield\"\n}, {\n  \"BUCHANANDAM\": \"Buchanan Dam\"\n}, {\n  \"CEDARPARK\": \"Cedar Park\"\n}, {\n  \"DELVALLE\": \"Del Valle\"\n}, {\n  \"DRIPPINGSPRINGS\": \"Dripping Springs\"\n}, {\n  \"MCDADE\": \"Mc Dade\"\n}, {\n  \"PRAIRIELEA\": \"Prairie Lea\"\n}, {\n  \"ROUNDMOUNTAIN\": \"Round Mountain\"\n}, {\n  \"ROUNDROCK\": \"Round Rock\"\n}, {\n  \"SANMARCOS\": \"San Marcos\"\n}, {\n  \"BIGWELLS\": \"Big Wells\"\n}, {\n  \"CAMPWOOD\": \"Camp Wood\"\n}, {\n  \"CARRIZOSPRINGS\": \"Carrizo Springs\"\n}, {\n  \"LAUGHLINAFB\": \"Laughlin A F B\"\n}, {\n  \"DHANIS\": \"D Hanis\"\n}, {\n  \"EAGLEPASS\": \"Eagle Pass\"\n}, {\n  \"ELINDIO\": \"El Indio\"\n}, {\n  \"LAPRYOR\": \"La Pryor\"\n}, {\n  \"RIOFRIO\": \"Rio Frio\"\n}, {\n  \"CATSPRING\": \"Cat Spring\"\n}, {\n  \"BOYSRANCH\": \"Boys Ranch\"\n}, {\n  \"COTTONCENTER\": \"Cotton Center\"\n}, {\n  \"HALECENTER\": \"Hale Center\"\n}, {\n  \"CEEVEE\": \"Cee Vee\"\n}, {\n  \"LELIALAKE\": \"Lelia Lake\"\n}, {\n  \"ROARINGSPRINGS\": \"Roaring Springs\"\n}, {\n  \"SOUTHPLAINS\": \"South Plains\"\n}, {\n  \"DENVERCITY\": \"Denver City\"\n}, {\n  \"NEWDEAL\": \"New Deal\"\n}, {\n  \"RANSOMCANYON\": \"Ransom Canyon\"\n}, {\n  \"NEWHOME\": \"New Home\"\n}, {\n  \"COLORADOCITY\": \"Colorado City\"\n}, {\n  \"MCCAULLEY\": \"Mc Caulley\"\n}, {\n  \"OLDGLORY\": \"Old Glory\"\n}, {\n  \"DYESSAFB\": \"Dyess Afb\"\n}, {\n  \"BIGSPRING\": \"Big Spring\"\n}, {\n  \"FORTSTOCKTON\": \"Fort Stockton\"\n}, {\n  \"MCCAMEY\": \"Mc Camey\"\n}, {\n  \"BIGBENDNATIONALPARK\": \"Big Bend National Park\"\n}, {\n  \"DELLCITY\": \"Dell City\"\n}, {\n  \"FORTHANCOCK\": \"Fort Hancock\"\n}, {\n  \"SALTFLAT\": \"Salt Flat\"\n}, {\n  \"SANELIZARIO\": \"San Elizario\"\n}, {\n  \"SIERRABLANCA\": \"Sierra Blanca\"\n}, {\n  \"VANHORN\": \"Van Horn\"\n}, {\n  \"COMMERCECITY\": \"Commerce City\"\n}, {\n  \"WHEATRIDGE\": \"Wheat Ridge\"\n}, {\n  \"DEERTRAIL\": \"Deer Trail\"\n}, {\n  \"PALMERLAKE\": \"Palmer Lake\"\n}, {\n  \"BUFFALOCREEK\": \"Buffalo Creek\"\n}, {\n  \"GRANDLAKE\": \"Grand Lake\"\n}, {\n  \"HOTSULPHURSPRINGS\": \"Hot Sulphur Springs\"\n}, {\n  \"IDAHOSPRINGS\": \"Idaho Springs\"\n}, {\n  \"INDIANHILLS\": \"Indian Hills\"\n}, {\n  \"SILVERPLUME\": \"Silver Plume\"\n}, {\n  \"STEAMBOATSPRINGS\": \"Steamboat Springs\"\n}, {\n  \"ESTESPARK\": \"Estes Park\"\n}, {\n  \"FORTCOLLINS\": \"Fort Collins\"\n}, {\n  \"REDFEATHERLAKES\": \"Red Feather Lakes\"\n}, {\n  \"FORTLUPTON\": \"Fort Lupton\"\n}, {\n  \"FORTMORGAN\": \"Fort Morgan\"\n}, {\n  \"LOGLANEVILLAGE\": \"Log Lane Village\"\n}, {\n  \"NEWRAYMER\": \"New Raymer\"\n}, {\n  \"CHEYENNEWELLS\": \"Cheyenne Wells\"\n}, {\n  \"GREENMOUNTAINFALLS\": \"Green Mountain Falls\"\n}, {\n  \"KITCARSON\": \"Kit Carson\"\n}, {\n  \"MANITOUSPRINGS\": \"Manitou Springs\"\n}, {\n  \"USAFACADEMY\": \"U S A F Academy\"\n}, {\n  \"WILDHORSE\": \"Wild Horse\"\n}, {\n  \"WOODLANDPARK\": \"Woodland Park\"\n}, {\n  \"COLORADOSPRINGS\": \"Colorado Springs\"\n}, {\n  \"FORTLYON\": \"Fort Lyon\"\n}, {\n  \"LAJUNTA\": \"La Junta\"\n}, {\n  \"LASANIMAS\": \"Las Animas\"\n}, {\n  \"LAVETA\": \"La Veta\"\n}, {\n  \"MCCLAVE\": \"Mc Clave\"\n}, {\n  \"OLNEYSPRINGS\": \"Olney Springs\"\n}, {\n  \"SHERIDANLAKE\": \"Sheridan Lake\"\n}, {\n  \"SUGARCITY\": \"Sugar City\"\n}, {\n  \"TWOBUTTES\": \"Two Buttes\"\n}, {\n  \"DELNORTE\": \"Del Norte\"\n}, {\n  \"FORTGARLAND\": \"Fort Garland\"\n}, {\n  \"LAJARA\": \"La Jara\"\n}, {\n  \"MONTEVISTA\": \"Monte Vista\"\n}, {\n  \"PAGOSASPRINGS\": \"Pagosa Springs\"\n}, {\n  \"SANLUIS\": \"San Luis\"\n}, {\n  \"SANPABLO\": \"San Pablo\"\n}, {\n  \"CANONCITY\": \"Canon City\"\n}, {\n  \"COALCREEK\": \"Coal Creek\"\n}, {\n  \"CRESTEDBUTTE\": \"Crested Butte\"\n}, {\n  \"PONCHASPRINGS\": \"Poncha Springs\"\n}, {\n  \"DOVECREEK\": \"Dove Creek\"\n}, {\n  \"MESAVERDENATIONALPARK\": \"Mesa Verde National Park\"\n}, {\n  \"YELLOWJACKET\": \"Yellow Jacket\"\n}, {\n  \"GLADEPARK\": \"Glade Park\"\n}, {\n  \"GLENWOODSPRINGS\": \"Glenwood Springs\"\n}, {\n  \"SNOWMASSVILLAGE\": \"Snowmass Village\"\n}, {\n  \"DEBEQUE\": \"De Beque\"\n}, {\n  \"BATTLEMENTMESA\": \"Battlement Mesa\"\n}, {\n  \"REDCLIFF\": \"Red Cliff\"\n}, {\n  \"WOODYCREEK\": \"Woody Creek\"\n}, {\n  \"FEWARRENAFB\": \"Fe Warren Afb\"\n}, {\n  \"GRANITECANON\": \"Granite Canon\"\n}, {\n  \"HORSECREEK\": \"Horse Creek\"\n}, {\n  \"PINEBLUFFS\": \"Pine Bluffs\"\n}, {\n  \"ROCKRIVER\": \"Rock River\"\n}, {\n  \"TIESIDING\": \"Tie Siding\"\n}, {\n  \"YELLOWSTONENATIONALPARK\": \"Yellowstone National Park\"\n}, {\n  \"FORTLARAMIE\": \"Fort Laramie\"\n}, {\n  \"HAWKSPRINGS\": \"Hawk Springs\"\n}, {\n  \"JAYEM\": \"Jay Em\"\n}, {\n  \"LANCECREEK\": \"Lance Creek\"\n}, {\n  \"VANTASSELL\": \"Van Tassell\"\n}, {\n  \"JEFFREYCITY\": \"Jeffrey City\"\n}, {\n  \"ELKMOUNTAIN\": \"Elk Mountain\"\n}, {\n  \"MEDICINEBOW\": \"Medicine Bow\"\n}, {\n  \"HAMILTONDOME\": \"Hamilton Dome\"\n}, {\n  \"TENSLEEP\": \"Ten Sleep\"\n}, {\n  \"FORTWASHAKIE\": \"Fort Washakie\"\n}, {\n  \"SHIRLEYBASIN\": \"Shirley Basin\"\n}, {\n  \"POWDERRIVER\": \"Powder River\"\n}, {\n  \"DEVILSTOWER\": \"Devils Tower\"\n}, {\n  \"FOURCORNERS\": \"Four Corners\"\n}, {\n  \"BIGHORN\": \"Big Horn\"\n}, {\n  \"LITTLEAMERICA\": \"Little America\"\n}, {\n  \"FORTBRIDGER\": \"Fort Bridger\"\n}, {\n  \"GREENRIVER\": \"Green River\"\n}, {\n  \"MCKINNON\": \"Mc Kinnon\"\n}, {\n  \"TETONVILLAGE\": \"Teton Village\"\n}, {\n  \"BIGPINEY\": \"Big Piney\"\n}, {\n  \"LABARGE\": \"La Barge\"\n}, {\n  \"FORTHALL\": \"Fort Hall\"\n}, {\n  \"AMERICANFALLS\": \"American Falls\"\n}, {\n  \"ATOMICCITY\": \"Atomic City\"\n}, {\n  \"LAVAHOTSPRINGS\": \"Lava Hot Springs\"\n}, {\n  \"MALADCITY\": \"Malad City\"\n}, {\n  \"SODASPRINGS\": \"Soda Springs\"\n}, {\n  \"FISHHAVEN\": \"Fish Haven\"\n}, {\n  \"TWINFALLS\": \"Twin Falls\"\n}, {\n  \"SUNVALLEY\": \"Sun Valley\"\n}, {\n  \"IDAHOFALLS\": \"Idaho Falls\"\n}, {\n  \"MACKSINN\": \"Macks Inn\"\n}, {\n  \"SWANVALLEY\": \"Swan Valley\"\n}, {\n  \"NORTHFORK\": \"North Fork\"\n}, {\n  \"WHITEBIRD\": \"White Bird\"\n}, {\n  \"GARDENVALLEY\": \"Garden Valley\"\n}, {\n  \"GLENNSFERRY\": \"Glenns Ferry\"\n}, {\n  \"IDAHOCITY\": \"Idaho City\"\n}, {\n  \"KINGHILL\": \"King Hill\"\n}, {\n  \"MOUNTAINHOMEAFB\": \"Mountain Home A F B\"\n}, {\n  \"NEWMEADOWS\": \"New Meadows\"\n}, {\n  \"YELLOWPINE\": \"Yellow Pine\"\n}, {\n  \"BONNERSFERRY\": \"Bonners Ferry\"\n}, {\n  \"CLARKFORK\": \"Clark Fork\"\n}, {\n  \"COEURDALENE\": \"Coeur D Alene\"\n}, {\n  \"MOYIESPRINGS\": \"Moyie Springs\"\n}, {\n  \"POSTFALLS\": \"Post Falls\"\n}, {\n  \"PRIESTRIVER\": \"Priest River\"\n}, {\n  \"SAINTMARIES\": \"Saint Maries\"\n}, {\n  \"AMERICANFORK\": \"American Fork\"\n}, {\n  \"BINGHAMCANYON\": \"Bingham Canyon\"\n}, {\n  \"CEDARVALLEY\": \"Cedar Valley\"\n}, {\n  \"DUTCHJOHN\": \"Dutch John\"\n}, {\n  \"FORTDUCHESNE\": \"Fort Duchesne\"\n}, {\n  \"HEBERCITY\": \"Heber City\"\n}, {\n  \"NORTHSALTLAKE\": \"North Salt Lake\"\n}, {\n  \"HILLAFB\": \"Hill Afb\"\n}, {\n  \"RUSHVALLEY\": \"Rush Valley\"\n}, {\n  \"WESTJORDAN\": \"West Jordan\"\n}, {\n  \"WOODSCROSS\": \"Woods Cross\"\n}, {\n  \"SOUTHJORDAN\": \"South Jordan\"\n}, {\n  \"SALTLAKECITY\": \"Salt Lake City\"\n}, {\n  \"BEARRIVERCITY\": \"Bear River City\"\n}, {\n  \"BRIGHAMCITY\": \"Brigham City\"\n}, {\n  \"CACHEJUNCTION\": \"Cache Junction\"\n}, {\n  \"GROUSECREEK\": \"Grouse Creek\"\n}, {\n  \"PARKVALLEY\": \"Park Valley\"\n}, {\n  \"CASTLEDALE\": \"Castle Dale\"\n}, {\n  \"EASTCARBON\": \"East Carbon\"\n}, {\n  \"LASAL\": \"La Sal\"\n}, {\n  \"MEXICANHAT\": \"Mexican Hat\"\n}, {\n  \"LAKEPOWELL\": \"Lake Powell\"\n}, {\n  \"MONTEZUMACREEK\": \"Montezuma Creek\"\n}, {\n  \"MONUMENTVALLEY\": \"Monument Valley\"\n}, {\n  \"FOUNTAINGREEN\": \"Fountain Green\"\n}, {\n  \"SPANISHFORK\": \"Spanish Fork\"\n}, {\n  \"BRYCECANYON\": \"Bryce Canyon\"\n}, {\n  \"BRIANHEAD\": \"Brian Head\"\n}, {\n  \"LAVERKIN\": \"La Verkin\"\n}, {\n  \"DUCKCREEKVILLAGE\": \"Duck Creek Village\"\n}, {\n  \"SANTACLARA\": \"Santa Clara\"\n}, {\n  \"DAMMERONVALLEY\": \"Dammeron Valley\"\n}, {\n  \"APACHEJUNCTION\": \"Apache Junction\"\n}, {\n  \"CASAGRANDE\": \"Casa Grande\"\n}, {\n  \"ARIZONACITY\": \"Arizona City\"\n}, {\n  \"CHANDLERHEIGHTS\": \"Chandler Heights\"\n}, {\n  \"QUEENCREEK\": \"Queen Creek\"\n}, {\n  \"PARADISEVALLEY\": \"Paradise Valley\"\n}, {\n  \"RIOVERDE\": \"Rio Verde\"\n}, {\n  \"FORTMCDOWELL\": \"Fort Mcdowell\"\n}, {\n  \"FOUNTAINHILLS\": \"Fountain Hills\"\n}, {\n  \"TORTILLAFLAT\": \"Tortilla Flat\"\n}, {\n  \"VALLEYFARMS\": \"Valley Farms\"\n}, {\n  \"LUKEAFB\": \"Luke Afb\"\n}, {\n  \"BLACKCANYONCITY\": \"Black Canyon City\"\n}, {\n  \"CAVECREEK\": \"Cave Creek\"\n}, {\n  \"ELMIRAGE\": \"El Mirage\"\n}, {\n  \"GILABEND\": \"Gila Bend\"\n}, {\n  \"LITCHFIELDPARK\": \"Litchfield Park\"\n}, {\n  \"PALOVERDE\": \"Palo Verde\"\n}, {\n  \"SUNCITYWEST\": \"Sun City West\"\n}, {\n  \"SANCARLOS\": \"San Carlos\"\n}, {\n  \"TONTOBASIN\": \"Tonto Basin\"\n}, {\n  \"FORTHUACHUCA\": \"Fort Huachuca\"\n}, {\n  \"HUACHUCACITY\": \"Huachuca City\"\n}, {\n  \"MCNEAL\": \"Mc Neal\"\n}, {\n  \"MOUNTLEMMON\": \"Mount Lemmon\"\n}, {\n  \"SANMANUEL\": \"San Manuel\"\n}, {\n  \"SANSIMON\": \"San Simon\"\n}, {\n  \"SIERRAVISTA\": \"Sierra Vista\"\n}, {\n  \"RIORICO\": \"Rio Rico\"\n}, {\n  \"SHOWLOW\": \"Show Low\"\n}, {\n  \"WHITEMOUNTAINLAKE\": \"White Mountain Lake\"\n}, {\n  \"CLAYSPRINGS\": \"Clay Springs\"\n}, {\n  \"FORTAPACHE\": \"Fort Apache\"\n}, {\n  \"FORESTLAKES\": \"Forest Lakes\"\n}, {\n  \"GRAYMOUNTAIN\": \"Gray Mountain\"\n}, {\n  \"MUNDSPARK\": \"Munds Park\"\n}, {\n  \"GRANDCANYON\": \"Grand Canyon\"\n}, {\n  \"HAPPYJACK\": \"Happy Jack\"\n}, {\n  \"PETRIFIEDFORESTNATLPK\": \"Petrified Forest Natl Pk\"\n}, {\n  \"INDIANWELLS\": \"Indian Wells\"\n}, {\n  \"JOSEPHCITY\": \"Joseph City\"\n}, {\n  \"KEAMSCANYON\": \"Keams Canyon\"\n}, {\n  \"MARBLECANYON\": \"Marble Canyon\"\n}, {\n  \"MORMONLAKE\": \"Mormon Lake\"\n}, {\n  \"KYKOTSMOVIVILLAGE\": \"Kykotsmovi Village\"\n}, {\n  \"SECONDMESA\": \"Second Mesa\"\n}, {\n  \"TUBACITY\": \"Tuba City\"\n}, {\n  \"NORTHRIM\": \"North Rim\"\n}, {\n  \"PRESCOTTVALLEY\": \"Prescott Valley\"\n}, {\n  \"ASHFORK\": \"Ash Fork\"\n}, {\n  \"CAMPVERDE\": \"Camp Verde\"\n}, {\n  \"CHINOVALLEY\": \"Chino Valley\"\n}, {\n  \"IRONSPRINGS\": \"Iron Springs\"\n}, {\n  \"SKULLVALLEY\": \"Skull Valley\"\n}, {\n  \"LAKEMONTEZUMA\": \"Lake Montezuma\"\n}, {\n  \"CROWNKING\": \"Crown King\"\n}, {\n  \"LAKEHAVASUCITY\": \"Lake Havasu City\"\n}, {\n  \"FORTMOHAVE\": \"Fort Mohave\"\n}, {\n  \"BULLHEADCITY\": \"Bullhead City\"\n}, {\n  \"PEACHSPRINGS\": \"Peach Springs\"\n}, {\n  \"MOHAVEVALLEY\": \"Mohave Valley\"\n}, {\n  \"DOLANSPRINGS\": \"Dolan Springs\"\n}, {\n  \"TEMPLEBARMARINA\": \"Temple Bar Marina\"\n}, {\n  \"WILLOWBEACH\": \"Willow Beach\"\n}, {\n  \"TEECNOSPOS\": \"Teec Nos Pos\"\n}, {\n  \"WINDOWROCK\": \"Window Rock\"\n}, {\n  \"BLUEGAP\": \"Blue Gap\"\n}, {\n  \"MANYFARMS\": \"Many Farms\"\n}, {\n  \"REDVALLEY\": \"Red Valley\"\n}, {\n  \"CASABLANCA\": \"Casa Blanca\"\n}, {\n  \"CEDARCREST\": \"Cedar Crest\"\n}, {\n  \"JEMEZPUEBLO\": \"Jemez Pueblo\"\n}, {\n  \"JEMEZSPRINGS\": \"Jemez Springs\"\n}, {\n  \"LOSLUNAS\": \"Los Lunas\"\n}, {\n  \"PUEBLOOFACOMA\": \"Pueblo Of Acoma\"\n}, {\n  \"NEWLAGUNA\": \"New Laguna\"\n}, {\n  \"PENABLANCA\": \"Pena Blanca\"\n}, {\n  \"SANDIAPARK\": \"Sandia Park\"\n}, {\n  \"SANFIDEL\": \"San Fidel\"\n}, {\n  \"SANRAFAEL\": \"San Rafael\"\n}, {\n  \"SANTODOMINGOPUEBLO\": \"Santo Domingo Pueblo\"\n}, {\n  \"SANYSIDRO\": \"San Ysidro\"\n}, {\n  \"BOSQUEFARMS\": \"Bosque Farms\"\n}, {\n  \"CLINESCORNERS\": \"Clines Corners\"\n}, {\n  \"COCHITIPUEBLO\": \"Cochiti Pueblo\"\n}, {\n  \"COCHITILAKE\": \"Cochiti Lake\"\n}, {\n  \"KIRTLANDAFB\": \"Kirtland Afb\"\n}, {\n  \"RIORANCHO\": \"Rio Rancho\"\n}, {\n  \"CHURCHROCK\": \"Church Rock\"\n}, {\n  \"CONTINENTALDIVIDE\": \"Continental Divide\"\n}, {\n  \"FENCELAKE\": \"Fence Lake\"\n}, {\n  \"FORTWINGATE\": \"Fort Wingate\"\n}, {\n  \"MEXICANSPRINGS\": \"Mexican Springs\"\n}, {\n  \"SHEEPSPRINGS\": \"Sheep Springs\"\n}, {\n  \"SMITHLAKE\": \"Smith Lake\"\n}, {\n  \"FLORAVISTA\": \"Flora Vista\"\n}, {\n  \"NAVAJODAM\": \"Navajo Dam\"\n}, {\n  \"ARROYOHONDO\": \"Arroyo Hondo\"\n}, {\n  \"ARROYOSECO\": \"Arroyo Seco\"\n}, {\n  \"TAOSSKIVALLEY\": \"Taos Ski Valley\"\n}, {\n  \"ELPRADO\": \"El Prado\"\n}, {\n  \"ELRITO\": \"El Rito\"\n}, {\n  \"LAMADERA\": \"La Madera\"\n}, {\n  \"LOSALAMOS\": \"Los Alamos\"\n}, {\n  \"OJOCALIENTE\": \"Ojo Caliente\"\n}, {\n  \"LOSOJOS\": \"Los Ojos\"\n}, {\n  \"RANCHOSDETAOS\": \"Ranchos De Taos\"\n}, {\n  \"REDRIVER\": \"Red River\"\n}, {\n  \"SANCRISTOBAL\": \"San Cristobal\"\n}, {\n  \"SANJUANPUEBLO\": \"San Juan Pueblo\"\n}, {\n  \"SANTACRUZ\": \"Santa Cruz\"\n}, {\n  \"TIERRAAMARILLA\": \"Tierra Amarilla\"\n}, {\n  \"TRESPIEDRAS\": \"Tres Piedras\"\n}, {\n  \"LASVEGAS\": \"Las Vegas\"\n}, {\n  \"ANGELFIRE\": \"Angel Fire\"\n}, {\n  \"ANTONCHICO\": \"Anton Chico\"\n}, {\n  \"EAGLENEST\": \"Eagle Nest\"\n}, {\n  \"LALOMA\": \"La Loma\"\n}, {\n  \"OJOFELIZ\": \"Ojo Feliz\"\n}, {\n  \"UTEPARK\": \"Ute Park\"\n}, {\n  \"WAGONMOUND\": \"Wagon Mound\"\n}, {\n  \"PIETOWN\": \"Pie Town\"\n}, {\n  \"SANACACIA\": \"San Acacia\"\n}, {\n  \"TRUTHORCONSEQUENCES\": \"Truth Or Consequences\"\n}, {\n  \"ELEPHANTBUTTE\": \"Elephant Butte\"\n}, {\n  \"LASCRUCES\": \"Las Cruces\"\n}, {\n  \"WHITESANDSMISSILERANGE\": \"White Sands Missile Range\"\n}, {\n  \"SANTATERESA\": \"Santa Teresa\"\n}, {\n  \"ARENASVALLEY\": \"Arenas Valley\"\n}, {\n  \"DONAANA\": \"Dona Ana\"\n}, {\n  \"FORTBAYARD\": \"Fort Bayard\"\n}, {\n  \"LAMESA\": \"La Mesa\"\n}, {\n  \"MESILLAPARK\": \"Mesilla Park\"\n}, {\n  \"MULECREEK\": \"Mule Creek\"\n}, {\n  \"PINOSALTOS\": \"Pinos Altos\"\n}, {\n  \"RADIUMSPRINGS\": \"Radium Springs\"\n}, {\n  \"SANMIGUEL\": \"San Miguel\"\n}, {\n  \"SUNLANDPARK\": \"Sunland Park\"\n}, {\n  \"CANNONAFB\": \"Cannon Afb\"\n}, {\n  \"FORTSUMNER\": \"Fort Sumner\"\n}, {\n  \"SAINTVRAIN\": \"Saint Vrain\"\n}, {\n  \"LOCOHILLS\": \"Loco Hills\"\n}, {\n  \"WHITESCITY\": \"Whites City\"\n}, {\n  \"FORTSTANTON\": \"Fort Stanton\"\n}, {\n  \"HIGHROLLSMOUNTAINPARK\": \"High Rolls Mountain Park\"\n}, {\n  \"HOLLOMANAIRFORCEBASE\": \"Holloman Air Force Base\"\n}, {\n  \"LALUZ\": \"La Luz\"\n}, {\n  \"RUIDOSODOWNS\": \"Ruidoso Downs\"\n}, {\n  \"SANPATRICIO\": \"San Patricio\"\n}, {\n  \"CONCHASDAM\": \"Conchas Dam\"\n}, {\n  \"MCALISTER\": \"Mc Alister\"\n}, {\n  \"NARAVISA\": \"Nara Visa\"\n}, {\n  \"SANJON\": \"San Jon\"\n}, {\n  \"BELLRANCH\": \"Bell Ranch\"\n}, {\n  \"THELAKES\": \"The Lakes\"\n}, {\n  \"BLUEDIAMOND\": \"Blue Diamond\"\n}, {\n  \"BOULDERCITY\": \"Boulder City\"\n}, {\n  \"INDIANSPRINGS\": \"Indian Springs\"\n}, {\n  \"AMARGOSAVALLEY\": \"Amargosa Valley\"\n}, {\n  \"NORTHLASVEGAS\": \"North Las Vegas\"\n}, {\n  \"CALNEVARI\": \"Cal Nev Ari\"\n}, {\n  \"NELLISAFB\": \"Nellis Afb\"\n}, {\n  \"MCGILL\": \"Mc Gill\"\n}, {\n  \"MCDERMITT\": \"Mc Dermitt\"\n}, {\n  \"ZEPHYRCOVE\": \"Zephyr Cove\"\n}, {\n  \"INCLINEVILLAGE\": \"Incline Village\"\n}, {\n  \"WASHOEVALLEY\": \"Washoe Valley\"\n}, {\n  \"BATTLEMOUNTAIN\": \"Battle Mountain\"\n}, {\n  \"CRESCENTVALLEY\": \"Crescent Valley\"\n}, {\n  \"RUBYVALLEY\": \"Ruby Valley\"\n}, {\n  \"WESTWENDOVER\": \"West Wendover\"\n}, {\n  \"LOSANGELES\": \"Los Angeles\"\n}, {\n  \"WESTHOLLYWOOD\": \"West Hollywood\"\n}, {\n  \"BELLGARDENS\": \"Bell Gardens\"\n}, {\n  \"CULVERCITY\": \"Culver City\"\n}, {\n  \"ELSEGUNDO\": \"El Segundo\"\n}, {\n  \"HERMOSABEACH\": \"Hermosa Beach\"\n}, {\n  \"HUNTINGTONPARK\": \"Huntington Park\"\n}, {\n  \"MANHATTANBEACH\": \"Manhattan Beach\"\n}, {\n  \"PACIFICPALISADES\": \"Pacific Palisades\"\n}, {\n  \"PALOSVERDESPENINSULA\": \"Palos Verdes Peninsula\"\n}, {\n  \"RANCHOPALOSVERDES\": \"Rancho Palos Verdes\"\n}, {\n  \"REDONDOBEACH\": \"Redondo Beach\"\n}, {\n  \"SOUTHGATE\": \"South Gate\"\n}, {\n  \"MARINADELREY\": \"Marina Del Rey\"\n}, {\n  \"PLAYADELREY\": \"Playa Del Rey\"\n}, {\n  \"SANTAMONICA\": \"Santa Monica\"\n}, {\n  \"BUENAPARK\": \"Buena Park\"\n}, {\n  \"LAPALMA\": \"La Palma\"\n}, {\n  \"LAHABRA\": \"La Habra\"\n}, {\n  \"LAMIRADA\": \"La Mirada\"\n}, {\n  \"PICORIVERA\": \"Pico Rivera\"\n}, {\n  \"SANTAFESPRINGS\": \"Santa Fe Springs\"\n}, {\n  \"HARBORCITY\": \"Harbor City\"\n}, {\n  \"HAWAIIANGARDENS\": \"Hawaiian Gardens\"\n}, {\n  \"LOSALAMITOS\": \"Los Alamitos\"\n}, {\n  \"SANPEDRO\": \"San Pedro\"\n}, {\n  \"SEALBEACH\": \"Seal Beach\"\n}, {\n  \"LACANADAFLINTRIDGE\": \"La Canada Flintridge\"\n}, {\n  \"MOUNTWILSON\": \"Mount Wilson\"\n}, {\n  \"SIERRAMADRE\": \"Sierra Madre\"\n}, {\n  \"SOUTHPASADENA\": \"South Pasadena\"\n}, {\n  \"VERDUGOCITY\": \"Verdugo City\"\n}, {\n  \"SANMARINO\": \"San Marino\"\n}, {\n  \"LACRESCENTA\": \"La Crescenta\"\n}, {\n  \"AGOURAHILLS\": \"Agoura Hills\"\n}, {\n  \"CANOGAPARK\": \"Canoga Park\"\n}, {\n  \"WESTHILLS\": \"West Hills\"\n}, {\n  \"NEWBURYPARK\": \"Newbury Park\"\n}, {\n  \"SANFERNANDO\": \"San Fernando\"\n}, {\n  \"NORTHHILLS\": \"North Hills\"\n}, {\n  \"GRANADAHILLS\": \"Granada Hills\"\n}, {\n  \"MISSIONHILLS\": \"Mission Hills\"\n}, {\n  \"SANTACLARITA\": \"Santa Clarita\"\n}, {\n  \"CANYONCOUNTRY\": \"Canyon Country\"\n}, {\n  \"THOUSANDOAKS\": \"Thousand Oaks\"\n}, {\n  \"WESTLAKEVILLAGE\": \"Westlake Village\"\n}, {\n  \"WOODLANDHILLS\": \"Woodland Hills\"\n}, {\n  \"STEVENSONRANCH\": \"Stevenson Ranch\"\n}, {\n  \"VANNUYS\": \"Van Nuys\"\n}, {\n  \"PANORAMACITY\": \"Panorama City\"\n}, {\n  \"SHERMANOAKS\": \"Sherman Oaks\"\n}, {\n  \"NORTHHOLLYWOOD\": \"North Hollywood\"\n}, {\n  \"STUDIOCITY\": \"Studio City\"\n}, {\n  \"VALLEYVILLAGE\": \"Valley Village\"\n}, {\n  \"TOLUCALAKE\": \"Toluca Lake\"\n}, {\n  \"RANCHOCUCAMONGA\": \"Rancho Cucamonga\"\n}, {\n  \"BALDWINPARK\": \"Baldwin Park\"\n}, {\n  \"CHINOHILLS\": \"Chino Hills\"\n}, {\n  \"CITYOFINDUSTRY\": \"City Of Industry\"\n}, {\n  \"ELMONTE\": \"El Monte\"\n}, {\n  \"SOUTHELMONTE\": \"South El Monte\"\n}, {\n  \"LAPUENTE\": \"La Puente\"\n}, {\n  \"HACIENDAHEIGHTS\": \"Hacienda Heights\"\n}, {\n  \"ROWLANDHEIGHTS\": \"Rowland Heights\"\n}, {\n  \"LAVERNE\": \"La Verne\"\n}, {\n  \"MIRALOMA\": \"Mira Loma\"\n}, {\n  \"MONTEREYPARK\": \"Monterey Park\"\n}, {\n  \"MTBALDY\": \"Mt Baldy\"\n}, {\n  \"DIAMONDBAR\": \"Diamond Bar\"\n}, {\n  \"SANDIMAS\": \"San Dimas\"\n}, {\n  \"SANGABRIEL\": \"San Gabriel\"\n}, {\n  \"TEMPLECITY\": \"Temple City\"\n}, {\n  \"WESTCOVINA\": \"West Covina\"\n}, {\n  \"CHULAVISTA\": \"Chula Vista\"\n}, {\n  \"IMPERIALBEACH\": \"Imperial Beach\"\n}, {\n  \"LEMONGROVE\": \"Lemon Grove\"\n}, {\n  \"LINCOLNACRES\": \"Lincoln Acres\"\n}, {\n  \"MOUNTLAGUNA\": \"Mount Laguna\"\n}, {\n  \"BORREGOSPRINGS\": \"Borrego Springs\"\n}, {\n  \"CARDIFFBYTHESEA\": \"Cardiff By The Sea\"\n}, {\n  \"DELMAR\": \"Del Mar\"\n}, {\n  \"ELCAJON\": \"El Cajon\"\n}, {\n  \"LAJOLLA\": \"La Jolla\"\n}, {\n  \"CAMPPENDLETON\": \"Camp Pendleton\"\n}, {\n  \"PALOMARMOUNTAIN\": \"Palomar Mountain\"\n}, {\n  \"PAUMAVALLEY\": \"Pauma Valley\"\n}, {\n  \"RANCHOSANTAFE\": \"Rancho Santa Fe\"\n}, {\n  \"SANLUISREY\": \"San Luis Rey\"\n}, {\n  \"SANTAYSABEL\": \"Santa Ysabel\"\n}, {\n  \"SOLANABEACH\": \"Solana Beach\"\n}, {\n  \"WARNERSPRINGS\": \"Warner Springs\"\n}, {\n  \"PALMDESERT\": \"Palm Desert\"\n}, {\n  \"CATHEDRALCITY\": \"Cathedral City\"\n}, {\n  \"DESERTCENTER\": \"Desert Center\"\n}, {\n  \"DESERTHOTSPRINGS\": \"Desert Hot Springs\"\n}, {\n  \"ELCENTRO\": \"El Centro\"\n}, {\n  \"JOSHUATREE\": \"Joshua Tree\"\n}, {\n  \"LAQUINTA\": \"La Quinta\"\n}, {\n  \"MORONGOVALLEY\": \"Morongo Valley\"\n}, {\n  \"NORTHPALMSPRINGS\": \"North Palm Springs\"\n}, {\n  \"PALMSPRINGS\": \"Palm Springs\"\n}, {\n  \"PARKERDAM\": \"Parker Dam\"\n}, {\n  \"RANCHOMIRAGE\": \"Rancho Mirage\"\n}, {\n  \"SALTONCITY\": \"Salton City\"\n}, {\n  \"THOUSANDPALMS\": \"Thousand Palms\"\n}, {\n  \"TWENTYNINEPALMS\": \"Twentynine Palms\"\n}, {\n  \"WHITEWATER\": \"White Water\"\n}, {\n  \"YUCCAVALLEY\": \"Yucca Valley\"\n}, {\n  \"ANGELUSOAKS\": \"Angelus Oaks\"\n}, {\n  \"APPLEVALLEY\": \"Apple Valley\"\n}, {\n  \"FORTIRWIN\": \"Fort Irwin\"\n}, {\n  \"GRANDTERRACE\": \"Grand Terrace\"\n}, {\n  \"BIGBEARCITY\": \"Big Bear City\"\n}, {\n  \"BIGBEARLAKE\": \"Big Bear Lake\"\n}, {\n  \"CEDARGLEN\": \"Cedar Glen\"\n}, {\n  \"CEDARPINESPARK\": \"Cedarpines Park\"\n}, {\n  \"CRESTPARK\": \"Crest Park\"\n}, {\n  \"DEATHVALLEY\": \"Death Valley\"\n}, {\n  \"FORESTFALLS\": \"Forest Falls\"\n}, {\n  \"GREENVALLEYLAKE\": \"Green Valley Lake\"\n}, {\n  \"LOMALINDA\": \"Loma Linda\"\n}, {\n  \"LAKEARROWHEAD\": \"Lake Arrowhead\"\n}, {\n  \"LUCERNEVALLEY\": \"Lucerne Valley\"\n}, {\n  \"LYTLECREEK\": \"Lytle Creek\"\n}, {\n  \"NEWBERRYSPRINGS\": \"Newberry Springs\"\n}, {\n  \"MOUNTAINPASS\": \"Mountain Pass\"\n}, {\n  \"OROGRANDE\": \"Oro Grande\"\n}, {\n  \"PINONHILLS\": \"Pinon Hills\"\n}, {\n  \"RUNNINGSPRINGS\": \"Running Springs\"\n}, {\n  \"TWINPEAKS\": \"Twin Peaks\"\n}, {\n  \"SANBERNARDINO\": \"San Bernardino\"\n}, {\n  \"MARCHAIRFORCEBASE\": \"March Air Force Base\"\n}, {\n  \"LAKEELSINORE\": \"Lake Elsinore\"\n}, {\n  \"MORENOVALLEY\": \"Moreno Valley\"\n}, {\n  \"MOUNTAINCENTER\": \"Mountain Center\"\n}, {\n  \"SANJACINTO\": \"San Jacinto\"\n}, {\n  \"HUNTINGTONBEACH\": \"Huntington Beach\"\n}, {\n  \"LAGUNANIGUEL\": \"Laguna Niguel\"\n}, {\n  \"ELTORO\": \"El Toro\"\n}, {\n  \"FOOTHILLRANCH\": \"Foothill Ranch\"\n}, {\n  \"CAPISTRANOBEACH\": \"Capistrano Beach\"\n}, {\n  \"CORONADELMAR\": \"Corona Del Mar\"\n}, {\n  \"COSTAMESA\": \"Costa Mesa\"\n}, {\n  \"DANAPOINT\": \"Dana Point\"\n}, {\n  \"LAGUNAHILLS\": \"Laguna Hills\"\n}, {\n  \"EASTIRVINE\": \"East Irvine\"\n}, {\n  \"LAGUNABEACH\": \"Laguna Beach\"\n}, {\n  \"MIDWAYCITY\": \"Midway City\"\n}, {\n  \"ALISOVIEJO\": \"Aliso Viejo\"\n}, {\n  \"NEWPORTCOAST\": \"Newport Coast\"\n}, {\n  \"NEWPORTBEACH\": \"Newport Beach\"\n}, {\n  \"SANCLEMENTE\": \"San Clemente\"\n}, {\n  \"SANJUANCAPISTRANO\": \"San Juan Capistrano\"\n}, {\n  \"TRABUCOCANYON\": \"Trabuco Canyon\"\n}, {\n  \"RANCHOSANTAMARGARITA\": \"Rancho Santa Margarita\"\n}, {\n  \"MISSIONVIEJO\": \"Mission Viejo\"\n}, {\n  \"LADERARANCH\": \"Ladera Ranch\"\n}, {\n  \"SANTAANA\": \"Santa Ana\"\n}, {\n  \"FOUNTAINVALLEY\": \"Fountain Valley\"\n}, {\n  \"YORBALINDA\": \"Yorba Linda\"\n}, {\n  \"OAKVIEW\": \"Oak View\"\n}, {\n  \"PORTHUENEME\": \"Port Hueneme\"\n}, {\n  \"POINTMUGUNAWC\": \"Point Mugu Nawc\"\n}, {\n  \"PORTHUENEMECBCBASE\": \"Port Hueneme Cbc Base\"\n}, {\n  \"SANTAPAULA\": \"Santa Paula\"\n}, {\n  \"SIMIVALLEY\": \"Simi Valley\"\n}, {\n  \"SANTABARBARA\": \"Santa Barbara\"\n}, {\n  \"CALIFORNIAHOTSPRINGS\": \"California Hot Springs\"\n}, {\n  \"CAMPNELSON\": \"Camp Nelson\"\n}, {\n  \"FRAZIERPARK\": \"Frazier Park\"\n}, {\n  \"KETTLEMANCITY\": \"Kettleman City\"\n}, {\n  \"LAKEISABELLA\": \"Lake Isabella\"\n}, {\n  \"LEMONCOVE\": \"Lemon Cove\"\n}, {\n  \"LOSTHILLS\": \"Lost Hills\"\n}, {\n  \"MCKITTRICK\": \"Mc Kittrick\"\n}, {\n  \"NEWCUYAMA\": \"New Cuyama\"\n}, {\n  \"SEQUOIANATIONALPARK\": \"Sequoia National Park\"\n}, {\n  \"TERRABELLA\": \"Terra Bella\"\n}, {\n  \"WOFFORDHEIGHTS\": \"Wofford Heights\"\n}, {\n  \"SANLUISOBISPO\": \"San Luis Obispo\"\n}, {\n  \"LOSOSOS\": \"Los Osos\"\n}, {\n  \"ARROYOGRANDE\": \"Arroyo Grande\"\n}, {\n  \"AVILABEACH\": \"Avila Beach\"\n}, {\n  \"GROVERBEACH\": \"Grover Beach\"\n}, {\n  \"LOSOLIVOS\": \"Los Olivos\"\n}, {\n  \"MORROBAY\": \"Morro Bay\"\n}, {\n  \"PASOROBLES\": \"Paso Robles\"\n}, {\n  \"PISMOBEACH\": \"Pismo Beach\"\n}, {\n  \"SANARDO\": \"San Ardo\"\n}, {\n  \"SANSIMEON\": \"San Simeon\"\n}, {\n  \"SANTAMARGARITA\": \"Santa Margarita\"\n}, {\n  \"SANTAYNEZ\": \"Santa Ynez\"\n}, {\n  \"CALIFORNIACITY\": \"California City\"\n}, {\n  \"BIGPINE\": \"Big Pine\"\n}, {\n  \"JUNELAKE\": \"June Lake\"\n}, {\n  \"LAKEHUGHES\": \"Lake Hughes\"\n}, {\n  \"LEEVINING\": \"Lee Vining\"\n}, {\n  \"LONEPINE\": \"Lone Pine\"\n}, {\n  \"MAMMOTHLAKES\": \"Mammoth Lakes\"\n}, {\n  \"REDMOUNTAIN\": \"Red Mountain\"\n}, {\n  \"BASSLAKE\": \"Bass Lake\"\n}, {\n  \"CANTUACREEK\": \"Cantua Creek\"\n}, {\n  \"DELREY\": \"Del Rey\"\n}, {\n  \"DOSPALOS\": \"Dos Palos\"\n}, {\n  \"FISHCAMP\": \"Fish Camp\"\n}, {\n  \"KINGSCANYONNATIONALPK\": \"Kings Canyon National Pk\"\n}, {\n  \"LOSBANOS\": \"Los Banos\"\n}, {\n  \"MONOHOTSPRINGS\": \"Mono Hot Springs\"\n}, {\n  \"ONEALS\": \"O Neals\"\n}, {\n  \"ORANGECOVE\": \"Orange Cove\"\n}, {\n  \"SANJOAQUIN\": \"San Joaquin\"\n}, {\n  \"SANTARITAPARK\": \"Santa Rita Park\"\n}, {\n  \"SHAVERLAKE\": \"Shaver Lake\"\n}, {\n  \"SOUTHDOSPALOS\": \"South Dos Palos\"\n}, {\n  \"SQUAWVALLEY\": \"Squaw Valley\"\n}, {\n  \"BIGSUR\": \"Big Sur\"\n}, {\n  \"CARMELVALLEY\": \"Carmel Valley\"\n}, {\n  \"PACIFICGROVE\": \"Pacific Grove\"\n}, {\n  \"PEBBLEBEACH\": \"Pebble Beach\"\n}, {\n  \"SANLUCAS\": \"San Lucas\"\n}, {\n  \"DALYCITY\": \"Daly City\"\n}, {\n  \"ELGRANADA\": \"El Granada\"\n}, {\n  \"HALFMOONBAY\": \"Half Moon Bay\"\n}, {\n  \"LAHONDA\": \"La Honda\"\n}, {\n  \"LOMAMAR\": \"Loma Mar\"\n}, {\n  \"LOSALTOS\": \"Los Altos\"\n}, {\n  \"MENLOPARK\": \"Menlo Park\"\n}, {\n  \"PORTOLAVALLEY\": \"Portola Valley\"\n}, {\n  \"MOSSBEACH\": \"Moss Beach\"\n}, {\n  \"REDWOODCITY\": \"Redwood City\"\n}, {\n  \"SANBRUNO\": \"San Bruno\"\n}, {\n  \"SANGREGORIO\": \"San Gregorio\"\n}, {\n  \"SOUTHSANFRANCISCO\": \"South San Francisco\"\n}, {\n  \"SANFRANCISCO\": \"San Francisco\"\n}, {\n  \"PALOALTO\": \"Palo Alto\"\n}, {\n  \"AMERICANCANYON\": \"American Canyon\"\n}, {\n  \"BETHELISLAND\": \"Bethel Island\"\n}, {\n  \"BIRDSLANDING\": \"Birds Landing\"\n}, {\n  \"ELCERRITO\": \"El Cerrito\"\n}, {\n  \"TRAVISAFB\": \"Travis Afb\"\n}, {\n  \"CASTROVALLEY\": \"Castro Valley\"\n}, {\n  \"POPEVALLEY\": \"Pope Valley\"\n}, {\n  \"PORTCOSTA\": \"Port Costa\"\n}, {\n  \"SANLEANDRO\": \"San Leandro\"\n}, {\n  \"SANRAMON\": \"San Ramon\"\n}, {\n  \"SUISUNCITY\": \"Suisun City\"\n}, {\n  \"ELSOBRANTE\": \"El Sobrante\"\n}, {\n  \"BELVEDERETIBURON\": \"Belvedere Tiburon\"\n}, {\n  \"BODEGABAY\": \"Bodega Bay\"\n}, {\n  \"CORTEMADERA\": \"Corte Madera\"\n}, {\n  \"ROHNERTPARK\": \"Rohnert Park\"\n}, {\n  \"DILLONBEACH\": \"Dillon Beach\"\n}, {\n  \"FORESTKNOLLS\": \"Forest Knolls\"\n}, {\n  \"MILLVALLEY\": \"Mill Valley\"\n}, {\n  \"POINTREYESSTATION\": \"Point Reyes Station\"\n}, {\n  \"SANANSELMO\": \"San Anselmo\"\n}, {\n  \"SANGERONIMO\": \"San Geronimo\"\n}, {\n  \"SANQUENTIN\": \"San Quentin\"\n}, {\n  \"STINSONBEACH\": \"Stinson Beach\"\n}, {\n  \"VALLEYFORD\": \"Valley Ford\"\n}, {\n  \"BOULDERCREEK\": \"Boulder Creek\"\n}, {\n  \"HOLYCITY\": \"Holy City\"\n}, {\n  \"LOSGATOS\": \"Los Gatos\"\n}, {\n  \"MORGANHILL\": \"Morgan Hill\"\n}, {\n  \"MOSSLANDING\": \"Moss Landing\"\n}, {\n  \"NEWALMADEN\": \"New Almaden\"\n}, {\n  \"REDWOODESTATES\": \"Redwood Estates\"\n}, {\n  \"SANJUANBAUTISTA\": \"San Juan Bautista\"\n}, {\n  \"SANMARTIN\": \"San Martin\"\n}, {\n  \"SCOTTSVALLEY\": \"Scotts Valley\"\n}, {\n  \"TRESPINOS\": \"Tres Pinos\"\n}, {\n  \"MOUNTHAMILTON\": \"Mount Hamilton\"\n}, {\n  \"ANGELSCAMP\": \"Angels Camp\"\n}, {\n  \"CAMPOSECO\": \"Campo Seco\"\n}, {\n  \"DOUGLASFLAT\": \"Douglas Flat\"\n}, {\n  \"HATHAWAYPINES\": \"Hathaway Pines\"\n}, {\n  \"MOKELUMNEHILL\": \"Mokelumne Hill\"\n}, {\n  \"MOUNTAINRANCH\": \"Mountain Ranch\"\n}, {\n  \"RAILROADFLAT\": \"Rail Road Flat\"\n}, {\n  \"SANANDREAS\": \"San Andreas\"\n}, {\n  \"SHEEPRANCH\": \"Sheep Ranch\"\n}, {\n  \"BIGOAKFLAT\": \"Big Oak Flat\"\n}, {\n  \"CATHEYSVALLEY\": \"Catheys Valley\"\n}, {\n  \"CHINESECAMP\": \"Chinese Camp\"\n}, {\n  \"CROWSLANDING\": \"Crows Landing\"\n}, {\n  \"ELNIDO\": \"El Nido\"\n}, {\n  \"ELPORTAL\": \"El Portal\"\n}, {\n  \"LONGBARN\": \"Long Barn\"\n}, {\n  \"MIWUKVILLAGE\": \"Mi Wuk Village\"\n}, {\n  \"TWAINHARTE\": \"Twain Harte\"\n}, {\n  \"YOSEMITENATIONALPARK\": \"Yosemite National Park\"\n}, {\n  \"BOYESHOTSPRINGS\": \"Boyes Hot Springs\"\n}, {\n  \"CAMPMEEKER\": \"Camp Meeker\"\n}, {\n  \"CLEARLAKEOAKS\": \"Clearlake Oaks\"\n}, {\n  \"CLEARLAKEPARK\": \"Clearlake Park\"\n}, {\n  \"DOSRIOS\": \"Dos Rios\"\n}, {\n  \"DUNCANSMILLS\": \"Duncans Mills\"\n}, {\n  \"ELVERANO\": \"El Verano\"\n}, {\n  \"GLENELLEN\": \"Glen Ellen\"\n}, {\n  \"LOWERLAKE\": \"Lower Lake\"\n}, {\n  \"MONTERIO\": \"Monte Rio\"\n}, {\n  \"POINTARENA\": \"Point Arena\"\n}, {\n  \"POTTERVALLEY\": \"Potter Valley\"\n}, {\n  \"REDWOODVALLEY\": \"Redwood Valley\"\n}, {\n  \"RIONIDO\": \"Rio Nido\"\n}, {\n  \"STEWARTSPOINT\": \"Stewarts Point\"\n}, {\n  \"UPPERLAKE\": \"Upper Lake\"\n}, {\n  \"VILLAGRANDE\": \"Villa Grande\"\n}, {\n  \"WITTERSPRINGS\": \"Witter Springs\"\n}, {\n  \"THESEARANCH\": \"The Sea Ranch\"\n}, {\n  \"BLUELAKE\": \"Blue Lake\"\n}, {\n  \"BURNTRANCH\": \"Burnt Ranch\"\n}, {\n  \"FIELDSLANDING\": \"Fields Landing\"\n}, {\n  \"FORTDICK\": \"Fort Dick\"\n}, {\n  \"MADRIVER\": \"Mad River\"\n}, {\n  \"MYERSFLAT\": \"Myers Flat\"\n}, {\n  \"RIODELL\": \"Rio Dell\"\n}, {\n  \"SMITHRIVER\": \"Smith River\"\n}, {\n  \"SOMESBAR\": \"Somes Bar\"\n}, {\n  \"AMADORCITY\": \"Amador City\"\n}, {\n  \"WESTSACRAMENTO\": \"West Sacramento\"\n}, {\n  \"CITRUSHEIGHTS\": \"Citrus Heights\"\n}, {\n  \"ELMACERO\": \"El Macero\"\n}, {\n  \"DIAMONDSPRINGS\": \"Diamond Springs\"\n}, {\n  \"ELKGROVE\": \"Elk Grove\"\n}, {\n  \"GRIZZLYFLATS\": \"Grizzly Flats\"\n}, {\n  \"KNIGHTSLANDING\": \"Knights Landing\"\n}, {\n  \"MOUNTAUKUM\": \"Mount Aukum\"\n}, {\n  \"NORTHHIGHLANDS\": \"North Highlands\"\n}, {\n  \"PILOTHILL\": \"Pilot Hill\"\n}, {\n  \"RANCHOCORDOVA\": \"Rancho Cordova\"\n}, {\n  \"RIOLINDA\": \"Rio Linda\"\n}, {\n  \"RIOOSO\": \"Rio Oso\"\n}, {\n  \"RIVERPINES\": \"River Pines\"\n}, {\n  \"SHINGLESPRINGS\": \"Shingle Springs\"\n}, {\n  \"SUTTERCREEK\": \"Sutter Creek\"\n}, {\n  \"CHICAGOPARK\": \"Chicago Park\"\n}, {\n  \"DUTCHFLAT\": \"Dutch Flat\"\n}, {\n  \"EMIGRANTGAP\": \"Emigrant Gap\"\n}, {\n  \"GOLDRUN\": \"Gold Run\"\n}, {\n  \"ECHOLAKE\": \"Echo Lake\"\n}, {\n  \"MEADOWVISTA\": \"Meadow Vista\"\n}, {\n  \"POLLOCKPINES\": \"Pollock Pines\"\n}, {\n  \"GRANITEBAY\": \"Granite Bay\"\n}, {\n  \"ELDORADOHILLS\": \"El Dorado Hills\"\n}, {\n  \"BEALEAFB\": \"Beale Afb\"\n}, {\n  \"BERRYCREEK\": \"Berry Creek\"\n}, {\n  \"BUTTECITY\": \"Butte City\"\n}, {\n  \"CEDARRIDGE\": \"Cedar Ridge\"\n}, {\n  \"CLIPPERMILLS\": \"Clipper Mills\"\n}, {\n  \"COLLEGECITY\": \"College City\"\n}, {\n  \"CRESCENTMILLS\": \"Crescent Mills\"\n}, {\n  \"FEATHERFALLS\": \"Feather Falls\"\n}, {\n  \"FORESTRANCH\": \"Forest Ranch\"\n}, {\n  \"GOODYEARSBAR\": \"Goodyears Bar\"\n}, {\n  \"GRASSVALLEY\": \"Grass Valley\"\n}, {\n  \"PENNVALLEY\": \"Penn Valley\"\n}, {\n  \"HAMILTONCITY\": \"Hamilton City\"\n}, {\n  \"MEADOWVALLEY\": \"Meadow Valley\"\n}, {\n  \"NEVADACITY\": \"Nevada City\"\n}, {\n  \"NORTHSANJUAN\": \"North San Juan\"\n}, {\n  \"OREGONHOUSE\": \"Oregon House\"\n}, {\n  \"ROUGHANDREADY\": \"Rough And Ready\"\n}, {\n  \"STIRLINGCITY\": \"Stirling City\"\n}, {\n  \"STRAWBERRYVALLEY\": \"Strawberry Valley\"\n}, {\n  \"YUBACITY\": \"Yuba City\"\n}, {\n  \"BIGBAR\": \"Big Bar\"\n}, {\n  \"SHASTALAKE\": \"Shasta Lake\"\n}, {\n  \"DOUGLASCITY\": \"Douglas City\"\n}, {\n  \"FALLRIVERMILLS\": \"Fall River Mills\"\n}, {\n  \"FORKSOFSALMON\": \"Forks Of Salmon\"\n}, {\n  \"FORTJONES\": \"Fort Jones\"\n}, {\n  \"FRENCHGULCH\": \"French Gulch\"\n}, {\n  \"HAPPYCAMP\": \"Happy Camp\"\n}, {\n  \"HATCREEK\": \"Hat Creek\"\n}, {\n  \"KLAMATHRIVER\": \"Klamath River\"\n}, {\n  \"LOSMOLINOS\": \"Los Molinos\"\n}, {\n  \"MONTGOMERYCREEK\": \"Montgomery Creek\"\n}, {\n  \"MOUNTSHASTA\": \"Mount Shasta\"\n}, {\n  \"OAKRUN\": \"Oak Run\"\n}, {\n  \"OLDSTATION\": \"Old Station\"\n}, {\n  \"PALOCEDRO\": \"Palo Cedro\"\n}, {\n  \"PAYNESCREEK\": \"Paynes Creek\"\n}, {\n  \"REDBLUFF\": \"Red Bluff\"\n}, {\n  \"SCOTTBAR\": \"Scott Bar\"\n}, {\n  \"SEIADVALLEY\": \"Seiad Valley\"\n}, {\n  \"TRINITYCENTER\": \"Trinity Center\"\n}, {\n  \"DAVISCREEK\": \"Davis Creek\"\n}, {\n  \"FORTBIDWELL\": \"Fort Bidwell\"\n}, {\n  \"SIERRACITY\": \"Sierra City\"\n}, {\n  \"CARNELIANBAY\": \"Carnelian Bay\"\n}, {\n  \"KINGSBEACH\": \"Kings Beach\"\n}, {\n  \"TAHOECITY\": \"Tahoe City\"\n}, {\n  \"OLYMPICVALLEY\": \"Olympic Valley\"\n}, {\n  \"TAHOEVISTA\": \"Tahoe Vista\"\n}, {\n  \"SOUTHLAKETAHOE\": \"South Lake Tahoe\"\n}, {\n  \"CAPTAINCOOK\": \"Captain Cook\"\n}, {\n  \"EWABEACH\": \"Ewa Beach\"\n}, {\n  \"HAWAIINATIONALPARK\": \"Hawaii National Park\"\n}, {\n  \"KAILUAKONA\": \"Kailua Kona\"\n}, {\n  \"LANAICITY\": \"Lanai City\"\n}, {\n  \"PAGOPAGO\": \"Pago Pago\"\n}, {\n  \"HICKAMAFB\": \"Hickam Afb\"\n}, {\n  \"WHEELERARMYAIRFIELD\": \"Wheeler Army Airfield\"\n}, {\n  \"SCHOFIELDBARRACKS\": \"Schofield Barracks\"\n}, {\n  \"FORTSHAFTER\": \"Fort Shafter\"\n}, {\n  \"TRIPLERARMYMEDICALCTR\": \"Tripler Army Medical Ctr\"\n}, {\n  \"PEARLHARBOR\": \"Pearl Harbor\"\n}, {\n  \"CAMPHMSMITH\": \"Camp H M Smith\"\n}, {\n  \"BARBERSPOINT\": \"Barbers Point\"\n}, {\n  \"MCBHKANEOHEBAY\": \"M C B H Kaneohe Bay\"\n}, {\n  \"WAKEISLAND\": \"Wake Island\"\n}, {\n  \"AGANAHEIGHTS\": \"Agana Heights\"\n}, {\n  \"BRIDALVEIL\": \"Bridal Veil\"\n}, {\n  \"CASCADELOCKS\": \"Cascade Locks\"\n}, {\n  \"EAGLECREEK\": \"Eagle Creek\"\n}, {\n  \"GOVERNMENTCAMP\": \"Government Camp\"\n}, {\n  \"HOODRIVER\": \"Hood River\"\n}, {\n  \"LAKEOSWEGO\": \"Lake Oswego\"\n}, {\n  \"MOUNTHOODPARKDALE\": \"Mount Hood Parkdale\"\n}, {\n  \"OREGONCITY\": \"Oregon City\"\n}, {\n  \"DEERISLAND\": \"Deer Island\"\n}, {\n  \"THEDALLES\": \"The Dalles\"\n}, {\n  \"TYGHVALLEY\": \"Tygh Valley\"\n}, {\n  \"WESTLINN\": \"West Linn\"\n}, {\n  \"ARCHCAPE\": \"Arch Cape\"\n}, {\n  \"CANNONBEACH\": \"Cannon Beach\"\n}, {\n  \"GALESCREEK\": \"Gales Creek\"\n}, {\n  \"NORTHPLAINS\": \"North Plains\"\n}, {\n  \"PACIFICCITY\": \"Pacific City\"\n}, {\n  \"TOLOVANAPARK\": \"Tolovana Park\"\n}, {\n  \"DEPOEBAY\": \"Depoe Bay\"\n}, {\n  \"GRANDRONDE\": \"Grand Ronde\"\n}, {\n  \"MILLCITY\": \"Mill City\"\n}, {\n  \"MOUNTANGEL\": \"Mount Angel\"\n}, {\n  \"SOUTHBEACH\": \"South Beach\"\n}, {\n  \"OTTERROCK\": \"Otter Rock\"\n}, {\n  \"ROSELODGE\": \"Rose Lodge\"\n}, {\n  \"SCOTTSMILLS\": \"Scotts Mills\"\n}, {\n  \"SEALROCK\": \"Seal Rock\"\n}, {\n  \"GLENEDENBEACH\": \"Gleneden Beach\"\n}, {\n  \"CAMASVALLEY\": \"Camas Valley\"\n}, {\n  \"COOSBAY\": \"Coos Bay\"\n}, {\n  \"CRESCENTLAKE\": \"Crescent Lake\"\n}, {\n  \"CULPCREEK\": \"Culp Creek\"\n}, {\n  \"DAYSCREEK\": \"Days Creek\"\n}, {\n  \"GOLDBEACH\": \"Gold Beach\"\n}, {\n  \"IDLEYLDPARK\": \"Idleyld Park\"\n}, {\n  \"MYRTLECREEK\": \"Myrtle Creek\"\n}, {\n  \"MYRTLEPOINT\": \"Myrtle Point\"\n}, {\n  \"PORTORFORD\": \"Port Orford\"\n}, {\n  \"CENTRALPOINT\": \"Central Point\"\n}, {\n  \"BUTTEFALLS\": \"Butte Falls\"\n}, {\n  \"CAVEJUNCTION\": \"Cave Junction\"\n}, {\n  \"EAGLEPOINT\": \"Eagle Point\"\n}, {\n  \"GRANTSPASS\": \"Grants Pass\"\n}, {\n  \"ROGUERIVER\": \"Rogue River\"\n}, {\n  \"SHADYCOVE\": \"Shady Cove\"\n}, {\n  \"KLAMATHFALLS\": \"Klamath Falls\"\n}, {\n  \"CRATERLAKE\": \"Crater Lake\"\n}, {\n  \"FORTKLAMATH\": \"Fort Klamath\"\n}, {\n  \"NEWPINECREEK\": \"New Pine Creek\"\n}, {\n  \"SPRAGUERIVER\": \"Sprague River\"\n}, {\n  \"SUMMERLAKE\": \"Summer Lake\"\n}, {\n  \"CHRISTMASVALLEY\": \"Christmas Valley\"\n}, {\n  \"CAMPSHERMAN\": \"Camp Sherman\"\n}, {\n  \"FORTROCK\": \"Fort Rock\"\n}, {\n  \"LAPINE\": \"La Pine\"\n}, {\n  \"POWELLBUTTE\": \"Powell Butte\"\n}, {\n  \"BAKERCITY\": \"Baker City\"\n}, {\n  \"CANYONCITY\": \"Canyon City\"\n}, {\n  \"JOHNDAY\": \"John Day\"\n}, {\n  \"LAGRANDE\": \"La Grande\"\n}, {\n  \"MILTONFREEWATER\": \"Milton Freewater\"\n}, {\n  \"NORTHPOWDER\": \"North Powder\"\n}, {\n  \"PILOTROCK\": \"Pilot Rock\"\n}, {\n  \"JORDANVALLEY\": \"Jordan Valley\"\n}, {\n  \"FEDERALWAY\": \"Federal Way\"\n}, {\n  \"BLACKDIAMOND\": \"Black Diamond\"\n}, {\n  \"FALLCITY\": \"Fall City\"\n}, {\n  \"MAPLEVALLEY\": \"Maple Valley\"\n}, {\n  \"MERCERISLAND\": \"Mercer Island\"\n}, {\n  \"MOUNTLAKETERRACE\": \"Mountlake Terrace\"\n}, {\n  \"SNOQUALMIEPASS\": \"Snoqualmie Pass\"\n}, {\n  \"BAINBRIDGEISLAND\": \"Bainbridge Island\"\n}, {\n  \"BLAKELYISLAND\": \"Blakely Island\"\n}, {\n  \"DEERHARBOR\": \"Deer Harbor\"\n}, {\n  \"FRIDAYHARBOR\": \"Friday Harbor\"\n}, {\n  \"GOLDBAR\": \"Gold Bar\"\n}, {\n  \"LACONNER\": \"La Conner\"\n}, {\n  \"LAKESTEVENS\": \"Lake Stevens\"\n}, {\n  \"NORTHLAKEWOOD\": \"North Lakewood\"\n}, {\n  \"LOPEZISLAND\": \"Lopez Island\"\n}, {\n  \"LUMMIISLAND\": \"Lummi Island\"\n}, {\n  \"MAPLEFALLS\": \"Maple Falls\"\n}, {\n  \"POINTROBERTS\": \"Point Roberts\"\n}, {\n  \"CAMANOISLAND\": \"Camano Island\"\n}, {\n  \"SEDROWOOLLEY\": \"Sedro Woolley\"\n}, {\n  \"SHAWISLAND\": \"Shaw Island\"\n}, {\n  \"ANDERSONISLAND\": \"Anderson Island\"\n}, {\n  \"CLALLAMBAY\": \"Clallam Bay\"\n}, {\n  \"GIGHARBOR\": \"Gig Harbor\"\n}, {\n  \"FOXISLAND\": \"Fox Island\"\n}, {\n  \"PORTHADLOCK\": \"Port Hadlock\"\n}, {\n  \"LAPUSH\": \"La Push\"\n}, {\n  \"NEAHBAY\": \"Neah Bay\"\n}, {\n  \"PORTANGELES\": \"Port Angeles\"\n}, {\n  \"PORTGAMBLE\": \"Port Gamble\"\n}, {\n  \"PORTLUDLOW\": \"Port Ludlow\"\n}, {\n  \"PORTORCHARD\": \"Port Orchard\"\n}, {\n  \"PORTTOWNSEND\": \"Port Townsend\"\n}, {\n  \"SOUTHCOLBY\": \"South Colby\"\n}, {\n  \"SOUTHPRAIRIE\": \"South Prairie\"\n}, {\n  \"PARADISEINN\": \"Paradise Inn\"\n}, {\n  \"CAMPMURRAY\": \"Camp Murray\"\n}, {\n  \"MCCHORDAFB\": \"Mcchord Afb\"\n}, {\n  \"UNIVERSITYPLACE\": \"University Place\"\n}, {\n  \"AMANDAPARK\": \"Amanda Park\"\n}, {\n  \"BAYCENTER\": \"Bay Center\"\n}, {\n  \"COPALISBEACH\": \"Copalis Beach\"\n}, {\n  \"COPALISCROSSING\": \"Copalis Crossing\"\n}, {\n  \"EASTOLYMPIA\": \"East Olympia\"\n}, {\n  \"OCEANSHORES\": \"Ocean Shores\"\n}, {\n  \"PACIFICBEACH\": \"Pacific Beach\"\n}, {\n  \"PEELL\": \"Pe Ell\"\n}, {\n  \"BRUSHPRAIRIE\": \"Brush Prairie\"\n}, {\n  \"GRAYSRIVER\": \"Grays River\"\n}, {\n  \"NORTHBONNEVILLE\": \"North Bonneville\"\n}, {\n  \"WHITESALMON\": \"White Salmon\"\n}, {\n  \"EASTWENATCHEE\": \"East Wenatchee\"\n}, {\n  \"CHELANFALLS\": \"Chelan Falls\"\n}, {\n  \"MOSESLAKE\": \"Moses Lake\"\n}, {\n  \"SOAPLAKE\": \"Soap Lake\"\n}, {\n  \"WILSONCREEK\": \"Wilson Creek\"\n}, {\n  \"CLEELUM\": \"Cle Elum\"\n}, {\n  \"GOOSEPRAIRIE\": \"Goose Prairie\"\n}, {\n  \"SOUTHCLEELUM\": \"South Cle Elum\"\n}, {\n  \"WHITESWAN\": \"White Swan\"\n}, {\n  \"AIRWAYHEIGHTS\": \"Airway Heights\"\n}, {\n  \"FAIRCHILDAIRFORCEBASE\": \"Fairchild Air Force Base\"\n}, {\n  \"FOURLAKES\": \"Four Lakes\"\n}, {\n  \"LIBERTYLAKE\": \"Liberty Lake\"\n}, {\n  \"MEDICALLAKE\": \"Medical Lake\"\n}, {\n  \"NEWMANLAKE\": \"Newman Lake\"\n}, {\n  \"NINEMILEFALLS\": \"Nine Mile Falls\"\n}, {\n  \"OTISORCHARDS\": \"Otis Orchards\"\n}, {\n  \"COULEECITY\": \"Coulee City\"\n}, {\n  \"COULEEDAM\": \"Coulee Dam\"\n}, {\n  \"ELECTRICCITY\": \"Electric City\"\n}, {\n  \"ELMERCITY\": \"Elmer City\"\n}, {\n  \"GRANDCOULEE\": \"Grand Coulee\"\n}, {\n  \"KETTLEFALLS\": \"Kettle Falls\"\n}, {\n  \"LOONLAKE\": \"Loon Lake\"\n}, {\n  \"METALINEFALLS\": \"Metaline Falls\"\n}, {\n  \"COLLEGEPLACE\": \"College Place\"\n}, {\n  \"WESTRICHLAND\": \"West Richland\"\n}, {\n  \"ROYALCITY\": \"Royal City\"\n}, {\n  \"WALLAWALLA\": \"Walla Walla\"\n}, {\n  \"FORTRICHARDSON\": \"Fort Richardson\"\n}, {\n  \"ELMENDORFAFB\": \"Elmendorf Afb\"\n}, {\n  \"CHIGNIKLAKE\": \"Chignik Lake\"\n}, {\n  \"PORTHEIDEN\": \"Port Heiden\"\n}, {\n  \"PORTLIONS\": \"Port Lions\"\n}, {\n  \"ANCHORPOINT\": \"Anchor Point\"\n}, {\n  \"CHIGNIKLAGOON\": \"Chignik Lagoon\"\n}, {\n  \"CLAMGULCH\": \"Clam Gulch\"\n}, {\n  \"CLARKSPOINT\": \"Clarks Point\"\n}, {\n  \"COLDBAY\": \"Cold Bay\"\n}, {\n  \"COOPERLANDING\": \"Cooper Landing\"\n}, {\n  \"COPPERCENTER\": \"Copper Center\"\n}, {\n  \"CROOKEDCREEK\": \"Crooked Creek\"\n}, {\n  \"FALSEPASS\": \"False Pass\"\n}, {\n  \"GOODNEWSBAY\": \"Goodnews Bay\"\n}, {\n  \"SAINTGEORGEISLAND\": \"Saint George Island\"\n}, {\n  \"HOOPERBAY\": \"Hooper Bay\"\n}, {\n  \"KINGCOVE\": \"King Cove\"\n}, {\n  \"KINGSALMON\": \"King Salmon\"\n}, {\n  \"LARSENBAY\": \"Larsen Bay\"\n}, {\n  \"LOWERKALSKAG\": \"Lower Kalskag\"\n}, {\n  \"MOOSEPASS\": \"Moose Pass\"\n}, {\n  \"MOUNTAINVILLAGE\": \"Mountain Village\"\n}, {\n  \"NEWSTUYAHOK\": \"New Stuyahok\"\n}, {\n  \"TOKSOOKBAY\": \"Toksook Bay\"\n}, {\n  \"OLDHARBOR\": \"Old Harbor\"\n}, {\n  \"PEDROBAY\": \"Pedro Bay\"\n}, {\n  \"PILOTSTATION\": \"Pilot Station\"\n}, {\n  \"PORTALSWORTH\": \"Port Alsworth\"\n}, {\n  \"REDDEVIL\": \"Red Devil\"\n}, {\n  \"RUSSIANMISSION\": \"Russian Mission\"\n}, {\n  \"SAINTPAULISLAND\": \"Saint Paul Island\"\n}, {\n  \"SANDPOINT\": \"Sand Point\"\n}, {\n  \"SCAMMONBAY\": \"Scammon Bay\"\n}, {\n  \"NUNAMIQUA\": \"Nunam Iqua\"\n}, {\n  \"SOUTHNAKNEK\": \"South Naknek\"\n}, {\n  \"TRAPPERCREEK\": \"Trapper Creek\"\n}, {\n  \"DUTCHHARBOR\": \"Dutch Harbor\"\n}, {\n  \"EIELSONAFB\": \"Eielson Afb\"\n}, {\n  \"FORTWAINWRIGHT\": \"Fort Wainwright\"\n}, {\n  \"NORTHPOLE\": \"North Pole\"\n}, {\n  \"ANAKTUVUKPASS\": \"Anaktuvuk Pass\"\n}, {\n  \"ARCTICVILLAGE\": \"Arctic Village\"\n}, {\n  \"BETTLESFIELD\": \"Bettles Field\"\n}, {\n  \"PRUDHOEBAY\": \"Prudhoe Bay\"\n}, {\n  \"DELTAJUNCTION\": \"Delta Junction\"\n}, {\n  \"FORTYUKON\": \"Fort Yukon\"\n}, {\n  \"DENALINATIONALPARK\": \"Denali National Park\"\n}, {\n  \"MANLEYHOTSPRINGS\": \"Manley Hot Springs\"\n}, {\n  \"LAKEMINCHUMINA\": \"Lake Minchumina\"\n}, {\n  \"POINTLAY\": \"Point Lay\"\n}, {\n  \"POINTHOPE\": \"Point Hope\"\n}, {\n  \"STEVENSVILLAGE\": \"Stevens Village\"\n}, {\n  \"WHITEMOUNTAIN\": \"White Mountain\"\n}, {\n  \"BREVIGMISSION\": \"Brevig Mission\"\n}, {\n  \"AUKEBAY\": \"Auke Bay\"\n}, {\n  \"ELFINCOVE\": \"Elfin Cove\"\n}, {\n  \"PORTALEXANDER\": \"Port Alexander\"\n}, {\n  \"TENAKEESPRINGS\": \"Tenakee Springs\"\n}, {\n  \"MEYERSCHUCK\": \"Meyers Chuck\"\n}, {\n  \"COFFMANCOVE\": \"Coffman Cove\"\n}, {\n  \"THORNEBAY\": \"Thorne Bay\"\n}, {\n  \"POINTBAKER\": \"Point Baker\"\n}, {\n  \"WARDCOVE\": \"Ward Cove\"\n}];\n\n//# sourceURL=webpack:///./app/components/geolocation-search/cities.js?");

/***/ }),

/***/ "./app/components/geolocation-search/geolocation-search.js":
/*!*****************************************************************!*\
  !*** ./app/components/geolocation-search/geolocation-search.js ***!
  \*****************************************************************/
/*! exports provided: cityAvailable, parseGeoLocation, cityLookUp, handleError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cityAvailable\", function() { return cityAvailable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseGeoLocation\", function() { return parseGeoLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cityLookUp\", function() { return cityLookUp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleError\", function() { return handleError; });\n/* harmony import */ var _cities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cities */ \"./app/components/geolocation-search/cities.js\");\n/* harmony import */ var _redirectionByRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./redirectionByRegion */ \"./app/components/geolocation-search/redirectionByRegion.js\");\n/* harmony import */ var _pointInPolygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pointInPolygon */ \"./app/components/geolocation-search/pointInPolygon.js\");\n/* harmony import */ var _utilities_common_isAuthor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/common/isAuthor */ \"./app/utilities/common/isAuthor.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\nvar KP_DOMAIN = location.host.indexOf('localhost') === -1;\nvar COOKIE_OPTIONS = {\n  path: '/',\n  domain: KP_DOMAIN ? '.kaiserpermanente.org' : 'localhost',\n  secure: KP_DOMAIN\n};\n$(document).ready(function () {\n  try {\n    initEventHandlers();\n    if (document.getElementById(\"geolocation\")) {\n      var isRegionPickerEvent = sessionStorage.getItem('isRegionPickerEvent') ? JSON.parse(sessionStorage.getItem('isRegionPickerEvent').toLowerCase()) : false;\n      if (isRegionPickerEvent) {\n        resetSearchView();\n      } else {\n        // Not Authoring Page\n        if (!Object(_utilities_common_isAuthor__WEBPACK_IMPORTED_MODULE_3__[\"isAuthorInstance\"])()) {\n          var geoLocView = getCookie(\"geoLocView\");\n          if (geoLocView === 'edit' || geoLocView === undefined) {\n            onPageLoadsetDefaultLocation();\n          } else if (geoLocView && geoLocView === 'search') {\n            setCookie('geoLocView', 'search', COOKIE_OPTIONS);\n            showSearchView();\n          }\n        }\n        // Authoring Page\n        else {\n          showSearchView();\n        }\n      }\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: document Ready Event]: Error while Loading search/edit view', error.message);\n  }\n});\nfunction initEventHandlers() {\n  try {\n    window.addEventListener(\"beforeunload\", function (event) {\n      try {\n        // if (document.getElementById(\"geolocation\")) {\n        var isgeoLocationPage = document.getElementById(\"geolocation\");\n        var isRegionPickerEvent = false;\n        if (event.target && event.target.activeElement && event.target.activeElement.firstElementChild) {\n          isRegionPickerEvent = event.target.activeElement.firstElementChild.classList.contains(\"drop-menu-button-text\");\n        }\n        if (isRegionPickerEvent == false && isgeoLocationPage == null) {\n          var revertBackValue = sessionStorage.getItem('isRegionPickerEvent');\n          sessionStorage.setItem('isRegionPickerEvent', revertBackValue);\n        } else {\n          sessionStorage.setItem('isRegionPickerEvent', isRegionPickerEvent);\n        }\n\n        // if (!isRegionPickerEvent && event.target && event.target.activeElement.id !== 'geolocationSearch') {\n        //   deleteCookie(\"geoLocSearchObj\");\n        //   document.getElementById(\"geolocation\").value = '';\n        //   setCookie('geoLocView', 'edit', COOKIE_OPTIONS);\n        // }\n\n        if (event.target && event.target.activeElement.id === 'geolocationSearch') {\n          setCookie('isUpdateBtnClicked', true, COOKIE_OPTIONS);\n        }\n\n        // }\n      } catch (e) {}\n    }, false);\n    $(\"#geolocationSearch\").click(function (e) {\n      console.log(\"[GEO-LOC: initEventHandlers]: Update button clicked\");\n      sessionStorage.setItem('isRegionPickerEvent', false);\n      e.preventDefault();\n      geoLocSearch(false);\n    });\n    $(\"#editBtn\").click(function (e) {\n      console.log(\"[GEO-LOC: displayRegionInfo]: Edit button clicked\");\n      sessionStorage.setItem('isRegionPickerEvent', false);\n      e.preventDefault();\n      showSearchView();\n    });\n    clearAllInlineErrors();\n  } catch (err) {\n    console.error(\"[GEO-LOC: initEventHandlers]: !!Error initializing events\", err.message);\n  }\n}\n;\nfunction onPageLoadsetDefaultLocation() {\n  try {\n    var geoLocationSearchObj = getCookie(\"geoLocSearchObj\");\n    var pageLoadZipCodeVal = '';\n    if (geoLocationSearchObj) {\n      pageLoadZipCodeVal = JSON.parse(geoLocationSearchObj).ZIP;\n      if (pageLoadZipCodeVal && pageLoadZipCodeVal.toString().toLowerCase() == 'null' || pageLoadZipCodeVal.toString().toLowerCase() == 'undefined') {\n        document.getElementById(\"geolocation\").value = '';\n        showInlineErrorMsg(\" !! ERROR - Invalid Location found other then US\");\n      } else {\n        showEditView();\n      }\n    } else {\n      fetch(\"/content/dam/kporg/front-door/json/akamai-request.json\").then(function (response) {\n        var geoLocationHeader = response.headers.get(\"X-Geolocation\");\n        console.log(\"geoLocationHeader:\" + geoLocationHeader);\n        if (response.ok) {\n          try {\n            response.json().then(function () {\n              geoLocationSearchObj = parseLocation(geoLocationHeader);\n              setCookie('geoLocSearchObj', JSON.stringify(geoLocationSearchObj), COOKIE_OPTIONS);\n              // DECIDE THE LOGIC HERE FOR NON KP REGION FIRST TIME DISPLAY..\n              var isRegionAvailable = getCookie(\"ImpSessionRoP\");\n              if (isRegionAvailable) {\n                showEditView();\n              } else {\n                resetSearchView();\n              }\n            });\n          } catch (e) {\n            console.error(\"[GEO-LOC: onPageLoadsetDefaultLocation]: !!Error Failed to get akamai-json configs\");\n          }\n        }\n      }).catch(function (err) {\n        console.error(\"[GEO-LOC: onPageLoadsetDefaultLocation]: !!Error Failed to get geolocation header\");\n      });\n    }\n  } catch (err) {\n    console.error(\"[GEO-LOC: onPageLoadsetDefaultLocation]: !!Error while fetching geolocation...\", err.message);\n  }\n}\nfunction cityAvailable(addressComponent) {\n  try {\n    var nonKPZipTxt = $('#geoLocationContainer').attr('data-non-kp-zip-error-text');\n    var regionRedirectUrl = Object(_redirectionByRegion__WEBPACK_IMPORTED_MODULE_1__[\"regionRedirect\"])(addressComponent.Latitude, addressComponent.Longitude, addressComponent.Region_Code);\n    if (regionRedirectUrl.reDirectUrl && regionRedirectUrl.reDirectUrl !== '') {\n      addressComponent.KpRegion = regionRedirectUrl.kpRegion;\n      setCookie('geoLocSearchObj', JSON.stringify(addressComponent), COOKIE_OPTIONS);\n      setCookie('geoLocView', 'edit', COOKIE_OPTIONS);\n      window.open(regionRedirectUrl.reDirectUrl, '_self');\n    } else {\n      showInlineErrorMsg(nonKPZipTxt);\n    }\n  } catch (err) {\n    console.error(\"[GEO-LOC: cityAvailable]: !! Error occured while searching for city availability\", err.message);\n  }\n}\nfunction findNewZipcodeRegion(_x) {\n  return _findNewZipcodeRegion.apply(this, arguments);\n}\nfunction _findNewZipcodeRegion() {\n  _findNewZipcodeRegion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(geoLoc) {\n    var invalidZipCodeTxt, addressComponent, addressObj, _invalidZipCodeTxt;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          invalidZipCodeTxt = $('#geoLocationContainer').attr('data-invalid-zip-code-error-text');\n          addressComponent = {};\n          if (!geoLoc) {\n            _context.next = 9;\n            break;\n          }\n          _context.next = 6;\n          return Object(_pointInPolygon__WEBPACK_IMPORTED_MODULE_2__[\"findCityState\"])({\n            componentRestrictions: {\n              country: 'US',\n              postalCode: geoLoc\n            }\n          });\n        case 6:\n          _context.t0 = _context.sent;\n          _context.next = 10;\n          break;\n        case 9:\n          _context.t0 = geoLoc;\n        case 10:\n          addressObj = _context.t0;\n          if (!(addressObj == geoLoc)) {\n            _context.next = 15;\n            break;\n          }\n          showInlineErrorMsg(invalidZipCodeTxt);\n          console.log(\"addressObj == geoLoc --> Condition\");\n          return _context.abrupt(\"return\");\n        case 15:\n          addressComponent = parseGeoLocation(addressObj);\n          if (addressComponent.City && addressComponent.ZIP) {\n            cityAvailable(addressComponent);\n          } else {\n            // Location not available      \n            showInlineErrorMsg(invalidZipCodeTxt);\n            console.log(\"City not available --> Condition\");\n          }\n          _context.next = 24;\n          break;\n        case 19:\n          _context.prev = 19;\n          _context.t1 = _context[\"catch\"](0);\n          console.error(\"[GEO-LOC: findNewZipcodeRegion]: !! Error while finding entered zip code region...\" + _context.t1);\n          _invalidZipCodeTxt = $('#geoLocationContainer').attr('data-invalid-zip-code-error-text');\n          showInlineErrorMsg(_invalidZipCodeTxt);\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 19]]);\n  }));\n  return _findNewZipcodeRegion.apply(this, arguments);\n}\nfunction parseLocation(geoLoc) {\n  try {\n    var geoLocation = geoLoc.split(\"|\");\n    var geoLocObj = {};\n    geoLocation.forEach(function (geoItem) {\n      var geoKeyVal = geoItem.split(\":\").map(function (item) {\n        return item.trim();\n      });\n      geoLocObj[geoKeyVal[0]] = geoKeyVal[1];\n    });\n    return geoLocObj;\n  } catch (error) {\n    console.error('[GEO-LOC: parseLocation]: Error while parsing location:', error.message);\n  }\n}\nfunction parseGeoLocation(addressObj) {\n  try {\n    var addressComponent = {};\n    var county;\n    if (addressObj && addressObj.length > 0) {\n      for (var address = 0; address < addressObj[0]['address_components'].length; address++) {\n        switch (addressObj[0]['address_components'][address].types[0]) {\n          case \"postal_code\":\n            addressComponent.ZIP = addressObj[0]['address_components'][address].short_name;\n            break;\n          case \"neighborhood\":\n            county = addressObj[0]['address_components'][address].long_name;\n            break;\n          case \"administrative_area_level_2\":\n            if (!county) {\n              county = addressObj[0]['address_components'][address].long_name;\n            }\n            break;\n          case \"locality\":\n            addressComponent.City = addressObj[0]['address_components'][address].long_name;\n            break;\n          case \"administrative_area_level_1\":\n            addressComponent.Region_Code = addressObj[0]['address_components'][address].short_name;\n            break;\n          case \"country\":\n            addressComponent.Country_Code = addressObj[0]['address_components'][address].short_name;\n            break;\n        }\n      }\n      addressComponent.City = addressComponent.City ? addressComponent.City : county;\n      addressComponent.Latitude = addressObj[0]['geometry'].location.lat();\n      addressComponent.Longitude = addressObj[0]['geometry'].location.lng();\n      return addressComponent;\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: parseGeoLocation]: Error while parsing geolocation:', error.message);\n  }\n}\nfunction validateSearchval(zipcodeInput) {\n  try {\n    var ZIPCODE_MAX_SIZE = 5;\n    var zipCode = zipcodeInput.replace(/\\s/g, '');\n    console.log(\"[GEO-LOC: validateSearchval]: Validate Zipcode called..\");\n    zipCode = zipcodeInput.trim();\n    var numbersOnly = /^\\d+$/.test(zipCode);\n    if (zipCode === '' || !numbersOnly || zipCode.length !== ZIPCODE_MAX_SIZE) {\n      var invalidZipSearchTxt = $('#geoLocationContainer').attr('data-invalid-zip-search-error-text');\n      showInlineErrorMsg(invalidZipSearchTxt);\n      return false;\n    } else {\n      return true;\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: validateSearchval]: Error validating zipcode value:', error.message);\n  }\n}\nfunction showInlineErrorMsg(errorMsg) {\n  try {\n    var errorContainer = document.getElementById(\"geo-error-div\");\n    var errorDisplaySpan = document.getElementById(\"display-error\");\n    var geoLocTxtbox = document.getElementById(\"geolocation\");\n    errorContainer.style.display = 'block';\n    errorDisplaySpan.innerHTML = errorMsg;\n    geoLocTxtbox.setAttribute(\"aria-describedby\", \"txtboxLabel geo-error-div\");\n    geoLocTxtbox.setAttribute(\"aria-invalid\", \"true\");\n    geoLocTxtbox.focus();\n  } catch (error) {\n    console.error('[GEO-LOC: showInlineErrorMsg]: Error occurred while showing error:', error.message);\n  }\n}\nfunction clearAllInlineErrors() {\n  try {\n    var errorDiv = document.getElementById(\"geo-error-div\");\n    var geoLocTxtbox = document.getElementById(\"geolocation\");\n    if (errorDiv) {\n      errorDiv.style.display = 'none';\n      geoLocTxtbox.setAttribute(\"aria-describedby\", \"txtboxLabel\");\n      geoLocTxtbox.removeAttribute(\"aria-invalid\");\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: clearAllInlineErrors]: An error occurred clearing inline errors:', error.message);\n  }\n}\nfunction displayRegionInfo() {\n  try {\n    var zipCodeValueSpan = document.getElementById('zipCodeValue');\n    var regionValueSpan = document.getElementById('regionValue');\n    var region = sessionStorage.getItem('region');\n    var zipCode = sessionStorage.getItem('zipCode');\n    regionValueSpan.textContent = capitalizeFirstLetter(region);\n    zipCodeValueSpan.textContent = zipCode;\n  } catch (error) {\n    console.error('[GEO-LOC: displayRegionInfo]: An error occurred during retrieval:', error.message);\n  }\n}\nfunction showSearchView() {\n  try {\n    var searchViewContainer = document.getElementById('search-view');\n    var editViewContainer = document.getElementById('edit-view');\n    editViewContainer.style.display = 'none';\n    searchViewContainer.style.display = 'block';\n    if (!Object(_utilities_common_isAuthor__WEBPACK_IMPORTED_MODULE_3__[\"isAuthorInstance\"])()) {\n      var geoLocationSearchObj = getCookie(\"geoLocSearchObj\");\n      if (geoLocationSearchObj) {\n        document.getElementById(\"geolocation\").value = JSON.parse(geoLocationSearchObj).ZIP;\n        document.getElementById(\"geolocation\").focus();\n      }\n      setCookie('geoLocView', 'search', COOKIE_OPTIONS);\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: showSearchView]: Error showing search view', error.message);\n  }\n}\nfunction resetSearchView() {\n  try {\n    var searchViewContainer = document.getElementById('search-view');\n    var editViewContainer = document.getElementById('edit-view');\n    editViewContainer.style.display = 'none';\n    searchViewContainer.style.display = 'block';\n    if (!Object(_utilities_common_isAuthor__WEBPACK_IMPORTED_MODULE_3__[\"isAuthorInstance\"])()) {\n      deleteCookie(\"geoLocSearchObj\");\n      document.getElementById(\"geolocation\").value = '';\n      setCookie('geoLocView', 'search', COOKIE_OPTIONS);\n    }\n  } catch (error) {\n    console.error('[GEO-LOC: resetSearchView]: Error resetting search view', error.message);\n  }\n}\nfunction showEditView() {\n  try {\n    var searchViewContainer = document.getElementById('search-view');\n    var editViewContainer = document.getElementById('edit-view');\n    searchViewContainer.style.display = 'none';\n    editViewContainer.style.display = 'block';\n    var geoLocationSearchObj = getCookie(\"geoLocSearchObj\");\n    if (geoLocationSearchObj) {\n      var zipCode = JSON.parse(geoLocationSearchObj).ZIP;\n      var region = JSON.parse(geoLocationSearchObj).City;\n      sessionStorage.setItem('zipCode', zipCode);\n      sessionStorage.setItem('region', region);\n      displayRegionInfo();\n      if (getCookie(\"isUpdateBtnClicked\") == 'true') {\n        var _success_zip_update_msg = document.getElementById(\"success_zip_update_msg\");\n        _success_zip_update_msg.style.display = 'block';\n        _success_zip_update_msg.focus();\n        deleteCookie(\"isUpdateBtnClicked\");\n      } else {\n        success_zip_update_msg.style.display = 'none';\n      }\n    }\n    setCookie('geoLocView', 'edit', COOKIE_OPTIONS);\n  } catch (error) {\n    console.error('[GEO-LOC: showEditView]: Error showing edit view', error.message);\n  }\n}\nfunction geoLocSearch() {\n  try {\n    var locVal = document.getElementById(\"geolocation\").value;\n    setCookie(\"searchLoc\", locVal, COOKIE_OPTIONS);\n    clearAllInlineErrors();\n    populateLoc(locVal);\n  } catch (e) {\n    handleError(\"geoLocSearch\", e);\n  }\n}\nfunction populateLoc(zipCode) {\n  try {\n    if (validateSearchval(zipCode)) {\n      findNewZipcodeRegion(zipCode);\n\n      // New Region found for redirection\n      redirectToNewLoc();\n    } else {}\n  } catch (e) {\n    handleError(\"[populateLoc]: !! Error populateLoc.. \", e);\n  }\n}\nfunction redirectToNewLoc() {\n  try {\n    var geoLocCookie = getCookie('geoLocSearchObj');\n    if (geoLocCookie) {\n      var geoObj = JSON.parse(geoLocCookie);\n      if ((geoObj === null || geoObj === void 0 ? void 0 : geoObj.Country_Code) == \"US\") {\n        var cityName = cityLookUp(geoObj.City);\n        geoObj.City = cityName ? cityName : geoObj.City.charAt(0).toUpperCase() + geoObj.City.substr(1).toLowerCase();\n        geoObj.KpRegion = Object(_redirectionByRegion__WEBPACK_IMPORTED_MODULE_1__[\"regionRedirect\"])(geoObj.Latitude, geoObj.Longitude, geoObj.Region_Code).kpRegion;\n        setCookie('geoLocSearchObj', JSON.stringify(geoObj), COOKIE_OPTIONS);\n      }\n    }\n    return true;\n  } catch (e) {\n    handleError(\"redirectToNewLoc\", e);\n  }\n}\nfunction setCookie(name, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({\n    path: '/'\n  }, options);\n  var updatedCookie = name + '=' + value;\n  for (var optKey in options) {\n    updatedCookie += '; ' + optKey;\n    var optValue = options[optKey];\n    if (optValue !== true) {\n      updatedCookie += '=' + optValue;\n    }\n  }\n  document.cookie = updatedCookie;\n}\nfunction getCookie(cookieName) {\n  var cookie = {};\n  document.cookie.split(';').forEach(function (el) {\n    var _el$split = el.split('='),\n      _el$split2 = _slicedToArray(_el$split, 2),\n      key = _el$split2[0],\n      value = _el$split2[1];\n    cookie[key.trim()] = value;\n  });\n  return cookie[cookieName];\n}\nfunction deleteCookie(name) {\n  document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=' + COOKIE_OPTIONS.domain;\n}\nfunction capitalizeFirstLetter(str) {\n  try {\n    var newStr = str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n    return newStr;\n  } catch (error) {\n    console.error('[GEO-LOC: capitalizeFirstLetter]: Error captilizing', error.message);\n  }\n}\nfunction cityLookUp(cityHeader) {\n  try {\n    for (var city = 0; city < _cities__WEBPACK_IMPORTED_MODULE_0__[\"USCITIES\"].length; city++) {\n      if (_cities__WEBPACK_IMPORTED_MODULE_0__[\"USCITIES\"][city].hasOwnProperty(cityHeader)) {\n        return _cities__WEBPACK_IMPORTED_MODULE_0__[\"USCITIES\"][city][cityHeader];\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error('[GEO-LOC: cityLookUp]: Error cityLookup', error.message);\n  }\n}\nfunction handleError(methodName, error) {\n  console.error(\"!! Error-[\" + methodName + \"]: \", error);\n}\n\n//# sourceURL=webpack:///./app/components/geolocation-search/geolocation-search.js?");

/***/ }),

/***/ "./app/components/geolocation-search/geolocation-search.scss":
/*!*******************************************************************!*\
  !*** ./app/components/geolocation-search/geolocation-search.scss ***!
  \*******************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/geolocation-search/geolocation-search.scss?");

/***/ }),

/***/ "./app/components/geolocation-search/pointInPolygon.js":
/*!*************************************************************!*\
  !*** ./app/components/geolocation-search/pointInPolygon.js ***!
  \*************************************************************/
/*! exports provided: pointInPolygon, findCityState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointInPolygon\", function() { return pointInPolygon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findCityState\", function() { return findCityState; });\n// Implementation of Winding number algorithm\nfunction pointInPolygon(point, vs) {\n  var x = parseFloat(point.lat),\n    y = parseFloat(point.lng);\n  var wn = 0;\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n    var xi = parseFloat(vs[i].lat),\n      yi = parseFloat(vs[i].lng);\n    var xj = parseFloat(vs[j].lat),\n      yj = parseFloat(vs[j].lng);\n    if (yj <= y) {\n      if (yi > y) {\n        if (isLeft({\n          lat: xj,\n          lng: yj\n        }, {\n          lat: xi,\n          lng: yi\n        }, {\n          lat: x,\n          lng: y\n        }) > 0) {\n          wn++;\n        }\n      }\n    } else {\n      if (yi <= y) {\n        if (isLeft({\n          lat: xj,\n          lng: yj\n        }, {\n          lat: xi,\n          lng: yi\n        }, {\n          lat: x,\n          lng: y\n        }) < 0) {\n          wn--;\n        }\n      }\n    }\n  }\n  return wn != 0;\n}\n;\nfunction isLeft(P0, P1, P2) {\n  return (P1.lat - P0.lat) * (P2.lng - P0.lng) - (P2.lat - P0.lat) * (P1.lng - P0.lng);\n}\nfunction findCityState(geoParams) {\n  try {\n    // google is loaded/defined here ...\n    return new Promise(function (resolve, reject) {\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode(geoParams, function (result, status) {\n        if (status == 'OK' && result) {\n          resolve(result);\n        } else {\n          reject(status);\n        }\n      });\n    });\n  } catch (e) {\n    console.error(\"[GEO-LOC: findCityState]: !! Error while finding City & State ...\" + e);\n  }\n}\n\n//# sourceURL=webpack:///./app/components/geolocation-search/pointInPolygon.js?");

/***/ }),

/***/ "./app/components/geolocation-search/redirectionByRegion.js":
/*!******************************************************************!*\
  !*** ./app/components/geolocation-search/redirectionByRegion.js ***!
  \******************************************************************/
/*! exports provided: regionRedirect, getUri */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regionRedirect\", function() { return regionRedirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUri\", function() { return getUri; });\n/* harmony import */ var _pointInPolygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointInPolygon */ \"./app/components/geolocation-search/pointInPolygon.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\nvar KP_REGIONS = {\n  WA: \"washington\",\n  KNW: \"oregon-washington\",\n  NCA: \"northern-california\",\n  SCA: \"southern-california\",\n  COL: \"colorado\",\n  GGA: \"georgia\",\n  MID: \"maryland-virginia-washington-dc\",\n  HAW: \"hawaii\"\n};\nvar washington = {\n  \"polygon\": [{\n    lat: 49.023461,\n    lng: -123.374367\n  }, {\n    lat: 48.987122,\n    lng: -117.036534\n  }, {\n    lat: 46.3367,\n    lng: -117.0412\n  }, {\n    lat: 46.050038,\n    lng: -124.041251\n  }, {\n    lat: 48.501739,\n    lng: -125.008693\n  }, {\n    lat: 48.290194,\n    lng: -123.123408\n  }, {\n    lat: 49.023461,\n    lng: -123.374367\n  }],\n  \"id\": \"WA\",\n  \"uri\": \"washington\"\n};\nvar northwest = {\n  \"polygon\": [{\n    lat: 45.932050,\n    lng: -124.001622\n  }, {\n    lat: 46.3367,\n    lng: -117.0412\n  }, {\n    lat: 45.629405,\n    lng: -116.425843\n  }, {\n    lat: 44.355278,\n    lng: -117.261699\n  }, {\n    lat: 44.150681,\n    lng: -116.909902\n  }, {\n    lat: 42.016652,\n    lng: -117.041811\n  }, {\n    lat: 41.951320,\n    lng: -124.583464\n  }],\n  \"id\": \"KNW\",\n  \"uri\": \"oregon-washington\"\n};\nvar northernCalifornia = {\n  \"polygon\": [{\n    lat: 42.032974,\n    lng: -124.771144\n  }, {\n    lat: 42.049293,\n    lng: -120.009029\n  }, {\n    lat: 39.002110,\n    lng: -119.989756\n  }, {\n    lat: 36.703660,\n    lng: -116.798058\n  }, {\n    lat: 36.155618,\n    lng: -122.009055\n  }, {\n    lat: 40.363288,\n    lng: -124.559585\n  }],\n  \"id\": \"NCA\",\n  \"uri\": \"northern-california\"\n};\nvar southernCalifornia = {\n  \"polygon\": [{\n    lat: 36.155618,\n    lng: -122.009055\n  }, {\n    lat: 36.703660,\n    lng: -116.798058\n  }, {\n    lat: 34.976001,\n    lng: -114.569578\n  }, {\n    lat: 34.307143,\n    lng: -114.151819\n  }, {\n    lat: 32.731841,\n    lng: -114.538322\n  }, {\n    lat: 32.537552,\n    lng: -117.531100\n  }, {\n    lat: 34.524661,\n    lng: -120.855361\n  }],\n  \"id\": \"SCA\",\n  \"uri\": \"southern-california\"\n};\nvar coloradoDB = {\n  \"polygon\": [{\n    lat: 40.26871352449058,\n    lng: -109.05093521427948\n  }, {\n    lat: 40.26871352449058,\n    lng: -102.05161461739759\n  }, {\n    lat: 39.233200312601156,\n    lng: -102.04760270150756\n  }, {\n    lat: 39.233200312601156,\n    lng: -106.01323800119017\n  }, {\n    lat: 36.995560528203,\n    lng: -106.0160704139099\n  }, {\n    lat: 36.99905657116556,\n    lng: -109.04559330972289\n  }],\n  \"id\": \"COL\",\n  \"uri\": \"colorado\"\n};\nvar coloradoNorthern = {\n  \"polygon\": [{\n    lat: 41.00280759604659,\n    lng: -109.05009316006237\n  }, {\n    lat: 41.002982084032496,\n    lng: -107.35247567031722\n  }, {\n    lat: 41.002729334743655,\n    lng: -102.05155506152467\n  }, {\n    lat: 40.26871352449058,\n    lng: -102.05161461739759\n  }, {\n    lat: 40.26871352449058,\n    lng: -109.05093521427948\n  }],\n  \"id\": \"COL\",\n  \"uri\": \"colorado\"\n};\nvar coloradoSouthern = {\n  \"polygon\": [{\n    lat: 39.233200312601156,\n    lng: -106.01323800119017\n  }, {\n    lat: 39.233200312601156,\n    lng: -102.04760270150756\n  }, {\n    lat: 36.99298746189116,\n    lng: -102.04206302451664\n  }, {\n    lat: 36.995560528203,\n    lng: -106.0160704139099\n  }],\n  \"id\": \"COL\",\n  \"uri\": \"colorado\"\n};\nvar georgia = {\n  \"polygon\": [{\n    lat: 34.985003,\n    lng: -85.615678\n  }, {\n    lat: 35.003003,\n    lng: -83.098129\n  }, {\n    lat: 34.696461,\n    lng: -83.339989\n  }, {\n    lat: 34.443159,\n    lng: -82.867254\n  }, {\n    lat: 31.858897,\n    lng: -80.712496\n  }, {\n    lat: 30.685164,\n    lng: -81.262179\n  }, {\n    lat: 30.817346,\n    lng: -81.943786\n  }, {\n    lat: 30.363396,\n    lng: -82.042729\n  }, {\n    lat: 30.372875,\n    lng: -82.185647\n  }, {\n    lat: 30.581179,\n    lng: -82.229622\n  }, {\n    lat: 30.704058,\n    lng: -84.912707\n  }, {\n    lat: 31.194008,\n    lng: -85.132580\n  }, {\n    lat: 31.550453,\n    lng: -85.022643\n  }, {\n    lat: 31.868228,\n    lng: -85.154567\n  }, {\n    lat: 32.268555,\n    lng: -84.923700\n  }, {\n    lat: 32.352123,\n    lng: -85.034308\n  }],\n  \"id\": \"GGA\",\n  \"uri\": \"georgia\"\n};\nvar midatlantic = {\n  \"polygon\": [{\n    lat: 39.487085,\n    lng: -77.583696\n  }, {\n    lat: 39.444678,\n    lng: -76.187501\n  }, {\n    lat: 37.909534,\n    lng: -76.253463\n  }, {\n    lat: 38.074041,\n    lng: -77.946487\n  }],\n  \"id\": \"MID\",\n  \"uri\": \"maryland-virginia-washington-dc\"\n};\nvar hawaii = {\n  \"polygon\": [{\n    lat: 29.458731,\n    lng: -179.015960\n  }, {\n    lat: 19.932041,\n    lng: -153.171998\n  }, {\n    lat: 18.187607,\n    lng: -155.810477\n  }, {\n    lat: 26.980829,\n    lng: -179.512816\n  }],\n  \"id\": \"HAW\",\n  \"uri\": \"hawaii\"\n};\nfunction locationPolygon(coords, polyList) {\n  var kpRegUrl = {};\n  var _iterator = _createForOfIteratorHelper(polyList),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var poly = _step.value;\n      if (!kpRegUrl.kpRegion && !kpRegUrl.kp && Object(_pointInPolygon__WEBPACK_IMPORTED_MODULE_0__[\"pointInPolygon\"])(coords, poly.polygon)) {\n        kpRegUrl.kpRegion = poly.id;\n        kpRegUrl.reDirectUrl = getUri(poly.uri);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return kpRegUrl;\n}\nfunction getCurrentPageUri(regionUri) {\n  try {\n    var browserPath = window.location.pathname;\n    var allKpRegions = Object.values(KP_REGIONS);\n    var isRegionMatchFound = true;\n    var finalRegionUri = '';\n    allKpRegions.forEach(function (region) {\n      console.log(region);\n      if (browserPath.includes(region)) {\n        finalRegionUri = browserPath.replace(region, regionUri);\n        isRegionMatchFound = false;\n      }\n    });\n    if (isRegionMatchFound) {\n      if (regionUri === '') {\n        // Defaulted to browser path when region not found ...\n        finalRegionUri = browserPath;\n      } else {\n        finalRegionUri = regionUri + browserPath;\n      }\n    }\n    if (finalRegionUri.includes('/es/')) {\n      finalRegionUri = finalRegionUri.replace('/es', '');\n    }\n    return finalRegionUri;\n  } catch (error) {\n    console.error(\"!! Geolocation Error - [getCurrentPageUri]: \", error);\n  }\n}\nfunction regionRedirect(lat, lng, state) {\n  var kpRegUrl = {\n    \"kpRegion\": \"\",\n    \"reDirectUrl\": \"\"\n  };\n  var polyList;\n  switch (state) {\n    case \"CA\":\n      polyList = [northernCalifornia, southernCalifornia];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"HI\":\n      polyList = [hawaii];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"GA\":\n      polyList = [georgia];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"MD\":\n    case \"VA\":\n    case \"DC\":\n      polyList = [midatlantic];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"OR\":\n      polyList = [northwest];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"WA\":\n      polyList = [northwest, washington];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n    case \"CO\":\n      polyList = [coloradoDB, coloradoSouthern, coloradoNorthern];\n      kpRegUrl = locationPolygon({\n        \"lat\": lat,\n        \"lng\": lng\n      }, polyList);\n      break;\n  }\n  return kpRegUrl;\n}\nfunction getUri(regionUri) {\n  return getCurrentPageUri(regionUri);\n}\n\n//# sourceURL=webpack:///./app/components/geolocation-search/redirectionByRegion.js?");

/***/ }),

/***/ "./app/utilities/common/isAuthor.js":
/*!******************************************!*\
  !*** ./app/utilities/common/isAuthor.js ***!
  \******************************************/
/*! exports provided: isAuthorInstance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isAuthorInstance\", function() { return isAuthorInstance; });\nvar AUTHOR_IDENTIFIER = 'editor.html';\nfunction isAuthorInstance() {\n  var hasEditorInPathname = window.top.location.pathname.indexOf(AUTHOR_IDENTIFIER) > -1;\n  var hasAuthorInstanceCookie = (document.cookie.match(/^(?:.*;)?\\s*cq-authoring-mode\\s*=\\s*([^;]+)(?:.*)?$/) || [null])[1];\n  return hasEditorInPathname || hasAuthorInstanceCookie;\n}\n\n//# sourceURL=webpack:///./app/utilities/common/isAuthor.js?");

/***/ }),

/***/ 46:
/*!***********************************************************************************************************************************!*\
  !*** multi ./app/components/geolocation-search/geolocation-search.js ./app/components/geolocation-search/geolocation-search.scss ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/geolocation-search/geolocation-search.js */\"./app/components/geolocation-search/geolocation-search.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/geolocation-search/geolocation-search.scss */\"./app/components/geolocation-search/geolocation-search.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/geolocation-search/geolocation-search.js_./app/components/geolocation-search/geolocation-search.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 47);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/iframe/iframe.js":
/*!*****************************************!*\
  !*** ./app/components/iframe/iframe.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("window.buildResizableIframe = function () {\n  console.log(\"buildResizableIframe\");\n  window.dojo = window.dojo || {};\n  window.dojo.publish = function () {\n    console.log(\"AEM dojo handling\");\n  };\n  setTimeout(function () {\n    var iframeComp = document.getElementById(\"datatilesframe\");\n    if (window.location.href.indexOf(\"personal-action-plan\") > -1) {\n      var height1 = iframeComp.contentWindow.document.body.offsetHeight + 50 + \"px\";\n      var height2 = iframeComp.contentWindow.document.body.scrollHeight + 50 + \"px\";\n      iframeComp.height = iframeComp.contentWindow.document.body.offsetHeight !== 0 ? height1 : height2;\n    } else {\n      console.log(\"not pap page\");\n    }\n  }, 1200);\n};\n\n//# sourceURL=webpack:///./app/components/iframe/iframe.js?");

/***/ }),

/***/ 47:
/*!***********************************************!*\
  !*** multi ./app/components/iframe/iframe.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/iframe/iframe.js */\"./app/components/iframe/iframe.js\");\n\n\n//# sourceURL=webpack:///multi_./app/components/iframe/iframe.js?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 48);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/image-gallery/image-gallery.js":
/*!*******************************************************!*\
  !*** ./app/components/image-gallery/image-gallery.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n  'use strict';\n\n  (function ($, window, document, undefined) {\n    var name = \"jPages\",\n      instance = null,\n      defaults = {\n        containerID: \"\",\n        first: false,\n        previous: \"←\",\n        next: \"→\",\n        last: false,\n        links: \"numeric\",\n        // blank || title\n        startPage: 1,\n        perPage: 10,\n        midRange: 5,\n        startRange: 1,\n        endRange: 1,\n        pHolder: \"\",\n        keyBrowse: false,\n        scrollBrowse: false,\n        pause: 0,\n        clickStop: false,\n        delay: 50,\n        direction: \"forward\",\n        // backwards || auto || random ||\n        animation: \"\",\n        // http://daneden.me/animate/ - any entrance animations\n        fallback: 400,\n        minHeight: true,\n        callback: undefined // function( pages, items ) { }\n      };\n    function Plugin(element, options) {\n      this.options = $.extend({}, defaults, options);\n      this._container = $(\"#\" + this.options.containerID);\n      if (!this._container.length) return;\n      this.jQwindow = $(window);\n      this.jQdocument = $(document);\n      this._holder = $(element);\n      this._nav = {};\n      this._first = $(this.options.first);\n      this._previous = $(this.options.previous);\n      this._next = $(this.options.next);\n      this._last = $(this.options.last);\n\n      /* only visible items! */\n      this._items = this._container.children();\n      this._itemsShowing = $([]);\n      this._itemsHiding = $([]);\n      this._numPages = Math.ceil(this._items.length / this.options.perPage);\n      this._currentPageNum = this.options.startPage;\n      this._clicked = false;\n      this._cssAnimSupport = this.getCSSAnimationSupport();\n      this.init();\n    }\n    Plugin.prototype = {\n      constructor: Plugin,\n      getCSSAnimationSupport: function getCSSAnimationSupport() {\n        var animation = false,\n          domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),\n          elm = this._container.get(0);\n        if (elm.style.animationName) animation = true;\n        if (animation === false) {\n          for (var i = 0; i < domPrefixes.length; i++) {\n            if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\n              animation = true;\n              break;\n            }\n          }\n        }\n        return animation;\n      },\n      init: function init() {\n        this.setStyles();\n        this.setNav();\n        this.paginate(this._currentPageNum);\n        this.setMinHeight();\n      },\n      setStyles: function setStyles() {\n        var requiredStyles = \"<style>\" + \".jp-invisible { visibility: hidden !important; } \" + \".jp-hidden { display: none !important; }\" + \"</style>\";\n        $(requiredStyles).appendTo(\"head\");\n        if (this._cssAnimSupport && this.options.animation.length) this._items.addClass(\"animated jp-hidden\");else this._items.hide();\n      },\n      setNav: function setNav() {\n        var navhtml = this.writeNav();\n        this._holder.each(this.bind(function (index, element) {\n          var holder = $(element);\n          holder.html(navhtml);\n          this.cacheNavElements(holder, index);\n          this.bindNavHandlers(index);\n          this.disableNavSelection(element);\n        }, this));\n        if (this.options.keyBrowse) this.bindNavKeyBrowse();\n        if (this.options.scrollBrowse) this.bindNavScrollBrowse();\n      },\n      writeNav: function writeNav() {\n        var i = 1,\n          navhtml;\n        navhtml = this.writeBtn(\"first\") + this.writeBtn(\"previous\");\n        for (; i <= this._numPages; i++) {\n          if (i === 1 && this.options.startRange === 0) navhtml += \"<li class='list-nav ellipsis'><span class='screenreader-only'>ellipsis</span><i class='icon-more'></i></li>\";\n          if (i > this.options.startRange && i <= this._numPages - this.options.endRange) navhtml += \"<li class='list-nav jp-hidden'><a href='#' data-analytics-type='pagination-link' class='jp-hidden page-link'><span class='screenreader-only'>page</span>\";else navhtml += \"<li class='list-nav'><a class='page-link' data-analytics-type='pagination-link' href='#' ><span class='screenreader-only'>page</span>\";\n          switch (this.options.links) {\n            case \"numeric\":\n              navhtml += i;\n              break;\n            case \"blank\":\n              break;\n            case \"title\":\n              var title = this._items.eq(i - 1).attr(\"data-title\");\n              navhtml += title !== undefined ? title : \"\";\n              break;\n            default:\n              break;\n          }\n          navhtml += \"</a></li>\";\n          if (i === this.options.startRange || i === this._numPages - this.options.endRange) navhtml += \"<li class='list-nav ellipsis'><span class='screenreader-only'>ellipsis</span><i class='icon-more'></i></li>\";\n        }\n        navhtml += this.writeBtn(\"next\") + this.writeBtn(\"last\") + \"</div>\";\n        return navhtml;\n      },\n      writeBtn: function writeBtn(which) {\n        var arrowIcon = \"\";\n        if (which === 'previous') {\n          this.options[which] = \"<span class='screenreader-only'>Previous Page</span>\";\n          arrowIcon = 'icon-chevron-back';\n        }\n        if (which === 'next') {\n          this.options[which] = \"<span class='screenreader-only'>Next Page</span>\";\n          arrowIcon = 'icon-chevron-forward';\n        }\n        return this.options[which] !== false && !$(this[\"_\" + which]).length ? \"<li class='list-nav '><a href='#' data-analytics-click='\" + which + \"' data-analytics-type='pagination-link' class='jp-\" + which + \" \" + arrowIcon + \"'>\" + this.options[which] + \"</a></li>\" : \"\";\n      },\n      cacheNavElements: function cacheNavElements(holder, index) {\n        this._nav[index] = {};\n        this._nav[index].holder = holder;\n        this._nav[index].first = this._first.length ? this._first : this._nav[index].holder.find(\"a.jp-first\");\n        this._nav[index].previous = this._previous.length ? this._previous : this._nav[index].holder.find(\"a.jp-previous\");\n        this._nav[index].next = this._next.length ? this._next : this._nav[index].holder.find(\"a.jp-next\");\n        this._nav[index].last = this._last.length ? this._last : this._nav[index].holder.find(\"a.jp-last\");\n        this._nav[index].fstBreak = this._nav[index].holder.find(\".ellipsis:first\");\n        this._nav[index].lstBreak = this._nav[index].holder.find(\".ellipsis:last\");\n        this._nav[index].pages = this._nav[index].holder.find(\"a\").not(\".jp-first, .jp-previous, .jp-next, .jp-last\");\n        this._nav[index].permPages = this._nav[index].pages.slice(0, this.options.startRange).add(this._nav[index].pages.slice(this._numPages - this.options.endRange, this._numPages));\n        this._nav[index].pagesShowing = $([]);\n        this._nav[index].currentPage = $([]);\n      },\n      bindNavHandlers: function bindNavHandlers(index) {\n        var nav = this._nav[index];\n\n        // default nav\n        nav.holder.bind(\"click.jPages\", this.bind(function (evt) {\n          var newPage = this.getNewPage(nav, $(evt.target));\n          if (this.validNewPage(newPage)) {\n            this._clicked = true;\n            this.paginate(newPage);\n          }\n          evt.preventDefault();\n        }, this));\n\n        // custom first\n        if (this._first.length) {\n          this._first.bind(\"click.jPages\", this.bind(function () {\n            if (this.validNewPage(1)) {\n              this._clicked = true;\n              this.paginate(1);\n            }\n          }, this));\n        }\n\n        // custom previous\n        if (this._previous.length) {\n          this._previous.bind(\"click.jPages\", this.bind(function () {\n            var newPage = this._currentPageNum - 1;\n            if (this.validNewPage(newPage)) {\n              this._clicked = true;\n              this.paginate(newPage);\n            }\n          }, this));\n        }\n\n        // custom next\n        if (this._next.length) {\n          this._next.bind(\"click.jPages\", this.bind(function () {\n            var newPage = this._currentPageNum + 1;\n            if (this.validNewPage(newPage)) {\n              this._clicked = true;\n              this.paginate(newPage);\n            }\n          }, this));\n        }\n\n        // custom last\n        if (this._last.length) {\n          this._last.bind(\"click.jPages\", this.bind(function () {\n            if (this.validNewPage(this._numPages)) {\n              this._clicked = true;\n              this.paginate(this._numPages);\n            }\n          }, this));\n        }\n      },\n      disableNavSelection: function disableNavSelection(element) {\n        if (typeof element.onselectstart != \"undefined\") element.onselectstart = function () {\n          return false;\n        };else if (typeof element.style.MozUserSelect != \"undefined\") element.style.MozUserSelect = \"none\";else element.onmousedown = function () {\n          return false;\n        };\n      },\n      bindNavKeyBrowse: function bindNavKeyBrowse() {\n        this.jQdocument.bind(\"keydown.jPages\", this.bind(function (evt) {\n          var target = evt.target.nodeName.toLowerCase();\n          if (this.elemScrolledIntoView() && target !== \"input\" && target !== \"textarea\") {\n            var newPage = this._currentPageNum;\n            if (evt.which === 37) newPage = this._currentPageNum - 1;\n            if (evt.which === 39) newPage = this._currentPageNum + 1;\n            if (this.validNewPage(newPage)) {\n              this._clicked = true;\n              this.paginate(newPage);\n            }\n          }\n        }, this));\n      },\n      elemScrolledIntoView: function elemScrolledIntoView() {\n        var docViewTop, docViewBottom, elemTop, elemBottom;\n        docViewTop = this.jQwindow.scrollTop();\n        docViewBottom = docViewTop + this.jQwindow.height();\n        elemTop = this._container.offset().top;\n        elemBottom = elemTop + this._container.height();\n        return elemBottom >= docViewTop && elemTop <= docViewBottom;\n\n        // comment above and uncomment below if you want keyBrowse to happen\n        // only when container is completely visible in the page\n      },\n      bindNavScrollBrowse: function bindNavScrollBrowse() {\n        this._container.bind(\"mousewheel.jPages DOMMouseScroll.jPages\", this.bind(function (evt) {\n          var newPage = (evt.originalEvent.wheelDelta || -evt.originalEvent.detail) > 0 ? this._currentPageNum - 1 : this._currentPageNum + 1;\n          if (this.validNewPage(newPage)) {\n            this._clicked = true;\n            this.paginate(newPage);\n          }\n          evt.preventDefault();\n          return false;\n        }, this));\n      },\n      getNewPage: function getNewPage(nav, target) {\n        if (target.is(nav.currentPage)) return this._currentPageNum;\n        if (target.is(nav.pages)) return nav.pages.index(target) + 1;\n        if (target.is(nav.first)) return 1;\n        if (target.is(nav.last)) return this._numPages;\n        if (target.is(nav.previous)) return nav.pages.index(nav.currentPage);\n        if (target.is(nav.next)) return nav.pages.index(nav.currentPage) + 2;\n        return 0;\n      },\n      validNewPage: function validNewPage(newPage) {\n        return newPage !== this._currentPageNum && newPage > 0 && newPage <= this._numPages;\n      },\n      paginate: function paginate(page) {\n        var itemRange, pageInterval;\n        itemRange = this.updateItems(page);\n        pageInterval = this.updatePages(page);\n        this._currentPageNum = page;\n        if ($.isFunction(this.options.callback)) this.callback(page, itemRange, pageInterval);\n        this.updatePause();\n      },\n      updateItems: function updateItems(page) {\n        var range = this.getItemRange(page);\n        this._itemsHiding = this._itemsShowing;\n        this._itemsShowing = this._items.slice(range.start, range.end);\n        if (this._cssAnimSupport && this.options.animation.length) this.cssAnimations(page);else this.jQAnimations(page);\n        return range;\n      },\n      getItemRange: function getItemRange(page) {\n        var range = {};\n        range.start = (page - 1) * this.options.perPage;\n        range.end = range.start + this.options.perPage;\n        if (range.end > this._items.length) range.end = this._items.length;\n        return range;\n      },\n      cssAnimations: function cssAnimations(page) {\n        clearInterval(this._delay);\n        this._itemsHiding.removeClass(this.options.animation + \" jp-invisible\").addClass(\"jp-hidden\");\n        this._itemsShowing.removeClass(\"jp-hidden\").addClass(\"jp-invisible\");\n        this._itemsOriented = this.getDirectedItems(page);\n        this._index = 0;\n        this._delay = setInterval(this.bind(function () {\n          if (this._index === this._itemsOriented.length) clearInterval(this._delay);else {\n            this._itemsOriented.eq(this._index).removeClass(\"jp-invisible\").addClass(this.options.animation);\n          }\n          this._index = this._index + 1;\n        }, this), this.options.delay);\n      },\n      jQAnimations: function jQAnimations(page) {\n        clearInterval(this._delay);\n        this._itemsHiding.addClass(\"jp-hidden\");\n        this._itemsShowing.fadeTo(0, 0).removeClass(\"jp-hidden\");\n        this._itemsOriented = this.getDirectedItems(page);\n        this._index = 0;\n        this._delay = setInterval(this.bind(function () {\n          if (this._index === this._itemsOriented.length) clearInterval(this._delay);else {\n            this._itemsOriented.eq(this._index).fadeTo(this.options.fallback, 1);\n          }\n          this._index = this._index + 1;\n        }, this), this.options.delay);\n      },\n      getDirectedItems: function getDirectedItems(page) {\n        var itemsToShow;\n        switch (this.options.direction) {\n          case \"backwards\":\n            itemsToShow = $(this._itemsShowing.get().reverse());\n            break;\n          case \"random\":\n            itemsToShow = $(this._itemsShowing.get().sort(function () {\n              return Math.round(Math.random()) - 0.5;\n            }));\n            break;\n          case \"auto\":\n            itemsToShow = page >= this._currentPageNum ? this._itemsShowing : $(this._itemsShowing.get().reverse());\n            break;\n          default:\n            itemsToShow = this._itemsShowing;\n        }\n        return itemsToShow;\n      },\n      updatePages: function updatePages(page) {\n        var interval, index, nav;\n        interval = this.getInterval(page);\n        for (index in this._nav) {\n          if (this._nav.hasOwnProperty(index)) {\n            nav = this._nav[index];\n            this.updateBtns(nav, page);\n            this.updateCurrentPage(nav, page);\n            this.updatePagesShowing(nav, interval);\n            this.updateBreaks(nav, interval);\n          }\n        }\n        return interval;\n      },\n      getInterval: function getInterval(page) {\n        var neHalf, upperLimit, start, end;\n        neHalf = Math.ceil(this.options.midRange / 2);\n        upperLimit = this._numPages - this.options.midRange;\n        start = page > neHalf ? Math.max(Math.min(page - neHalf, upperLimit), 0) : 0;\n        end = page > neHalf ? Math.min(page + neHalf - (this.options.midRange % 2 > 0 ? 1 : 0), this._numPages) : Math.min(this.options.midRange, this._numPages);\n        return {\n          start: start,\n          end: end\n        };\n      },\n      updateBtns: function updateBtns(nav, page) {\n        nav.previous.closest('li').addClass('-prev');\n        nav.next.closest('li').addClass('-next');\n        if (page === 1) {\n          nav.first.addClass(\"jp-disabled\").attr('tabindex', '-1');\n          nav.previous.addClass(\"jp-disabled\").attr('tabindex', '-1');\n          nav.first.closest('li').addClass(\"disabled\");\n          nav.previous.closest('li').addClass(\"disabled\");\n        }\n        if (page === this._numPages) {\n          nav.next.addClass(\"jp-disabled\").attr('tabindex', '-1');\n          nav.last.addClass(\"jp-disabled\").attr('tabindex', '-1');\n          nav.next.closest('li').addClass(\"disabled\");\n          nav.last.closest('li').addClass(\"disabled\");\n        }\n        if (this._currentPageNum === 1 && page > 1) {\n          nav.first.removeClass(\"jp-disabled\").removeAttr('tabindex');\n          nav.previous.removeClass(\"jp-disabled\").removeAttr('tabindex');\n          nav.first.closest('li').removeClass(\"disabled\");\n          nav.previous.closest('li').removeClass(\"disabled\");\n        }\n        if (this._currentPageNum === this._numPages && page < this._numPages) {\n          nav.next.removeClass(\"jp-disabled\").removeAttr('tabindex');\n          nav.last.removeClass(\"jp-disabled\").removeAttr('tabindex');\n          nav.next.closest('li').removeClass(\"disabled\");\n          nav.last.closest('li').removeClass(\"disabled\");\n        }\n      },\n      updateCurrentPage: function updateCurrentPage(nav, page) {\n        nav.currentPage.removeClass(\"jp-current\");\n        nav.currentPage = nav.pages.eq(page - 1).addClass(\"jp-current\");\n        nav.pages.closest('li').removeClass(\"selected\");\n        nav.pages.eq(page - 1).closest('li').addClass(\"selected\");\n        //Page..of..\n        var $phIndex = \"#\" + this.options.pHolder;\n        $($phIndex + ' .page-start-index').html(page);\n        $($phIndex + ' .total-item-count').html(nav.pages.length);\n      },\n      updatePagesShowing: function updatePagesShowing(nav, interval) {\n        var newRange = nav.pages.slice(interval.start, interval.end).not(nav.permPages);\n        nav.pagesShowing.not(newRange).addClass(\"jp-hidden\");\n        newRange.not(nav.pagesShowing).removeClass(\"jp-hidden\");\n        newRange.not(nav.pagesShowing).closest('li').removeClass(\"jp-hidden\");\n        nav.pagesShowing.not(newRange).closest('li').addClass(\"jp-hidden\");\n        nav.pagesShowing = newRange;\n      },\n      updateBreaks: function updateBreaks(nav, interval) {\n        if (interval.start > this.options.startRange || this.options.startRange === 0 && interval.start > 0) nav.fstBreak.removeClass(\"jp-hidden\");else nav.fstBreak.addClass(\"jp-hidden\");\n        if (interval.end < this._numPages - this.options.endRange) nav.lstBreak.removeClass(\"jp-hidden\");else nav.lstBreak.addClass(\"jp-hidden\");\n      },\n      callback: function callback(page, itemRange, pageInterval) {\n        var pages = {\n            current: page,\n            interval: pageInterval,\n            count: this._numPages\n          },\n          items = {\n            showing: this._itemsShowing,\n            oncoming: this._items.slice(itemRange.start + this.options.perPage, itemRange.end + this.options.perPage),\n            range: itemRange,\n            count: this._items.length\n          };\n        pages.interval.start = pages.interval.start + 1;\n        items.range.start = items.range.start + 1;\n        this.options.callback(pages, items);\n      },\n      updatePause: function updatePause() {\n        if (this.options.pause && this._numPages > 1) {\n          clearTimeout(this._pause);\n          if (this.options.clickStop && this._clicked) return;else {\n            this._pause = setTimeout(this.bind(function () {\n              this.paginate(this._currentPageNum !== this._numPages ? this._currentPageNum + 1 : 1);\n            }, this), this.options.pause);\n          }\n        }\n      },\n      setMinHeight: function setMinHeight() {\n        if (this.options.minHeight && !this._container.is(\"table, tbody\")) {\n          setTimeout(this.bind(function () {\n            this._container.css({\n              \"min-height\": this._container.css(\"height\")\n            });\n          }, this), 1000);\n        }\n      },\n      bind: function bind(fn, me) {\n        return function () {\n          return fn.apply(me, arguments);\n        };\n      },\n      destroy: function destroy() {\n        this.jQdocument.unbind(\"keydown.jPages\");\n        this._container.unbind(\"mousewheel.jPages DOMMouseScroll.jPages\");\n        if (this.options.minHeight) {\n          this._container.css(\"min-height\", \"\");\n        }\n        if (this._cssAnimSupport && this.options.animation.length) this._items.removeClass(\"animated jp-hidden jp-invisible \" + this.options.animation);else this._items.removeClass(\"jp-hidden\").fadeTo(0, 1);\n        this._holder.unbind(\"click.jPages\").empty();\n      }\n    };\n    $.fn[name] = function (arg) {\n      var type = $.type(arg);\n      if (type === \"object\") {\n        if (this.length && !$.data(this, name)) {\n          instance = new Plugin(this, arg);\n          this.each(function () {\n            $.data(this, name, instance);\n          });\n        }\n        return this;\n      }\n      if (type === \"string\" && arg === \"destroy\") {\n        instance.destroy();\n        this.each(function () {\n          $.removeData(this, name);\n        });\n        return this;\n      }\n      if (type === 'number' && arg % 1 === 0) {\n        if (instance.validNewPage(arg)) {\n          instance.paginate(arg);\n        }\n        return this;\n      }\n      return this;\n    };\n  })(jQuery, window, document);\n  $(document).ready(function () {\n    //Pagination \n    $(\".image-gallery\").each(function (index, element) {\n      var $pagination = 'pagination' + index;\n      var $itemContainer = 'itemContainer' + index;\n      var $pHolder = 'pHolder' + index;\n      $(element).find('.pagination').attr('id', $pagination);\n      $(element).find('.item-container').attr('id', $itemContainer);\n      $(this).attr('id', $pHolder);\n      $('ul#' + $pagination).jPages({\n        containerID: $itemContainer,\n        perPage: 1,\n        startPage: 1,\n        startRange: 1,\n        midRange: 5,\n        endRange: 1,\n        pHolder: $pHolder\n      });\n    });\n  });\n})();\n\n//# sourceURL=webpack:///./app/components/image-gallery/image-gallery.js?");

/***/ }),

/***/ "./app/components/image-gallery/image-gallery.scss":
/*!*********************************************************!*\
  !*** ./app/components/image-gallery/image-gallery.scss ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/image-gallery/image-gallery.scss?");

/***/ }),

/***/ 48:
/*!***************************************************************************************************************!*\
  !*** multi ./app/components/image-gallery/image-gallery.js ./app/components/image-gallery/image-gallery.scss ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/image-gallery/image-gallery.js */\"./app/components/image-gallery/image-gallery.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/image-gallery/image-gallery.scss */\"./app/components/image-gallery/image-gallery.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/image-gallery/image-gallery.js_./app/components/image-gallery/image-gallery.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 50);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/responsive-table/index.js":
/*!**************************************************!*\
  !*** ./app/components/responsive-table/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _responsive_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./responsive-table */ \"./app/components/responsive-table/responsive-table.js\");\n\n$(function () {\n  return Object(_responsive_table__WEBPACK_IMPORTED_MODULE_0__[\"initResponsiveTable\"])();\n});\n\n//# sourceURL=webpack:///./app/components/responsive-table/index.js?");

/***/ }),

/***/ "./app/components/responsive-table/responsive-table.js":
/*!*************************************************************!*\
  !*** ./app/components/responsive-table/responsive-table.js ***!
  \*************************************************************/
/*! exports provided: makeTableResponsive, initResponsiveTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeTableResponsive\", function() { return makeTableResponsive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initResponsiveTable\", function() { return initResponsiveTable; });\nvar makeTableResponsive = function makeTableResponsive(handle, className) {\n  $(handle).addClass(className);\n  $(handle).removeAttr(\"border\");\n  var tHeads = $(handle).find(\"th\");\n  var tRows = $(handle).find(\"tr\").has(\"td\");\n  var row = $('<tr>');\n  var tHead = $('<thead>');\n  for (var i = 0; i < tHeads.length; i++) {\n    $(tHeads.get(i)).appendTo(row);\n  }\n  row.appendTo(tHead);\n  tHead.prependTo($(handle));\n  if (tHeads.length > 0) {\n    $(handle).find(\"tbody\").find(\"tr\")[0].remove();\n  }\n  for (var index = 0; index < tRows.length; index++) {\n    for (var j = 0; j < tHeads.length; j++) {\n      $(tRows.get(index)).find(\"td:nth-child(\" + (j + 1) + \")\").attr(\"data-th\", $(tHeads.get(j)).text());\n    }\n  }\n};\nvar initResponsiveTable = function initResponsiveTable() {\n  $(\".table-container > table\").each(function (i, table) {\n    makeTableResponsive(table, \"data-table\");\n  });\n  $(\".table-large-container > table\").each(function (i, table) {\n    makeTableResponsive(table, \"data-table--large\");\n  });\n  $(\".table-alt-grey-container > table\").each(function (i, table) {\n    makeTableResponsive(table, \"data-table--grey-even-row\");\n  });\n};\n\n\n//# sourceURL=webpack:///./app/components/responsive-table/responsive-table.js?");

/***/ }),

/***/ 50:
/*!********************************************************!*\
  !*** multi ./app/components/responsive-table/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/responsive-table/index.js */\"./app/components/responsive-table/index.js\");\n\n\n//# sourceURL=webpack:///multi_./app/components/responsive-table/index.js?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 51);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/resume-chat/resume-chat.js":
/*!***************************************************!*\
  !*** ./app/components/resume-chat/resume-chat.js ***!
  \***************************************************/
/*! exports provided: GSC_Static_KPSquad_Init, GSC_Editable_KPSquad_Init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GSC_Static_KPSquad_Init\", function() { return GSC_Static_KPSquad_Init; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GSC_Editable_KPSquad_Init\", function() { return GSC_Editable_KPSquad_Init; });\nvar GSC_Static_KPSquad_Init = function GSC_Static_KPSquad_Init() {\n  getActiveChatInfo();\n};\nvar GSC_Editable_KPSquad_Init = function GSC_Editable_KPSquad_Init() {\n  getActiveChatInfo();\n};\nvar dtoParams = {\n  \"accept\": \"*/*\",\n  \"sec-ch-ua\": \"\\\"Not.A/Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"114\\\", \\\"Google Chrome\\\";v=\\\"114\\\"\",\n  \"sec-ch-ua-mobile\": \"?0\",\n  \"sec-ch-ua-platform\": \"\\\"Windows\\\"\",\n  \"x-inclusionjsonpath\": \"$.UserAccountData.ebizAccountsWithPersonInfos.membershipAccountInfo.planInfos[0].programId;$.UserAccountData.ebizAccountsWithPersonInfos.membershipAccountInfo.planInfos[0].carrierId;\",\n  \"x-osversion\": \"0\",\n  \"x-requested-with\": \"XMLHttpRequest\",\n  \"x-retainjsonschema\": \"true\",\n  \"x-sessiontoken\": \"true\",\n  \"x-useragentcategory\": \"B\",\n  \"x-useragenttype\": \"Desktop\",\n  \"x-versionid\": \"3.0.1.0\"\n};\nvar urlToOpenChat;\nfunction getActiveChatInfo() {\n  try {\n    $('#gsc-resume-continue-chat').on('click', openChatWindow);\n    var parentId = document.querySelector('body[data-resume-chat-banner-disabled=\"true\"]');\n    $('#gsc-resume-chat').css(\"display\", \"none\");\n    var activeChatApiUrl = jsonConfigs.global.activeChatApiUrl;\n    var isSpanish = /kpLanguage=es-US/i.test(document.cookie);\n    var isChatwindow = window.location.href.includes(\"/secure/click-to-chat/chat\");\n    var isSignedOn = /isSignedOn=true/.test(document.cookie);\n    if (isSignedOn && !isSpanish && parentId == null && !isChatwindow) {\n      $.ajax(activeChatApiUrl, {\n        type: 'GET',\n        async: false,\n        timeout: 3000,\n        headers: dtoParams,\n        xhrFields: {\n          'withCredentials': true\n        },\n        success: function success(data, textStatus, xhr) {\n          try {\n            if (data && data.length > 0 && data[0].chatId) {\n              $('#gsc-resume-chat').css(\"display\", \"block\");\n              if (data[0].genesysUrl) {\n                urlToOpenChat = data[0].genesysUrl + '?resume';\n              } else {\n                urlToOpenChat = window.location.href.split('/secure')[0] + '/secure/click-to-chat/chat.welcome' + '?resume';\n              }\n            }\n          } catch (error) {\n            console.log(\"Error on resume chat success response\", error);\n          }\n        },\n        error: function error(xhr, ajaxOptions, thrownError) {\n          $('#gsc-resume-chat').css(\"display\", \"none\");\n        }\n      });\n    }\n  } catch (error) {\n    console.log(\"Error while calling active chat info\", error);\n  }\n}\n;\nfunction openChatWindow() {\n  window.open(urlToOpenChat, '', 'top=500,left=1000,width=500,height=700');\n}\n\n\n//# sourceURL=webpack:///./app/components/resume-chat/resume-chat.js?");

/***/ }),

/***/ "./app/components/resume-chat/resume-chat.scss":
/*!*****************************************************!*\
  !*** ./app/components/resume-chat/resume-chat.scss ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/resume-chat/resume-chat.scss?");

/***/ }),

/***/ 51:
/*!*******************************************************************************************************!*\
  !*** multi ./app/components/resume-chat/resume-chat.js ./app/components/resume-chat/resume-chat.scss ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/resume-chat/resume-chat.js */\"./app/components/resume-chat/resume-chat.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/resume-chat/resume-chat.scss */\"./app/components/resume-chat/resume-chat.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/resume-chat/resume-chat.js_./app/components/resume-chat/resume-chat.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 52);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/rule-container/index.js":
/*!************************************************!*\
  !*** ./app/components/rule-container/index.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rule_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rule-container */ \"./app/components/rule-container/rule-container.js\");\n\n$(function () {\n  return Object(_rule_container__WEBPACK_IMPORTED_MODULE_0__[\"initKPRuleContainer\"])();\n});\n\n//# sourceURL=webpack:///./app/components/rule-container/index.js?");

/***/ }),

/***/ "./app/components/rule-container/rule-container.js":
/*!*********************************************************!*\
  !*** ./app/components/rule-container/rule-container.js ***!
  \*********************************************************/
/*! exports provided: initKPRuleContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initKPRuleContainer\", function() { return initKPRuleContainer; });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar hasEntitlementAccess = function hasEntitlementAccess(enableIds, disabledId) {\n  var userClient = $kp.KPUserProfile.UserProfileClient;\n  // no access if user has disabled entitlement\n  if (disabledId && userClient.hasEntitlementForCurrentUser(disabledId)) {\n    return false;\n  }\n  // access if user has any of authored entitlement\n  return !!enableIds && enableIds.split(',').some(function (id) {\n    return userClient.hasEntitlementForCurrentUser(id);\n  });\n};\nvar hasMemberAccess = function hasMemberAccess(type) {\n  var userClient = $kp.KPUserProfile.UserProfileClient;\n  var proxyClient = $kp.KPProxyPicker.ProxyPickerClient;\n  // access if user is member\n  var user = userClient.getUser() || {};\n  if (type === 'member' && user.isMember) {\n    return true;\n  }\n  // access if user or proxy has dualchoice\n  var selectedProxy = proxyClient.isProxySelected() ? userClient.getProxies().find(function (proxy) {\n    return proxy.relationshipID === proxyClient.getRelationshipId();\n  }) : undefined;\n  var hasDualChoicePlan = (selectedProxy ? selectedProxy.hasDualChoicePlan : user.hasDualChoicePlan) === 'Y';\n  if (type === 'dualchoice' && hasDualChoicePlan) {\n    return true;\n  }\n  return false;\n};\nvar RuleContainer = /*#__PURE__*/function () {\n  function RuleContainer() {\n    _classCallCheck(this, RuleContainer);\n    var self = this;\n    $kp && $kp.KPProxyPicker && $kp.KPProxyPicker.ProxyPickerClient.onChange(function () {\n      return self.update();\n    });\n    this.update();\n  }\n  return _createClass(RuleContainer, [{\n    key: \"update\",\n    value: function update() {\n      if (document.body.dataset.authoreditmode) {\n        document.querySelectorAll('.rule-container').forEach(function (rc) {\n          return rc.classList.remove('toggleHide');\n        });\n        return;\n      }\n      ;\n      $kp && $kp.KPUserProfile && $kp.KPUserProfile.UserProfileClient.load().then(function (data) {\n        document.querySelectorAll('.rule-container .ruleContainer').forEach(function (rc) {\n          var enabledEntitlementIds = rc.dataset.enabledEntitlementIds;\n          var disabledEntitlementId = rc.dataset.disabledEntitlementId;\n          var memberType = rc.dataset.memberType;\n          var hasAccess = false;\n          if (memberType) {\n            hasAccess = hasMemberAccess(memberType);\n          } else if (enabledEntitlementIds || disabledEntitlementId) {\n            hasAccess = hasEntitlementAccess(enabledEntitlementIds, disabledEntitlementId);\n          }\n          hasAccess ? rc.parentNode.classList.remove('toggleHide') : rc.parentNode.classList.add('toggleHide');\n        });\n      });\n    }\n  }]);\n}();\nvar initKPRuleContainer = function initKPRuleContainer() {\n  window.$kp = window.$kp || {};\n  var $kp = window.$kp;\n  $kp.GS = $kp.GS || {};\n  $kp.GS.RuleContainer = new RuleContainer();\n};\n\n\n//# sourceURL=webpack:///./app/components/rule-container/rule-container.js?");

/***/ }),

/***/ 52:
/*!******************************************************!*\
  !*** multi ./app/components/rule-container/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/rule-container/index.js */\"./app/components/rule-container/index.js\");\n\n\n//# sourceURL=webpack:///multi_./app/components/rule-container/index.js?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/target-container/index.js":
/*!**************************************************!*\
  !*** ./app/components/target-container/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _target_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./target-container */ \"./app/components/target-container/target-container.js\");\n\n$(function () {\n  return Object(_target_container__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n});\n\n//# sourceURL=webpack:///./app/components/target-container/index.js?");

/***/ }),

/***/ "./app/components/target-container/target-container.js":
/*!*************************************************************!*\
  !*** ./app/components/target-container/target-container.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initTargetContainer; });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar PARAMS = {\n  SOURCE: 'data-component-source-id',\n  PLACEHOLDER: 'data-component-placeholder-id',\n  AUTO: 'auto-swap',\n  TARGETED: 'targeted-swap'\n};\nvar swapContent = function swapContent(tag) {\n  var source = document.querySelector(\"[\".concat(PARAMS.SOURCE, \"=\\\"\").concat(tag, \"\\\"]\"));\n  // source must have content\n  if (!source || source.childNodes.length === 0) {\n    return;\n  }\n  // verify mobile only\n  var width = document.documentElement.clientWidth || document.body.clientWidth;\n  if (source.getAttribute(PARAMS.AUTO) === 'mobile' && width > 768) {\n    return;\n  }\n  // placeholder must be present\n  var placeholder = document.querySelector(\"[\".concat(PARAMS.PLACEHOLDER, \"=\\\"\").concat(tag, \"\\\"]:not([\").concat(PARAMS.AUTO, \"])\"));\n  if (!placeholder) {\n    placeholder = document.querySelector(\"#\".concat(tag, \":not([\").concat(PARAMS.AUTO, \"])\"));\n  }\n  if (!placeholder) {\n    return;\n  }\n\n  // swap\n  while (source.childNodes.length > 0) {\n    placeholder.appendChild(source.firstChild);\n  }\n  placeholder.setAttribute(PARAMS.AUTO, '');\n};\nvar swapAllContent = function swapAllContent() {\n  Array.from(document.querySelectorAll(\"[\".concat(PARAMS.SOURCE, \"][auto-swap]\"))).forEach(function (source) {\n    swapContent(source.getAttribute(PARAMS.SOURCE));\n  });\n};\nvar initSources = function initSources() {\n  Array.from(document.querySelectorAll(\"[\".concat(PARAMS.SOURCE, \"]\"))).forEach(function (source) {\n    var swap = source.getAttribute(PARAMS.AUTO);\n    if (!swap || swap !== 'mobile') {\n      source.style.display = 'none';\n    }\n  });\n};\nvar initListener = function initListener() {\n  new MutationObserver(function (mutations) {\n    mutations.forEach(function (mutation) {\n      if (mutation.type === 'childList' && mutation.addedNodes.length) {\n        swapAllContent();\n      }\n    });\n  }).observe(document.documentElement, {\n    childList: true,\n    subtree: true\n  });\n};\nvar TargetContainer = /*#__PURE__*/function () {\n  function TargetContainer() {\n    _classCallCheck(this, TargetContainer);\n    initSources();\n    initListener();\n    swapAllContent();\n  }\n  return _createClass(TargetContainer, [{\n    key: \"swap\",\n    value: function swap(tag) {\n      swapContent(tag);\n    }\n  }]);\n}();\nfunction initTargetContainer() {\n  window.$kp = window.$kp || {};\n  var $kp = window.$kp;\n  $kp.GS = $kp.GS || {};\n  $kp.GS.TargetContainer = new TargetContainer();\n}\n\n//# sourceURL=webpack:///./app/components/target-container/target-container.js?");

/***/ }),

/***/ 55:
/*!********************************************************!*\
  !*** multi ./app/components/target-container/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/target-container/index.js */\"./app/components/target-container/index.js\");\n\n\n//# sourceURL=webpack:///multi_./app/components/target-container/index.js?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/embeds/video/index.js":
/*!***********************************!*\
  !*** ./app/embeds/video/index.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _video_schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video-schema.js */ \"./app/embeds/video/video-schema.js\");\n\n$(function () {\n  return new _video_schema_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]().init();\n});\n\n//# sourceURL=webpack:///./app/embeds/video/index.js?");

/***/ }),

/***/ "./app/embeds/video/video-schema.js":
/*!******************************************!*\
  !*** ./app/embeds/video/video-schema.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return VideoPlayerSchema; });\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ \"moment\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar VideoPlayerSchema = /*#__PURE__*/function () {\n  function VideoPlayerSchema() {\n    var _this = this;\n    _classCallCheck(this, VideoPlayerSchema);\n    this.srcStrings = [];\n    this.guids = [];\n    var iframes = document.querySelectorAll('iframe.video-player');\n    for (var i = 0; i < iframes.length; i++) {\n      this.srcStrings.push(iframes[i].src);\n    }\n    if (this.srcStrings.length) {\n      this.srcStrings.forEach(function (src) {\n        var hasGuid = src.match(/\\/view\\/(.*?)\\?/) || null;\n        if (hasGuid && hasGuid[1] && hasGuid[1].length) {\n          _this.guids.push(hasGuid[1]);\n        }\n      });\n    }\n  }\n  return _createClass(VideoPlayerSchema, [{\n    key: \"init\",\n    value: function init() {\n      if (this.guids.length) {\n        this.getQumuData();\n      }\n      this.initIframeModal();\n    }\n  }, {\n    key: \"getQumuData\",\n    value: function getQumuData() {\n      var _this2 = this;\n      this.guids.forEach(function (guid) {\n        var requestUrl = \"https://kp.qumucloud.com/api/2.1/rest/kulus/\".concat(guid);\n        return $.get(requestUrl, function (response) {\n          var data = response.kulu;\n          _this2.appendJsonLd({\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"VideoObject\",\n            \"name\": data.title,\n            \"description\": data.metadata[3].value,\n            // would like a better response structure to grab \"description\" ie data.description\n            \"uploadDate\": new Date(data.created).toISOString(),\n            \"thumbnailUrl\": data.thumbnail.url,\n            \"duration\": moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(data.duration),\n            \"embedUrl\": data.player\n          });\n        }).fail(function (error) {\n          return console.error('Error:', error);\n        });\n      });\n    }\n  }, {\n    key: \"appendJsonLd\",\n    value: function appendJsonLd(ldData) {\n      if (ldData) {\n        try {\n          var stringifiedData = JSON.stringify(ldData);\n          $('<script>').attr('type', 'application/ld+json').text(stringifiedData).appendTo('head');\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  }, {\n    key: \"closeIframe\",\n    value: function closeIframe(modalId) {\n      var videoModalCloseBtn = document.querySelector('#' + modalId + ' .modal-inner button.-close--small');\n      var iframe = document.querySelector('#' + modalId + ' .modal-inner iframe');\n      if (videoModalCloseBtn && iframe) {\n        var src = iframe.src;\n        videoModalCloseBtn.addEventListener('click', function () {\n          iframe.src = src;\n        });\n      }\n    }\n  }, {\n    key: \"initIframeModal\",\n    value: function initIframeModal() {\n      var _this3 = this;\n      var anchorModal = document.querySelector('a[href*=modal]');\n      if (anchorModal) {\n        var anchorModalHref = anchorModal.href;\n        var anchorModalId = anchorModalHref.split(':')[1];\n        anchorModal.addEventListener('click', function () {\n          setTimeout(function () {\n            _this3.closeIframe(anchorModalId);\n          }, 1000);\n        });\n      }\n    }\n  }]);\n}();\n\n\n//# sourceURL=webpack:///./app/embeds/video/video-schema.js?");

/***/ }),

/***/ 3:
/*!*****************************************!*\
  !*** multi ./app/embeds/video/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/embeds/video/index.js */\"./app/embeds/video/index.js\");\n\n\n//# sourceURL=webpack:///multi_./app/embeds/video/index.js?");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = moment;\n\n//# sourceURL=webpack:///external_%22moment%22?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 58);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/video/video.js":
/*!***************************************!*\
  !*** ./app/components/video/video.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("$(document).ready(function () {\n  var win_width = $(window).width();\n  responsive_video(win_width);\n  $(window).on('resize', function () {\n    var win_width = $(window).width();\n    responsive_video(win_width);\n  });\n  $('a.skipVideoPlayer').on('click keypress', function (e) {\n    if (e.type === 'click' || e.which === 13) {\n      var video_id = '#' + $(this).data('video-id');\n      $(video_id).focus();\n    }\n  });\n  $('.video-footer-left a').on(\"click keypress\", function (e) {\n    if (e.type === 'click' || e.which === 13) {\n      if ($(this).attr('id') === 'show-transcript') {\n        $('.transcript-content-container').show();\n        $('#show-transcript').hide();\n        $('#hide-transcript').show();\n      } else {\n        $('.transcript-content-container').hide();\n        $('#hide-transcript').hide();\n        $('#show-transcript').show();\n      }\n    }\n  });\n});\nfunction responsive_video(w_w) {\n  var video = $('.responsive_container');\n  if (w_w > 900 && w_w < 1280) {\n    var side_margin = w_w - 899;\n    var left_margin = side_margin / 2;\n    var right_margin = side_margin / 2;\n    video.css({\n      \"margin-left\": left_margin + \"px\",\n      \"margin-right\": right_margin + \"px\"\n    });\n    video.removeClass(\"video_holder\");\n    video.addClass(\"full_bleed_margin\").removeClass(\"responsive_bleed_margin\");\n  } else if (w_w >= 1280) {\n    var margin = (w_w - 900) / 2;\n\n    // For Firefox, we need to give smaller margin otherwise it shows scroll bars for video.\n    if (navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n      margin = margin - 5;\n    }\n    video.css({\n      \"margin-left\": margin + \"px\",\n      \"margin-right\": margin + \"px\",\n      \"max-width\": 1280 + \"px\"\n    });\n    video.removeClass(\"video_holder\");\n    video.addClass(\"full_bleed_margin\").removeClass(\"responsive_bleed_margin\");\n  } else {\n    $('.responsive_container').removeAttr(\"style\");\n    video.addClass(\"video_holder\");\n    video.addClass(\"responsive_bleed_margin\").removeClass(\"full_bleed_margin\");\n  }\n}\n\n//# sourceURL=webpack:///./app/components/video/video.js?");

/***/ }),

/***/ "./app/components/video/video.scss":
/*!*****************************************!*\
  !*** ./app/components/video/video.scss ***!
  \*****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/video/video.scss?");

/***/ }),

/***/ 58:
/*!*******************************************************************************!*\
  !*** multi ./app/components/video/video.js ./app/components/video/video.scss ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/video/video.js */\"./app/components/video/video.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/video/video.scss */\"./app/components/video/video.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/video/video.js_./app/components/video/video.scss?");

/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 59);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/viewMoreText/viewMoreText.js":
/*!*****************************************************!*\
  !*** ./app/components/viewMoreText/viewMoreText.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//----------------------------------------------------------------------------\n/**\n * Shows/Hides the description based on the content.\n */\n//----------------------------------------------------------------------------\n$(document).ready(function () {\n  //----------------------------------------------------------------------------\n  /**\n   * Selector Definition\n   */\n  //----------------------------------------------------------------------------\n  var showMoreLink = $('.js-viewMoreLess-show-more a');\n  if (!showMoreLink.is(':empty')) {\n    var longText = $('.js-viewMoreLess-long-text'),\n      showMore = $('.js-viewMoreLess-show-more'),\n      showLess = $('.js-viewMoreLess-show-less'),\n      viewMoreOrLess = $('.js-viewMoreOrLess'),\n      ellipsis = $('.js-viewMoreLess-ellipsis');\n    ellipsis.prev().css(\"display\", \"inline\");\n    showMore.click(function () {\n      var $this = $(this);\n      $this.prev(longText).addClass(\"show\").removeClass(\"hide\").focus();\n      $this.parent(viewMoreOrLess).find(ellipsis).addClass(\"hide\").removeClass(\"show\");\n      $this.addClass(\"hide\").removeClass(\"show\");\n      $this.next(showLess).addClass(\"show\").removeClass(\"hide\");\n    });\n    showLess.click(function () {\n      var $this = $(this);\n      $this.prev().prev(longText).addClass(\"hide\").removeClass(\"show\");\n      $this.addClass(\"hide\").removeClass(\"show\");\n      $this.prev(showMore).addClass(\"show\").removeClass(\"hide\");\n      $this.parent(viewMoreOrLess).find(showMoreLink).focus();\n      $this.parent(viewMoreOrLess).find(ellipsis).addClass(\"show\").removeClass(\"hide\");\n    });\n  }\n});\n\n//# sourceURL=webpack:///./app/components/viewMoreText/viewMoreText.js?");

/***/ }),

/***/ "./app/components/viewMoreText/viewMoreText.scss":
/*!*******************************************************!*\
  !*** ./app/components/viewMoreText/viewMoreText.scss ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./app/components/viewMoreText/viewMoreText.scss?");

/***/ }),

/***/ 59:
/*!***********************************************************************************************************!*\
  !*** multi ./app/components/viewMoreText/viewMoreText.js ./app/components/viewMoreText/viewMoreText.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/viewMoreText/viewMoreText.js */\"./app/components/viewMoreText/viewMoreText.js\");\nmodule.exports = __webpack_require__(/*! /apps/jenkins-agent/agent/workspace/ion_release_kp-foundation-4.10.2/ui.frontend/app/components/viewMoreText/viewMoreText.scss */\"./app/components/viewMoreText/viewMoreText.scss\");\n\n\n//# sourceURL=webpack:///multi_./app/components/viewMoreText/viewMoreText.js_./app/components/viewMoreText/viewMoreText.scss?");

/***/ })

/******/ });
